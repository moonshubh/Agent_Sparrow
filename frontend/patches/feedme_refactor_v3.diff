diff --git a/frontend/components/feedme/AnalyticsDashboard.tsx b/frontend/components/feedme/AnalyticsDashboard.tsx
deleted file mode 100644
index f8635b4..0000000
--- a/frontend/components/feedme/AnalyticsDashboard.tsx
+++ /dev/null
@@ -1,922 +0,0 @@
-/**
- * AnalyticsDashboard Component
- * 
- * Real-time search performance metrics with visual charts,
- * usage analytics from Phase 2 backend, and performance optimization suggestions.
- * 
- * Part of FeedMe v2.0 Phase 3D: Advanced Search Interface
- */
-
-'use client'
-
-import React, { useState, useCallback, useMemo, useEffect } from 'react'
-import { 
-  BarChart, Bar, LineChart, Line, PieChart, Pie, Cell, 
-  AreaChart, Area, ResponsiveContainer, XAxis, YAxis, 
-  CartesianGrid, Tooltip, Legend, RadialBarChart, RadialBar
-} from 'recharts'
-import { 
-  TrendingUp, TrendingDown, Activity, Users, Search, 
-  Clock, Target, Zap, Eye, Download, RefreshCw, Filter,
-  Calendar, BarChart3, PieChart as PieChartIcon, LineChart as LineChartIcon,
-  Settings, AlertCircle, CheckCircle2, ArrowUpRight, ArrowDownRight,
-  Star, Tag, FileText, MessageCircle, Brain, Shield
-} from 'lucide-react'
-import { useAnalytics, useActions } from '@/lib/stores/feedme-store'
-import { cn } from '@/lib/utils'
-import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
-import { Badge } from '@/components/ui/badge'
-import { Button } from '@/components/ui/button'
-import { Progress } from '@/components/ui/progress'
-import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
-import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
-import { ScrollArea } from '@/components/ui/scroll-area'
-import { Alert, AlertDescription } from '@/components/ui/alert'
-import { Tooltip as UITooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip'
-
-// Types
-interface AnalyticsDashboardProps {
-  timeRange?: 'hour' | 'day' | 'week' | 'month' | 'year'
-  refreshInterval?: number
-  enableRealTime?: boolean
-  className?: string
-}
-
-interface SearchMetrics {
-  totalSearches: number
-  uniqueUsers: number
-  avgResponseTime: number
-  successRate: number
-  totalResults: number
-  clickThroughRate: number
-  conversionRate: number
-  popularQueries: PopularQuery[]
-  trendingTags: TrendingTag[]
-  userEngagement: UserEngagement
-  performanceMetrics: PerformanceMetrics
-  qualityMetrics: QualityMetrics
-  systemHealth: SystemHealth
-}
-
-interface PopularQuery {
-  query: string
-  count: number
-  avgResults: number
-  successRate: number
-  trend: 'up' | 'down' | 'stable'
-}
-
-interface TrendingTag {
-  tag: string
-  count: number
-  growth: number
-  category: string
-}
-
-interface UserEngagement {
-  sessionsWithSearch: number
-  avgSessionDuration: number
-  bounceRate: number
-  returnUsers: number
-  searchDepth: number
-  refinementRate: number
-}
-
-interface PerformanceMetrics {
-  searchLatency: number[]
-  indexingTime: number
-  cacheHitRate: number
-  errorRate: number
-  throughput: number
-  resourceUsage: ResourceUsage
-}
-
-interface ResourceUsage {
-  cpu: number
-  memory: number
-  storage: number
-  network: number
-}
-
-interface QualityMetrics {
-  resultRelevance: number
-  userSatisfaction: number
-  precisionAtK: number
-  recallAtK: number
-  diversityScore: number
-}
-
-interface SystemHealth {
-  uptime: number
-  availability: number
-  errorCount: number
-  warningCount: number
-  lastIncident: string | null
-  status: 'healthy' | 'warning' | 'error'
-}
-
-interface TimeSeriesData {
-  timestamp: string
-  searches: number
-  users: number
-  responseTime: number
-  successRate: number
-}
-
-// Metric Card Component
-const MetricCard: React.FC<{
-  title: string
-  value: string | number
-  change?: number
-  trend?: 'up' | 'down' | 'stable'
-  icon: React.ComponentType<{ className?: string }>
-  description?: string
-  format?: 'number' | 'percentage' | 'duration' | 'bytes'
-}> = ({ title, value, change, trend, icon: Icon, description, format = 'number' }) => {
-  const formatValue = (val: string | number) => {
-    if (typeof val === 'string') return val
-    
-    switch (format) {
-      case 'percentage':
-        return `${Math.round(val * 100)}%`
-      case 'duration':
-        return `${val}ms`
-      case 'bytes':
-        return `${(val / 1024 / 1024).toFixed(1)}MB`
-      default:
-        return val.toLocaleString()
-    }
-  }
-
-  const getTrendIcon = () => {
-    if (!change || !trend) return null
-    
-    switch (trend) {
-      case 'up':
-        return <ArrowUpRight className="h-3 w-3 text-green-600" />
-      case 'down':
-        return <ArrowDownRight className="h-3 w-3 text-red-600" />
-      default:
-        return null
-    }
-  }
-
-  const getTrendColor = () => {
-    if (!change || !trend) return 'text-muted-foreground'
-    return trend === 'up' ? 'text-green-600' : 'text-red-600'
-  }
-
-  return (
-    <Card>
-      <CardContent className="p-4">
-        <div className="flex items-center justify-between">
-          <div className="flex items-center gap-2">
-            <Icon className="h-4 w-4 text-muted-foreground" />
-            <span className="text-sm font-medium">{title}</span>
-          </div>
-          {getTrendIcon()}
-        </div>
-        
-        <div className="mt-2">
-          <div className="text-2xl font-bold">{formatValue(value)}</div>
-          {change !== undefined && (
-            <div className={cn('text-xs flex items-center gap-1', getTrendColor())}>
-              {change > 0 ? '+' : ''}{change}% from last period
-            </div>
-          )}
-          {description && (
-            <div className="text-xs text-muted-foreground mt-1">{description}</div>
-          )}
-        </div>
-      </CardContent>
-    </Card>
-  )
-}
-
-// Chart Card Component
-const ChartCard: React.FC<{
-  title: string
-  children: React.ReactNode
-  action?: React.ReactNode
-  description?: string
-}> = ({ title, children, action, description }) => {
-  return (
-    <Card>
-      <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
-        <div>
-          <CardTitle className="text-base font-medium">{title}</CardTitle>
-          {description && (
-            <p className="text-xs text-muted-foreground mt-1">{description}</p>
-          )}
-        </div>
-        {action}
-      </CardHeader>
-      <CardContent>
-        {children}
-      </CardContent>
-    </Card>
-  )
-}
-
-// Performance Status Component
-const PerformanceStatus: React.FC<{
-  metrics: PerformanceMetrics
-  health: SystemHealth
-}> = ({ metrics, health }) => {
-  const getStatusColor = (status: SystemHealth['status']) => {
-    switch (status) {
-      case 'healthy': return 'text-green-600 bg-green-100'
-      case 'warning': return 'text-yellow-600 bg-yellow-100'
-      case 'error': return 'text-red-600 bg-red-100'
-    }
-  }
-
-  const getStatusIcon = (status: SystemHealth['status']) => {
-    switch (status) {
-      case 'healthy': return <CheckCircle2 className="h-4 w-4" />
-      case 'warning': return <AlertCircle className="h-4 w-4" />
-      case 'error': return <AlertCircle className="h-4 w-4" />
-    }
-  }
-
-  return (
-    <Card>
-      <CardHeader>
-        <CardTitle className="text-base font-medium flex items-center gap-2">
-          <Shield className="h-4 w-4" />
-          System Performance
-        </CardTitle>
-      </CardHeader>
-      <CardContent className="space-y-4">
-        {/* Overall Status */}
-        <div className="flex items-center justify-between">
-          <span className="text-sm font-medium">Status</span>
-          <div className={cn('flex items-center gap-2 px-3 py-1 rounded-full text-sm', getStatusColor(health.status))}>
-            {getStatusIcon(health.status)}
-            {health.status.toUpperCase()}
-          </div>
-        </div>
-
-        {/* Key Metrics */}
-        <div className="space-y-3">
-          <div>
-            <div className="flex justify-between text-sm mb-1">
-              <span>Uptime</span>
-              <span className="font-medium">{Math.round(health.uptime * 100)}%</span>
-            </div>
-            <Progress value={health.uptime * 100} className="h-2" />
-          </div>
-
-          <div>
-            <div className="flex justify-between text-sm mb-1">
-              <span>Cache Hit Rate</span>
-              <span className="font-medium">{Math.round(metrics.cacheHitRate * 100)}%</span>
-            </div>
-            <Progress value={metrics.cacheHitRate * 100} className="h-2" />
-          </div>
-
-          <div>
-            <div className="flex justify-between text-sm mb-1">
-              <span>Error Rate</span>
-              <span className="font-medium">{(metrics.errorRate * 100).toFixed(2)}%</span>
-            </div>
-            <Progress 
-              value={metrics.errorRate * 100} 
-              className={cn('h-2', metrics.errorRate > 0.05 && 'bg-red-100')} 
-            />
-          </div>
-        </div>
-
-        {/* Resource Usage */}
-        <div>
-          <h4 className="text-sm font-medium mb-2">Resource Usage</h4>
-          <div className="grid grid-cols-2 gap-2 text-xs">
-            <div className="flex justify-between">
-              <span>CPU:</span>
-              <span className="font-medium">{Math.round(metrics.resourceUsage.cpu)}%</span>
-            </div>
-            <div className="flex justify-between">
-              <span>Memory:</span>
-              <span className="font-medium">{Math.round(metrics.resourceUsage.memory)}%</span>
-            </div>
-            <div className="flex justify-between">
-              <span>Storage:</span>
-              <span className="font-medium">{Math.round(metrics.resourceUsage.storage)}%</span>
-            </div>
-            <div className="flex justify-between">
-              <span>Network:</span>
-              <span className="font-medium">{Math.round(metrics.resourceUsage.network)}%</span>
-            </div>
-          </div>
-        </div>
-
-        {/* Recent Issues */}
-        {(health.errorCount > 0 || health.warningCount > 0) && (
-          <Alert>
-            <AlertCircle className="h-4 w-4" />
-            <AlertDescription className="text-xs">
-              {health.errorCount > 0 && `${health.errorCount} errors, `}
-              {health.warningCount > 0 && `${health.warningCount} warnings`}
-              {health.lastIncident && ` • Last: ${new Date(health.lastIncident).toLocaleString()}`}
-            </AlertDescription>
-          </Alert>
-        )}
-      </CardContent>
-    </Card>
-  )
-}
-
-// Popular Queries Table
-const PopularQueriesTable: React.FC<{
-  queries: PopularQuery[]
-  onQueryClick?: (query: string) => void
-}> = ({ queries, onQueryClick }) => {
-  return (
-    <div className="space-y-2">
-      {queries.map((query, index) => (
-        <div 
-          key={index} 
-          className="flex items-center justify-between p-2 hover:bg-muted rounded cursor-pointer"
-          onClick={() => onQueryClick?.(query.query)}
-        >
-          <div className="flex items-center gap-2 min-w-0 flex-1">
-            <span className="text-xs text-muted-foreground w-4">{index + 1}</span>
-            <span className="text-sm truncate">{query.query}</span>
-            {query.trend === 'up' && <TrendingUp className="h-3 w-3 text-green-600" />}
-            {query.trend === 'down' && <TrendingDown className="h-3 w-3 text-red-600" />}
-          </div>
-          <div className="flex items-center gap-3 text-xs text-muted-foreground">
-            <span>{query.count} searches</span>
-            <span>{Math.round(query.successRate * 100)}% success</span>
-          </div>
-        </div>
-      ))}
-    </div>
-  )
-}
-
-// Trending Tags Cloud
-const TrendingTagsCloud: React.FC<{
-  tags: TrendingTag[]
-  onTagClick?: (tag: string) => void
-}> = ({ tags, onTagClick }) => {
-  const maxCount = Math.max(...tags.map(t => t.count))
-  
-  return (
-    <div className="flex gap-2 flex-wrap">
-      {tags.map((tag, index) => {
-        const size = Math.max(0.7, (tag.count / maxCount) * 1.5)
-        const growthColor = tag.growth > 0 ? 'text-green-600' : tag.growth < 0 ? 'text-red-600' : 'text-muted-foreground'
-        
-        return (
-          <TooltipProvider key={index}>
-            <UITooltip>
-              <TooltipTrigger>
-                <Badge 
-                  variant="outline" 
-                  className="cursor-pointer hover:bg-accent transition-colors"
-                  style={{ fontSize: `${size * 0.75}rem` }}
-                  onClick={() => onTagClick?.(tag.tag)}
-                >
-                  {tag.tag}
-                </Badge>
-              </TooltipTrigger>
-              <TooltipContent>
-                <div className="text-xs">
-                  <div>{tag.count} uses</div>
-                  <div className={growthColor}>
-                    {tag.growth > 0 ? '+' : ''}{tag.growth}% growth
-                  </div>
-                  <div className="text-muted-foreground">{tag.category}</div>
-                </div>
-              </TooltipContent>
-            </UITooltip>
-          </TooltipProvider>
-        )
-      })}
-    </div>
-  )
-}
-
-// Main Component
-export const AnalyticsDashboard: React.FC<AnalyticsDashboardProps> = ({
-  timeRange = 'day',
-  refreshInterval = 30000,
-  enableRealTime = true,
-  className
-}) => {
-  const { workflowStats, performanceMetrics, usageStats, isLoading } = useAnalytics()
-  const { loadAnalytics, refreshAnalytics } = useActions()
-
-  const [selectedTimeRange, setSelectedTimeRange] = useState(timeRange)
-  const [isRefreshing, setIsRefreshing] = useState(false)
-  const [activeTab, setActiveTab] = useState('overview')
-
-  // Mock analytics data (in real app, this would come from the store)
-  const mockMetrics: SearchMetrics = {
-    totalSearches: 12847,
-    uniqueUsers: 3241,
-    avgResponseTime: 245,
-    successRate: 0.92,
-    totalResults: 156789,
-    clickThroughRate: 0.68,
-    conversionRate: 0.34,
-    popularQueries: [
-      { query: 'email sync issues', count: 1247, avgResults: 23, successRate: 0.89, trend: 'up' },
-      { query: 'mailbird settings', count: 982, avgResults: 18, successRate: 0.94, trend: 'stable' },
-      { query: 'account setup help', count: 756, avgResults: 31, successRate: 0.87, trend: 'up' },
-      { query: 'troubleshooting guide', count: 643, avgResults: 42, successRate: 0.91, trend: 'down' },
-      { query: 'performance issues', count: 521, avgResults: 27, successRate: 0.85, trend: 'up' }
-    ],
-    trendingTags: [
-      { tag: 'sync', count: 3421, growth: 15.2, category: 'Issues' },
-      { tag: 'settings', count: 2876, growth: 8.7, category: 'Configuration' },
-      { tag: 'troubleshooting', count: 2543, growth: -3.1, category: 'Support' },
-      { tag: 'performance', count: 1987, growth: 22.4, category: 'Issues' },
-      { tag: 'email', count: 1654, growth: 5.8, category: 'Core' }
-    ],
-    userEngagement: {
-      sessionsWithSearch: 8432,
-      avgSessionDuration: 247,
-      bounceRate: 0.23,
-      returnUsers: 2154,
-      searchDepth: 2.4,
-      refinementRate: 0.41
-    },
-    performanceMetrics: {
-      searchLatency: [120, 145, 167, 134, 198, 156, 143],
-      indexingTime: 3.2,
-      cacheHitRate: 0.85,
-      errorRate: 0.02,
-      throughput: 456,
-      resourceUsage: {
-        cpu: 42,
-        memory: 67,
-        storage: 34,
-        network: 23
-      }
-    },
-    qualityMetrics: {
-      resultRelevance: 0.87,
-      userSatisfaction: 0.84,
-      precisionAtK: 0.91,
-      recallAtK: 0.78,
-      diversityScore: 0.73
-    },
-    systemHealth: {
-      uptime: 0.999,
-      availability: 0.998,
-      errorCount: 3,
-      warningCount: 7,
-      lastIncident: '2025-07-01T14:30:00Z',
-      status: 'healthy'
-    }
-  }
-
-  // Mock time series data
-  const timeSeriesData: TimeSeriesData[] = [
-    { timestamp: '00:00', searches: 245, users: 67, responseTime: 156, successRate: 0.91 },
-    { timestamp: '04:00', searches: 123, users: 34, responseTime: 134, successRate: 0.94 },
-    { timestamp: '08:00', searches: 567, users: 145, responseTime: 167, successRate: 0.89 },
-    { timestamp: '12:00', searches: 892, users: 234, responseTime: 198, successRate: 0.92 },
-    { timestamp: '16:00', searches: 1234, users: 298, responseTime: 143, successRate: 0.95 },
-    { timestamp: '20:00', searches: 756, users: 187, responseTime: 134, successRate: 0.93 }
-  ]
-
-  // Auto-refresh effect
-  useEffect(() => {
-    if (!enableRealTime) return
-
-    const interval = setInterval(() => {
-      handleRefresh()
-    }, refreshInterval)
-
-    return () => clearInterval(interval)
-  }, [enableRealTime, refreshInterval])
-
-  // Handle refresh
-  const handleRefresh = useCallback(async () => {
-    setIsRefreshing(true)
-    try {
-      await refreshAnalytics()
-    } catch (error) {
-      console.error('Failed to refresh analytics:', error)
-    } finally {
-      setIsRefreshing(false)
-    }
-  }, [refreshAnalytics])
-
-  // Handle export
-  const handleExport = useCallback(() => {
-    const exportData = {
-      metrics: mockMetrics,
-      timeRange: selectedTimeRange,
-      generatedAt: new Date().toISOString()
-    }
-    
-    const blob = new Blob([JSON.stringify(exportData, null, 2)], { type: 'application/json' })
-    const url = URL.createObjectURL(blob)
-    const a = document.createElement('a')
-    a.href = url
-    a.download = `feedme-analytics-${selectedTimeRange}.json`
-    document.body.appendChild(a)
-    a.click()
-    document.body.removeChild(a)
-    URL.revokeObjectURL(url)
-  }, [mockMetrics, selectedTimeRange])
-
-  return (
-    <div className={cn('h-full flex flex-col', className)}>
-      {/* Header */}
-      <div className="flex items-center justify-between p-4 border-b">
-        <div className="flex items-center gap-3">
-          <h2 className="text-lg font-medium flex items-center gap-2">
-            <BarChart3 className="h-5 w-5" />
-            Search Analytics
-          </h2>
-          {enableRealTime && (
-            <Badge variant="outline" className="text-xs">
-              <div className="w-2 h-2 bg-green-500 rounded-full mr-1 animate-pulse" />
-              Live
-            </Badge>
-          )}
-        </div>
-
-        <div className="flex items-center gap-2">
-          <Select value={selectedTimeRange} onValueChange={(value) => setSelectedTimeRange(value as 'hour' | 'day' | 'week' | 'month' | 'year')}>
-            <SelectTrigger className="w-32">
-              <SelectValue />
-            </SelectTrigger>
-            <SelectContent>
-              <SelectItem value="hour">Last Hour</SelectItem>
-              <SelectItem value="day">Last Day</SelectItem>
-              <SelectItem value="week">Last Week</SelectItem>
-              <SelectItem value="month">Last Month</SelectItem>
-              <SelectItem value="year">Last Year</SelectItem>
-            </SelectContent>
-          </Select>
-
-          <Button variant="outline" size="sm" onClick={handleExport}>
-            <Download className="h-3 w-3 mr-1" />
-            Export
-          </Button>
-
-          <Button
-            variant="outline"
-            size="sm"
-            onClick={handleRefresh}
-            disabled={isRefreshing}
-          >
-            <RefreshCw className={cn('h-3 w-3 mr-1', isRefreshing && 'animate-spin')} />
-            Refresh
-          </Button>
-        </div>
-      </div>
-
-      {/* Content */}
-      <div className="flex-1 overflow-hidden">
-        <Tabs value={activeTab} onValueChange={setActiveTab} className="h-full">
-          <div className="px-4 pt-4">
-            <TabsList className="grid w-full grid-cols-4">
-              <TabsTrigger value="overview">Overview</TabsTrigger>
-              <TabsTrigger value="performance">Performance</TabsTrigger>
-              <TabsTrigger value="engagement">Engagement</TabsTrigger>
-              <TabsTrigger value="insights">Insights</TabsTrigger>
-            </TabsList>
-          </div>
-
-          <ScrollArea className="flex-1 p-4">
-            <TabsContent value="overview" className="space-y-6 mt-0">
-              {/* Key Metrics */}
-              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
-                <MetricCard
-                  title="Total Searches"
-                  value={mockMetrics.totalSearches}
-                  change={12.5}
-                  trend="up"
-                  icon={Search}
-                  description="Searches performed"
-                />
-                <MetricCard
-                  title="Unique Users"
-                  value={mockMetrics.uniqueUsers}
-                  change={8.2}
-                  trend="up"
-                  icon={Users}
-                  description="Active searchers"
-                />
-                <MetricCard
-                  title="Avg Response"
-                  value={mockMetrics.avgResponseTime}
-                  change={-5.1}
-                  trend="down"
-                  icon={Clock}
-                  format="duration"
-                  description="Search latency"
-                />
-                <MetricCard
-                  title="Success Rate"
-                  value={mockMetrics.successRate}
-                  change={2.3}
-                  trend="up"
-                  icon={Target}
-                  format="percentage"
-                  description="Successful searches"
-                />
-              </div>
-
-              {/* Charts */}
-              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
-                <ChartCard 
-                  title="Search Volume" 
-                  description="Search activity over time"
-                  action={
-                    <Button variant="ghost" size="sm">
-                      <LineChartIcon className="h-3 w-3" />
-                    </Button>
-                  }
-                >
-                  <ResponsiveContainer width="100%" height={200}>
-                    <AreaChart data={timeSeriesData}>
-                      <CartesianGrid strokeDasharray="3 3" />
-                      <XAxis dataKey="timestamp" />
-                      <YAxis />
-                      <Tooltip />
-                      <Area type="monotone" dataKey="searches" stroke="#0095ff" fill="#0095ff" fillOpacity={0.3} />
-                    </AreaChart>
-                  </ResponsiveContainer>
-                </ChartCard>
-
-                <ChartCard 
-                  title="Response Time" 
-                  description="Search performance metrics"
-                  action={
-                    <Button variant="ghost" size="sm">
-                      <BarChart3 className="h-3 w-3" />
-                    </Button>
-                  }
-                >
-                  <ResponsiveContainer width="100%" height={200}>
-                    <LineChart data={timeSeriesData}>
-                      <CartesianGrid strokeDasharray="3 3" />
-                      <XAxis dataKey="timestamp" />
-                      <YAxis />
-                      <Tooltip />
-                      <Line type="monotone" dataKey="responseTime" stroke="#22c55e" strokeWidth={2} />
-                    </LineChart>
-                  </ResponsiveContainer>
-                </ChartCard>
-              </div>
-
-              {/* Popular Queries and Trending Tags */}
-              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
-                <ChartCard title="Popular Queries" description="Most searched terms">
-                  <PopularQueriesTable 
-                    queries={mockMetrics.popularQueries} 
-                    onQueryClick={(query) => console.log('Search:', query)}
-                  />
-                </ChartCard>
-
-                <ChartCard title="Trending Tags" description="Popular tags and growth">
-                  <TrendingTagsCloud 
-                    tags={mockMetrics.trendingTags}
-                    onTagClick={(tag) => console.log('Filter by tag:', tag)}
-                  />
-                </ChartCard>
-              </div>
-            </TabsContent>
-
-            <TabsContent value="performance" className="space-y-6 mt-0">
-              {/* Performance Overview */}
-              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
-                <MetricCard
-                  title="Cache Hit Rate"
-                  value={mockMetrics.performanceMetrics.cacheHitRate}
-                  change={3.2}
-                  trend="up"
-                  icon={Zap}
-                  format="percentage"
-                />
-                <MetricCard
-                  title="Error Rate"
-                  value={mockMetrics.performanceMetrics.errorRate}
-                  change={-15.7}
-                  trend="down"
-                  icon={AlertCircle}
-                  format="percentage"
-                />
-                <MetricCard
-                  title="Throughput"
-                  value={mockMetrics.performanceMetrics.throughput}
-                  change={8.9}
-                  trend="up"
-                  icon={Activity}
-                  description="req/sec"
-                />
-                <MetricCard
-                  title="Indexing Time"
-                  value={mockMetrics.performanceMetrics.indexingTime}
-                  change={-12.3}
-                  trend="down"
-                  icon={Clock}
-                  description="seconds"
-                />
-              </div>
-
-              {/* Performance Charts and System Status */}
-              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
-                <PerformanceStatus 
-                  metrics={mockMetrics.performanceMetrics}
-                  health={mockMetrics.systemHealth}
-                />
-
-                <ChartCard title="Response Time Distribution">
-                  <ResponsiveContainer width="100%" height={200}>
-                    <BarChart data={mockMetrics.performanceMetrics.searchLatency.map((time, index) => ({ 
-                      range: `${index * 50}-${(index + 1) * 50}ms`, 
-                      count: time 
-                    }))}>
-                      <CartesianGrid strokeDasharray="3 3" />
-                      <XAxis dataKey="range" />
-                      <YAxis />
-                      <Tooltip />
-                      <Bar dataKey="count" fill="#0095ff" />
-                    </BarChart>
-                  </ResponsiveContainer>
-                </ChartCard>
-              </div>
-            </TabsContent>
-
-            <TabsContent value="engagement" className="space-y-6 mt-0">
-              {/* Engagement Metrics */}
-              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
-                <MetricCard
-                  title="CTR"
-                  value={mockMetrics.clickThroughRate}
-                  change={4.7}
-                  trend="up"
-                  icon={Eye}
-                  format="percentage"
-                  description="Click-through rate"
-                />
-                <MetricCard
-                  title="Conversion"
-                  value={mockMetrics.conversionRate}
-                  change={6.2}
-                  trend="up"
-                  icon={Target}
-                  format="percentage"
-                  description="Goal completion"
-                />
-                <MetricCard
-                  title="Bounce Rate"
-                  value={mockMetrics.userEngagement.bounceRate}
-                  change={-3.1}
-                  trend="down"
-                  icon={TrendingDown}
-                  format="percentage"
-                />
-                <MetricCard
-                  title="Return Users"
-                  value={mockMetrics.userEngagement.returnUsers}
-                  change={15.8}
-                  trend="up"
-                  icon={Users}
-                  description="Returning searchers"
-                />
-              </div>
-
-              {/* Engagement Charts */}
-              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
-                <ChartCard title="User Activity" description="Searches by time of day">
-                  <ResponsiveContainer width="100%" height={200}>
-                    <BarChart data={timeSeriesData}>
-                      <CartesianGrid strokeDasharray="3 3" />
-                      <XAxis dataKey="timestamp" />
-                      <YAxis />
-                      <Tooltip />
-                      <Bar dataKey="users" fill="#8b5cf6" />
-                    </BarChart>
-                  </ResponsiveContainer>
-                </ChartCard>
-
-                <ChartCard title="Success Rate Trend" description="Search success over time">
-                  <ResponsiveContainer width="100%" height={200}>
-                    <LineChart data={timeSeriesData}>
-                      <CartesianGrid strokeDasharray="3 3" />
-                      <XAxis dataKey="timestamp" />
-                      <YAxis domain={[0.8, 1]} />
-                      <Tooltip />
-                      <Line type="monotone" dataKey="successRate" stroke="#10b981" strokeWidth={2} />
-                    </LineChart>
-                  </ResponsiveContainer>
-                </ChartCard>
-              </div>
-            </TabsContent>
-
-            <TabsContent value="insights" className="space-y-6 mt-0">
-              {/* Quality Metrics */}
-              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
-                <MetricCard
-                  title="Relevance"
-                  value={mockMetrics.qualityMetrics.resultRelevance}
-                  change={2.1}
-                  trend="up"
-                  icon={Star}
-                  format="percentage"
-                />
-                <MetricCard
-                  title="Satisfaction"
-                  value={mockMetrics.qualityMetrics.userSatisfaction}
-                  change={5.3}
-                  trend="up"
-                  icon={CheckCircle2}
-                  format="percentage"
-                />
-                <MetricCard
-                  title="Precision@10"
-                  value={mockMetrics.qualityMetrics.precisionAtK}
-                  change={1.8}
-                  trend="up"
-                  icon={Target}
-                  format="percentage"
-                />
-                <MetricCard
-                  title="Diversity"
-                  value={mockMetrics.qualityMetrics.diversityScore}
-                  change={-1.2}
-                  trend="down"
-                  icon={Brain}
-                  format="percentage"
-                />
-              </div>
-
-              {/* Insights and Recommendations */}
-              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
-                <Card>
-                  <CardHeader>
-                    <CardTitle className="text-base font-medium">Key Insights</CardTitle>
-                  </CardHeader>
-                  <CardContent className="space-y-3">
-                    <Alert>
-                      <TrendingUp className="h-4 w-4" />
-                      <AlertDescription>
-                        Search volume increased 12.5% with mobile users driving 65% of the growth.
-                      </AlertDescription>
-                    </Alert>
-                    <Alert>
-                      <Brain className="h-4 w-4" />
-                      <AlertDescription>
-                        AI-powered suggestions improved success rate by 8.2% for complex queries.
-                      </AlertDescription>
-                    </Alert>
-                    <Alert>
-                      <Target className="h-4 w-4" />
-                      <AlertDescription>
-                        Users with filtered searches show 34% higher engagement rates.
-                      </AlertDescription>
-                    </Alert>
-                  </CardContent>
-                </Card>
-
-                <Card>
-                  <CardHeader>
-                    <CardTitle className="text-base font-medium">Optimization Recommendations</CardTitle>
-                  </CardHeader>
-                  <CardContent className="space-y-3 text-sm">
-                    <div className="flex items-start gap-2">
-                      <Badge variant="outline" className="text-xs">High</Badge>
-                      <span>Implement query suggestions for incomplete searches to reduce refinement rate.</span>
-                    </div>
-                    <div className="flex items-start gap-2">
-                      <Badge variant="outline" className="text-xs">Med</Badge>
-                      <span>Add more tag-based filters to improve result precision for power users.</span>
-                    </div>
-                    <div className="flex items-start gap-2">
-                      <Badge variant="outline" className="text-xs">Low</Badge>
-                      <span>Consider A/B testing different result layouts to improve click-through rates.</span>
-                    </div>
-                  </CardContent>
-                </Card>
-              </div>
-            </TabsContent>
-          </ScrollArea>
-        </Tabs>
-      </div>
-
-      {/* Footer */}
-      <div className="flex items-center justify-between p-2 border-t text-xs text-muted-foreground">
-        <div className="flex items-center gap-4">
-          <span>Last updated: {new Date().toLocaleTimeString()}</span>
-          <span>Data range: {selectedTimeRange}</span>
-        </div>
-        <div className="flex items-center gap-4">
-          <span>{mockMetrics.totalResults.toLocaleString()} total results indexed</span>
-          <span>System health: {mockMetrics.systemHealth.status}</span>
-        </div>
-      </div>
-    </div>
-  )
-}
-
-export default AnalyticsDashboard
\ No newline at end of file
diff --git a/frontend/components/feedme/ConversationEditor.tsx b/frontend/components/feedme/ConversationEditor.tsx
deleted file mode 100644
index 720f939..0000000
--- a/frontend/components/feedme/ConversationEditor.tsx
+++ /dev/null
@@ -1,883 +0,0 @@
-/**
- * ConversationEditor Component
- * 
- * Split-pane layout with original vs. AI-extracted content,
- * real-time AI preview with debounced updates, conversation segmentation,
- * and click-to-edit segments with inline validation.
- * 
- * Part of FeedMe v2.0 Phase 3C: Smart Conversation Editor
- */
-
-'use client'
-
-import React, { useState, useCallback, useMemo, useRef, useEffect } from 'react'
-import { ResizablePanelGroup, ResizablePanel, ResizableHandle } from '@/components/ui/resizable'
-import { 
-  Eye, Edit3, Save, X, RefreshCw, Wand2, CheckCircle2, 
-  AlertCircle, Clock, FileText, MessageSquare, Bot, User,
-  ChevronRight, ChevronDown, Copy, Download, Undo, Redo
-} from 'lucide-react'
-import { useDebounce } from '@/hooks/use-debounce'
-import { cn } from '@/lib/utils'
-import { Button } from '@/components/ui/button'
-import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
-import { Textarea } from '@/components/ui/textarea'
-import { Badge } from '@/components/ui/badge'
-import { Progress } from '@/components/ui/progress'
-import { Separator } from '@/components/ui/separator'
-import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip'
-import { ScrollArea } from '@/components/ui/scroll-area'
-import { Alert, AlertDescription } from '@/components/ui/alert'
-import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
-import { Switch } from '@/components/ui/switch'
-import { Label } from '@/components/ui/label'
-
-// Types
-interface ConversationEditorProps {
-  conversationId: number
-  originalContent: string
-  extractedContent?: ConversationSegment[]
-  onSave?: (content: ConversationSegment[]) => void
-  onCancel?: () => void
-  enableAIPreview?: boolean
-  enableRealTimeUpdates?: boolean
-  className?: string
-}
-
-interface ConversationSegment {
-  id: string
-  type: 'customer' | 'agent' | 'system' | 'metadata'
-  speaker?: string
-  timestamp?: string
-  content: string
-  confidence: number
-  isEditing?: boolean
-  hasChanges?: boolean
-  aiSuggestions?: AISuggestion[]
-  validationStatus: 'valid' | 'warning' | 'error'
-  validationMessage?: string
-}
-
-interface AISuggestion {
-  id: string
-  type: 'grammar' | 'clarity' | 'segmentation' | 'speaker_detection'
-  original: string
-  suggested: string
-  confidence: number
-  reason: string
-}
-
-interface EditorState {
-  segments: ConversationSegment[]
-  selectedSegmentId: string | null
-  isPreviewMode: boolean
-  isAutoSaving: boolean
-  hasUnsavedChanges: boolean
-  undoStack: ConversationSegment[][]
-  redoStack: ConversationSegment[][]
-  aiPreviewProgress: number
-  validationResults: ValidationResult[]
-}
-
-interface ValidationResult {
-  segmentId: string
-  type: 'error' | 'warning' | 'info'
-  message: string
-  suggestion?: string
-}
-
-// Validation Badge Component
-const ValidationBadge: React.FC<{ 
-  status: ConversationSegment['validationStatus'],
-  message?: string,
-  size?: 'sm' | 'md'
-}> = ({ status, message, size = 'sm' }) => {
-  const badgeSize = size === 'sm' ? 'h-3 w-3' : 'h-4 w-4'
-  
-  if (status === 'valid') {
-    return (
-      <TooltipProvider>
-        <Tooltip>
-          <TooltipTrigger>
-            <CheckCircle2 className={cn(badgeSize, 'text-green-500')} />
-          </TooltipTrigger>
-          <TooltipContent>
-            <p>Valid segment</p>
-          </TooltipContent>
-        </Tooltip>
-      </TooltipProvider>
-    )
-  }
-  
-  if (status === 'warning') {
-    return (
-      <TooltipProvider>
-        <Tooltip>
-          <TooltipTrigger>
-            <AlertCircle className={cn(badgeSize, 'text-yellow-500')} />
-          </TooltipTrigger>
-          <TooltipContent>
-            <p>{message || 'Validation warning'}</p>
-          </TooltipContent>
-        </Tooltip>
-      </TooltipProvider>
-    )
-  }
-  
-  return (
-    <TooltipProvider>
-      <Tooltip>
-        <TooltipTrigger>
-          <AlertCircle className={cn(badgeSize, 'text-red-500')} />
-        </TooltipTrigger>
-        <TooltipContent>
-          <p>{message || 'Validation error'}</p>
-        </TooltipContent>
-      </Tooltip>
-    </TooltipProvider>
-  )
-}
-
-// Speaker Icon Component
-const SpeakerIcon: React.FC<{ type: ConversationSegment['type'] }> = ({ type }) => {
-  switch (type) {
-    case 'customer':
-      return <User className="h-4 w-4 text-blue-500" />
-    case 'agent':
-      return <MessageSquare className="h-4 w-4 text-green-500" />
-    case 'system':
-      return <Bot className="h-4 w-4 text-gray-500" />
-    default:
-      return <FileText className="h-4 w-4 text-gray-400" />
-  }
-}
-
-// Segment Component
-const SegmentComponent: React.FC<{
-  segment: ConversationSegment
-  isSelected: boolean
-  isEditing: boolean
-  onSelect: (id: string) => void
-  onEdit: (id: string, content: string) => void
-  onSave: (id: string) => void
-  onCancel: (id: string) => void
-  onApplySuggestion: (segmentId: string, suggestionId: string) => void
-}> = ({ 
-  segment, 
-  isSelected, 
-  isEditing, 
-  onSelect, 
-  onEdit, 
-  onSave, 
-  onCancel,
-  onApplySuggestion
-}) => {
-  const [editContent, setEditContent] = useState(segment.content)
-  const textareaRef = useRef<HTMLTextAreaElement>(null)
-
-  useEffect(() => {
-    if (isEditing && textareaRef.current) {
-      textareaRef.current.focus()
-      textareaRef.current.select()
-    }
-  }, [isEditing])
-
-  const handleSave = useCallback(() => {
-    onEdit(segment.id, editContent)
-    onSave(segment.id)
-  }, [segment.id, editContent, onEdit, onSave])
-
-  const handleCancel = useCallback(() => {
-    setEditContent(segment.content)
-    onCancel(segment.id)
-  }, [segment.id, segment.content, onCancel])
-
-  const handleKeyDown = useCallback((e: React.KeyboardEvent) => {
-    if (e.key === 'Enter' && (e.ctrlKey || e.metaKey)) {
-      e.preventDefault()
-      handleSave()
-    }
-    if (e.key === 'Escape') {
-      e.preventDefault()
-      handleCancel()
-    }
-  }, [handleSave, handleCancel])
-
-  return (
-    <Card 
-      className={cn(
-        'mb-3 cursor-pointer transition-all duration-200',
-        isSelected && 'ring-2 ring-accent shadow-md',
-        segment.hasChanges && 'border-yellow-500',
-        'hover:shadow-sm'
-      )}
-      onClick={() => !isEditing && onSelect(segment.id)}
-    >
-      <CardContent className="p-4">
-        {/* Header */}
-        <div className="flex items-center justify-between mb-2">
-          <div className="flex items-center gap-2">
-            <SpeakerIcon type={segment.type} />
-            <span className="text-sm font-medium capitalize">
-              {segment.speaker || segment.type}
-            </span>
-            {segment.timestamp && (
-              <span className="text-xs text-muted-foreground">
-                {new Date(segment.timestamp).toLocaleTimeString()}
-              </span>
-            )}
-            <ValidationBadge 
-              status={segment.validationStatus} 
-              message={segment.validationMessage}
-            />
-            {segment.hasChanges && (
-              <Badge variant="secondary" className="text-xs">
-                Modified
-              </Badge>
-            )}
-          </div>
-          
-          <div className="flex items-center gap-1">
-            <Badge variant="outline" className="text-xs">
-              {Math.round(segment.confidence * 100)}%
-            </Badge>
-            {isSelected && !isEditing && (
-              <Button
-                variant="ghost"
-                size="sm"
-                onClick={(e) => {
-                  e.stopPropagation()
-                  onSelect(segment.id)
-                }}
-              >
-                <Edit3 className="h-3 w-3" />
-              </Button>
-            )}
-          </div>
-        </div>
-
-        {/* Content */}
-        {isEditing ? (
-          <div className="space-y-2">
-            <Textarea
-              ref={textareaRef}
-              value={editContent}
-              onChange={(e) => setEditContent(e.target.value)}
-              onKeyDown={handleKeyDown}
-              className="min-h-[100px] resize-y"
-              placeholder="Enter conversation content..."
-            />
-            <div className="flex items-center justify-between">
-              <div className="text-xs text-muted-foreground">
-                Press Ctrl+Enter to save, Escape to cancel
-              </div>
-              <div className="flex gap-1">
-                <Button variant="ghost" size="sm" onClick={handleCancel}>
-                  <X className="h-3 w-3" />
-                </Button>
-                <Button variant="default" size="sm" onClick={handleSave}>
-                  <Save className="h-3 w-3" />
-                </Button>
-              </div>
-            </div>
-          </div>
-        ) : (
-          <div className="whitespace-pre-wrap text-sm leading-relaxed">
-            {segment.content}
-          </div>
-        )}
-
-        {/* AI Suggestions */}
-        {segment.aiSuggestions && segment.aiSuggestions.length > 0 && isSelected && (
-          <div className="mt-3 pt-3 border-t">
-            <h4 className="text-xs font-medium mb-2 flex items-center gap-1">
-              <Wand2 className="h-3 w-3" />
-              AI Suggestions
-            </h4>
-            <div className="space-y-2">
-              {segment.aiSuggestions.map(suggestion => (
-                <div key={suggestion.id} className="p-2 bg-muted/50 rounded text-xs">
-                  <div className="flex items-center justify-between mb-1">
-                    <span className="font-medium capitalize">
-                      {suggestion.type.replace('_', ' ')}
-                    </span>
-                    <Badge variant="outline" className="text-xs">
-                      {Math.round(suggestion.confidence * 100)}%
-                    </Badge>
-                  </div>
-                  <div className="mb-1 text-muted-foreground">
-                    {suggestion.reason}
-                  </div>
-                  <div className="flex items-center gap-2">
-                    <span className="text-red-600">- {suggestion.original}</span>
-                    <ChevronRight className="h-3 w-3" />
-                    <span className="text-green-600">+ {suggestion.suggested}</span>
-                    <Button
-                      variant="ghost"
-                      size="sm"
-                      onClick={() => onApplySuggestion(segment.id, suggestion.id)}
-                      className="ml-auto h-6 px-2"
-                    >
-                      Apply
-                    </Button>
-                  </div>
-                </div>
-              ))}
-            </div>
-          </div>
-        )}
-      </CardContent>
-    </Card>
-  )
-}
-
-// AI Preview Panel
-const AIPreviewPanel: React.FC<{
-  segments: ConversationSegment[]
-  isLoading: boolean
-  progress: number
-  onRefresh: () => void
-}> = ({ segments, isLoading, progress, onRefresh }) => {
-  const stats = useMemo(() => {
-    const total = segments.length
-    const customerMessages = segments.filter(s => s.type === 'customer').length
-    const agentMessages = segments.filter(s => s.type === 'agent').length
-    const avgConfidence = segments.reduce((sum, s) => sum + s.confidence, 0) / total || 0
-    const issues = segments.filter(s => s.validationStatus !== 'valid').length
-    
-    return { total, customerMessages, agentMessages, avgConfidence, issues }
-  }, [segments])
-
-  return (
-    <Card>
-      <CardHeader className="pb-3">
-        <div className="flex items-center justify-between">
-          <CardTitle className="text-sm flex items-center gap-2">
-            <Bot className="h-4 w-4" />
-            AI Analysis
-          </CardTitle>
-          <Button
-            variant="ghost"
-            size="sm"
-            onClick={onRefresh}
-            disabled={isLoading}
-          >
-            <RefreshCw className={cn('h-3 w-3', isLoading && 'animate-spin')} />
-          </Button>
-        </div>
-        {isLoading && (
-          <Progress value={progress} className="h-1" />
-        )}
-      </CardHeader>
-      <CardContent className="space-y-3">
-        <div className="grid grid-cols-2 gap-3 text-sm">
-          <div>
-            <div className="text-muted-foreground">Total Segments</div>
-            <div className="font-medium">{stats.total}</div>
-          </div>
-          <div>
-            <div className="text-muted-foreground">Avg Confidence</div>
-            <div className="font-medium">{Math.round(stats.avgConfidence * 100)}%</div>
-          </div>
-          <div>
-            <div className="text-muted-foreground">Customer</div>
-            <div className="font-medium text-blue-600">{stats.customerMessages}</div>
-          </div>
-          <div>
-            <div className="text-muted-foreground">Agent</div>
-            <div className="font-medium text-green-600">{stats.agentMessages}</div>
-          </div>
-        </div>
-        
-        {stats.issues > 0 && (
-          <Alert>
-            <AlertCircle className="h-4 w-4" />
-            <AlertDescription>
-              {stats.issues} segment{stats.issues === 1 ? '' : 's'} need{stats.issues === 1 ? 's' : ''} attention
-            </AlertDescription>
-          </Alert>
-        )}
-      </CardContent>
-    </Card>
-  )
-}
-
-// Editor Toolbar
-const EditorToolbar: React.FC<{
-  hasUnsavedChanges: boolean
-  canUndo: boolean
-  canRedo: boolean
-  isPreviewMode: boolean
-  onSave: () => void
-  onUndo: () => void
-  onRedo: () => void
-  onTogglePreview: () => void
-  onExport: () => void
-  onAutoSaveToggle: (enabled: boolean) => void
-  autoSaveEnabled: boolean
-}> = ({ 
-  hasUnsavedChanges, 
-  canUndo, 
-  canRedo, 
-  isPreviewMode, 
-  onSave, 
-  onUndo, 
-  onRedo, 
-  onTogglePreview, 
-  onExport,
-  onAutoSaveToggle,
-  autoSaveEnabled
-}) => {
-  return (
-    <div className="flex items-center justify-between p-3 border-b">
-      <div className="flex items-center gap-2">
-        <Button
-          variant="default"
-          size="sm"
-          onClick={onSave}
-          disabled={!hasUnsavedChanges}
-        >
-          <Save className="h-3 w-3 mr-1" />
-          Save
-        </Button>
-        
-        <Separator orientation="vertical" className="h-4" />
-        
-        <Button
-          variant="ghost"
-          size="sm"
-          onClick={onUndo}
-          disabled={!canUndo}
-        >
-          <Undo className="h-3 w-3" />
-        </Button>
-        
-        <Button
-          variant="ghost"
-          size="sm"
-          onClick={onRedo}
-          disabled={!canRedo}
-        >
-          <Redo className="h-3 w-3" />
-        </Button>
-        
-        <Separator orientation="vertical" className="h-4" />
-        
-        <Button
-          variant={isPreviewMode ? "default" : "ghost"}
-          size="sm"
-          onClick={onTogglePreview}
-        >
-          <Eye className="h-3 w-3 mr-1" />
-          Preview
-        </Button>
-      </div>
-
-      <div className="flex items-center gap-4">
-        <div className="flex items-center gap-2">
-          <Switch
-            id="auto-save"
-            checked={autoSaveEnabled}
-            onCheckedChange={onAutoSaveToggle}
-          />
-          <Label htmlFor="auto-save" className="text-sm">
-            Auto-save
-          </Label>
-        </div>
-        
-        <Button
-          variant="ghost"
-          size="sm"
-          onClick={onExport}
-        >
-          <Download className="h-3 w-3 mr-1" />
-          Export
-        </Button>
-      </div>
-    </div>
-  )
-}
-
-// Main Component
-export const ConversationEditor: React.FC<ConversationEditorProps> = ({
-  conversationId,
-  originalContent,
-  extractedContent = [],
-  onSave,
-  onCancel,
-  enableAIPreview = true,
-  enableRealTimeUpdates = true,
-  className
-}) => {
-  const [editorState, setEditorState] = useState<EditorState>({
-    segments: extractedContent.length > 0 ? extractedContent : [{
-      id: 'original',
-      type: 'metadata',
-      content: originalContent,
-      confidence: 1.0,
-      validationStatus: 'valid'
-    }],
-    selectedSegmentId: null,
-    isPreviewMode: false,
-    isAutoSaving: false,
-    hasUnsavedChanges: false,
-    undoStack: [],
-    redoStack: [],
-    aiPreviewProgress: 0,
-    validationResults: []
-  })
-
-  const [autoSaveEnabled, setAutoSaveEnabled] = useState(true)
-  const [aiProcessing, setAiProcessing] = useState(false)
-  
-  // Debounced auto-save
-  const debouncedSegments = useDebounce(editorState.segments, 2000)
-  
-  useEffect(() => {
-    if (autoSaveEnabled && editorState.hasUnsavedChanges && !aiProcessing) {
-      handleAutoSave()
-    }
-  }, [debouncedSegments, autoSaveEnabled, editorState.hasUnsavedChanges, aiProcessing])
-
-  // Handle segment selection
-  const handleSegmentSelect = useCallback((segmentId: string) => {
-    setEditorState(prev => ({
-      ...prev,
-      selectedSegmentId: prev.selectedSegmentId === segmentId ? null : segmentId,
-      segments: prev.segments.map(s => ({ ...s, isEditing: false }))
-    }))
-  }, [])
-
-  // Handle segment editing
-  const handleSegmentEdit = useCallback((segmentId: string, content: string) => {
-    setEditorState(prev => {
-      const newSegments = prev.segments.map(s => 
-        s.id === segmentId 
-          ? { ...s, content, hasChanges: true, isEditing: true }
-          : s
-      )
-      
-      return {
-        ...prev,
-        segments: newSegments,
-        hasUnsavedChanges: true,
-        undoStack: [...prev.undoStack.slice(-9), prev.segments], // Keep last 10
-        redoStack: []
-      }
-    })
-  }, [])
-
-  // Handle segment save
-  const handleSegmentSave = useCallback((segmentId: string) => {
-    setEditorState(prev => ({
-      ...prev,
-      segments: prev.segments.map(s => 
-        s.id === segmentId ? { ...s, isEditing: false } : s
-      )
-    }))
-  }, [])
-
-  // Handle segment cancel
-  const handleSegmentCancel = useCallback((segmentId: string) => {
-    setEditorState(prev => {
-      const originalSegment = prev.undoStack[prev.undoStack.length - 1]?.find(s => s.id === segmentId)
-      if (originalSegment) {
-        return {
-          ...prev,
-          segments: prev.segments.map(s => 
-            s.id === segmentId 
-              ? { ...originalSegment, isEditing: false }
-              : s
-          ),
-          hasUnsavedChanges: prev.segments.some(s => s.id !== segmentId && s.hasChanges)
-        }
-      }
-      return {
-        ...prev,
-        segments: prev.segments.map(s => 
-          s.id === segmentId ? { ...s, isEditing: false } : s
-        )
-      }
-    })
-  }, [])
-
-  // Apply AI suggestion
-  const handleApplySuggestion = useCallback((segmentId: string, suggestionId: string) => {
-    setEditorState(prev => {
-      const segment = prev.segments.find(s => s.id === segmentId)
-      const suggestion = segment?.aiSuggestions?.find(s => s.id === suggestionId)
-      
-      if (!segment || !suggestion) return prev
-      
-      const newContent = segment.content.replace(suggestion.original, suggestion.suggested)
-      
-      return {
-        ...prev,
-        segments: prev.segments.map(s => 
-          s.id === segmentId 
-            ? { 
-                ...s, 
-                content: newContent, 
-                hasChanges: true,
-                aiSuggestions: s.aiSuggestions?.filter(sug => sug.id !== suggestionId)
-              }
-            : s
-        ),
-        hasUnsavedChanges: true,
-        undoStack: [...prev.undoStack.slice(-9), prev.segments]
-      }
-    })
-  }, [])
-
-  // Auto-save handler
-  const handleAutoSave = useCallback(async () => {
-    if (!editorState.hasUnsavedChanges) return
-    
-    setEditorState(prev => ({ ...prev, isAutoSaving: true }))
-    
-    try {
-      // Simulate API call
-      await new Promise(resolve => setTimeout(resolve, 500))
-      
-      setEditorState(prev => ({ 
-        ...prev, 
-        isAutoSaving: false, 
-        hasUnsavedChanges: false,
-        segments: prev.segments.map(s => ({ ...s, hasChanges: false }))
-      }))
-    } catch (error) {
-      setEditorState(prev => ({ ...prev, isAutoSaving: false }))
-    }
-  }, [editorState.hasUnsavedChanges])
-
-  // Manual save
-  const handleSave = useCallback(() => {
-    onSave?.(editorState.segments)
-    setEditorState(prev => ({ 
-      ...prev, 
-      hasUnsavedChanges: false,
-      segments: prev.segments.map(s => ({ ...s, hasChanges: false }))
-    }))
-  }, [editorState.segments, onSave])
-
-  // Undo/Redo
-  const handleUndo = useCallback(() => {
-    setEditorState(prev => {
-      if (prev.undoStack.length === 0) return prev
-      
-      const previousState = prev.undoStack[prev.undoStack.length - 1]
-      return {
-        ...prev,
-        segments: previousState,
-        undoStack: prev.undoStack.slice(0, -1),
-        redoStack: [prev.segments, ...prev.redoStack.slice(0, 9)],
-        hasUnsavedChanges: true
-      }
-    })
-  }, [])
-
-  const handleRedo = useCallback(() => {
-    setEditorState(prev => {
-      if (prev.redoStack.length === 0) return prev
-      
-      const nextState = prev.redoStack[0]
-      return {
-        ...prev,
-        segments: nextState,
-        redoStack: prev.redoStack.slice(1),
-        undoStack: [...prev.undoStack.slice(-9), prev.segments],
-        hasUnsavedChanges: true
-      }
-    })
-  }, [])
-
-  // Toggle preview mode
-  const handleTogglePreview = useCallback(() => {
-    setEditorState(prev => ({ ...prev, isPreviewMode: !prev.isPreviewMode }))
-  }, [])
-
-  // Refresh AI analysis
-  const handleRefreshAI = useCallback(async () => {
-    if (!enableAIPreview) return
-    
-    setAiProcessing(true)
-    setEditorState(prev => ({ ...prev, aiPreviewProgress: 0 }))
-    
-    try {
-      // Simulate AI processing with progress
-      for (let i = 0; i <= 100; i += 10) {
-        setEditorState(prev => ({ ...prev, aiPreviewProgress: i }))
-        await new Promise(resolve => setTimeout(resolve, 100))
-      }
-      
-      // Mock AI suggestions
-      setEditorState(prev => ({
-        ...prev,
-        segments: prev.segments.map(segment => ({
-          ...segment,
-          aiSuggestions: segment.type !== 'metadata' ? [{
-            id: `suggestion-${segment.id}`,
-            type: 'clarity',
-            original: 'can you',
-            suggested: 'could you please',
-            confidence: 0.85,
-            reason: 'More polite phrasing'
-          }] : undefined
-        }))
-      }))
-    } catch (error) {
-      console.error('AI processing failed:', error)
-    } finally {
-      setAiProcessing(false)
-    }
-  }, [enableAIPreview])
-
-  // Export handler
-  const handleExport = useCallback(() => {
-    const exportData = {
-      conversationId,
-      segments: editorState.segments,
-      exportedAt: new Date().toISOString()
-    }
-    
-    const blob = new Blob([JSON.stringify(exportData, null, 2)], { type: 'application/json' })
-    const url = URL.createObjectURL(blob)
-    const a = document.createElement('a')
-    a.href = url
-    a.download = `conversation-${conversationId}.json`
-    document.body.appendChild(a)
-    a.click()
-    document.body.removeChild(a)
-    URL.revokeObjectURL(url)
-  }, [conversationId, editorState.segments])
-
-  return (
-    <div className={cn('h-full flex flex-col', className)}>
-      {/* Toolbar */}
-      <EditorToolbar
-        hasUnsavedChanges={editorState.hasUnsavedChanges}
-        canUndo={editorState.undoStack.length > 0}
-        canRedo={editorState.redoStack.length > 0}
-        isPreviewMode={editorState.isPreviewMode}
-        onSave={handleSave}
-        onUndo={handleUndo}
-        onRedo={handleRedo}
-        onTogglePreview={handleTogglePreview}
-        onExport={handleExport}
-        onAutoSaveToggle={setAutoSaveEnabled}
-        autoSaveEnabled={autoSaveEnabled}
-      />
-
-      {/* Main Content */}
-      <div className="flex-1 overflow-hidden">
-        <ResizablePanelGroup direction="horizontal" className="h-full">
-          {/* Original Content Panel */}
-          <ResizablePanel defaultSize={30} minSize={20}>
-            <div className="h-full flex flex-col">
-              <div className="p-3 border-b bg-muted/30">
-                <h3 className="font-medium text-sm flex items-center gap-2">
-                  <FileText className="h-4 w-4" />
-                  Original Content
-                </h3>
-              </div>
-              <ScrollArea className="flex-1 p-4">
-                <pre className="whitespace-pre-wrap text-sm font-mono leading-relaxed">
-                  {originalContent}
-                </pre>
-              </ScrollArea>
-            </div>
-          </ResizablePanel>
-
-          <ResizableHandle />
-
-          {/* Editor Panel */}
-          <ResizablePanel defaultSize={70} minSize={40}>
-            <div className="h-full flex flex-col">
-              <ResizablePanelGroup direction="horizontal" className="h-full">
-                {/* Segments Editor */}
-                <ResizablePanel defaultSize={enableAIPreview ? 60 : 100} minSize={40}>
-                  <div className="h-full flex flex-col">
-                    <div className="p-3 border-b bg-muted/30">
-                      <div className="flex items-center justify-between">
-                        <h3 className="font-medium text-sm flex items-center gap-2">
-                          <Edit3 className="h-4 w-4" />
-                          Extracted Segments
-                        </h3>
-                        {editorState.isAutoSaving && (
-                          <div className="flex items-center gap-1 text-xs text-muted-foreground">
-                            <Clock className="h-3 w-3 animate-spin" />
-                            Auto-saving...
-                          </div>
-                        )}
-                      </div>
-                    </div>
-                    <ScrollArea className="flex-1 p-4">
-                      {editorState.segments.map((segment) => (
-                        <SegmentComponent
-                          key={segment.id}
-                          segment={segment}
-                          isSelected={editorState.selectedSegmentId === segment.id}
-                          isEditing={segment.isEditing || false}
-                          onSelect={handleSegmentSelect}
-                          onEdit={handleSegmentEdit}
-                          onSave={handleSegmentSave}
-                          onCancel={handleSegmentCancel}
-                          onApplySuggestion={handleApplySuggestion}
-                        />
-                      ))}
-                    </ScrollArea>
-                  </div>
-                </ResizablePanel>
-
-                {/* AI Preview Panel */}
-                {enableAIPreview && (
-                  <>
-                    <ResizableHandle />
-                    <ResizablePanel defaultSize={40} minSize={25}>
-                      <div className="h-full flex flex-col">
-                        <div className="p-3 border-b bg-muted/30">
-                          <h3 className="font-medium text-sm flex items-center gap-2">
-                            <Bot className="h-4 w-4" />
-                            AI Preview
-                          </h3>
-                        </div>
-                        <ScrollArea className="flex-1 p-4">
-                          <AIPreviewPanel
-                            segments={editorState.segments}
-                            isLoading={aiProcessing}
-                            progress={editorState.aiPreviewProgress}
-                            onRefresh={handleRefreshAI}
-                          />
-                        </ScrollArea>
-                      </div>
-                    </ResizablePanel>
-                  </>
-                )}
-              </ResizablePanelGroup>
-            </div>
-          </ResizablePanel>
-        </ResizablePanelGroup>
-      </div>
-
-      {/* Status Bar */}
-      <div className="flex items-center justify-between p-2 border-t text-xs text-muted-foreground bg-muted/30">
-        <div className="flex items-center gap-4">
-          <span>{editorState.segments.length} segments</span>
-          <span>
-            {editorState.segments.filter(s => s.validationStatus === 'valid').length} valid
-          </span>
-          {editorState.hasUnsavedChanges && (
-            <span className="text-yellow-600">Unsaved changes</span>
-          )}
-        </div>
-        <div className="flex items-center gap-2">
-          {editorState.selectedSegmentId && (
-            <span>Selected: {editorState.selectedSegmentId}</span>
-          )}
-        </div>
-      </div>
-    </div>
-  )
-}
-
-export default ConversationEditor
\ No newline at end of file
diff --git a/frontend/components/feedme/DiffViewer.tsx b/frontend/components/feedme/DiffViewer.tsx
deleted file mode 100644
index 3d7bc5c..0000000
--- a/frontend/components/feedme/DiffViewer.tsx
+++ /dev/null
@@ -1,398 +0,0 @@
-/**
- * Diff Viewer Component
- * Displays differences between two conversation versions
- * 
- * Features:
- * - Side-by-side diff visualization
- * - Line-by-line comparison
- * - Added, removed, and modified line highlighting
- * - Statistics summary
- * - Responsive design with fallback to unified view
- */
-
-'use client'
-
-import React, { useState, useEffect } from 'react'
-import { Button } from '../ui/button'
-import { Card, CardContent, CardHeader, CardTitle } from '../ui/card'
-import { Badge } from '../ui/badge'
-import { ScrollArea } from '../ui/scroll-area'
-import { Tabs, TabsContent, TabsList, TabsTrigger } from '../ui/tabs'
-import { 
-  X, 
-  Plus, 
-  Minus, 
-  Edit3, 
-  BarChart3,
-  RefreshCw,
-  AlertCircle
-} from 'lucide-react'
-import { cn } from '../../lib/utils'
-import { 
-  getVersionDiff, 
-  type VersionDiff, 
-  type ModifiedLine 
-} from '../../lib/feedme-api'
-
-interface DiffViewerProps {
-  conversationId: number
-  fromVersion: number
-  toVersion: number
-  onClose: () => void
-}
-
-interface DiffLineProps {
-  content: string
-  lineNumber?: number
-  type: 'added' | 'removed' | 'modified' | 'unchanged'
-  isOld?: boolean
-}
-
-function DiffLine({ content, lineNumber, type, isOld }: DiffLineProps) {
-  const getLineClasses = () => {
-    switch (type) {
-      case 'added':
-        return 'bg-green-50 border-green-200 text-green-900'
-      case 'removed':
-        return 'bg-red-50 border-red-200 text-red-900'
-      case 'modified':
-        return isOld 
-          ? 'bg-orange-50 border-orange-200 text-orange-900'
-          : 'bg-blue-50 border-blue-200 text-blue-900'
-      default:
-        return 'bg-background border-border'
-    }
-  }
-
-  const getIconClasses = () => {
-    switch (type) {
-      case 'added':
-        return 'text-green-600'
-      case 'removed':
-        return 'text-red-600'
-      case 'modified':
-        return 'text-blue-600'
-      default:
-        return 'text-muted-foreground'
-    }
-  }
-
-  const getIcon = () => {
-    switch (type) {
-      case 'added':
-        return <Plus className="h-3 w-3" />
-      case 'removed':
-        return <Minus className="h-3 w-3" />
-      case 'modified':
-        return <Edit3 className="h-3 w-3" />
-      default:
-        return null
-    }
-  }
-
-  return (
-    <div className={cn(
-      "flex items-start gap-3 p-2 border-l-2 font-mono text-sm",
-      getLineClasses()
-    )}>
-      <div className="flex items-center gap-2 flex-shrink-0 w-16">
-        <span className={cn("text-xs", getIconClasses())}>
-          {lineNumber || '—'}
-        </span>
-        <span className={getIconClasses()}>
-          {getIcon()}
-        </span>
-      </div>
-      <div className="flex-1 whitespace-pre-wrap break-words">
-        {content || '\u00A0'}
-      </div>
-    </div>
-  )
-}
-
-interface DiffStatsProps {
-  stats: Record<string, number>
-}
-
-function DiffStats({ stats }: DiffStatsProps) {
-  const total = stats.total_changes || 0
-  const added = stats.added_count || 0
-  const removed = stats.removed_count || 0
-  const modified = stats.modified_count || 0
-
-  return (
-    <Card>
-      <CardHeader className="pb-3">
-        <CardTitle className="text-sm flex items-center gap-2">
-          <BarChart3 className="h-4 w-4" />
-          Change Summary
-        </CardTitle>
-      </CardHeader>
-      <CardContent>
-        <div className="grid grid-cols-2 gap-4">
-          <div className="space-y-2">
-            <div className="flex items-center justify-between">
-              <span className="text-sm text-muted-foreground">Total Changes</span>
-              <Badge variant="outline">{total}</Badge>
-            </div>
-            <div className="flex items-center justify-between">
-              <span className="text-sm text-green-700">Added Lines</span>
-              <Badge variant="outline" className="text-green-700 border-green-200">
-                +{added}
-              </Badge>
-            </div>
-          </div>
-          <div className="space-y-2">
-            <div className="flex items-center justify-between">
-              <span className="text-sm text-red-700">Removed Lines</span>
-              <Badge variant="outline" className="text-red-700 border-red-200">
-                -{removed}
-              </Badge>
-            </div>
-            <div className="flex items-center justify-between">
-              <span className="text-sm text-blue-700">Modified Lines</span>
-              <Badge variant="outline" className="text-blue-700 border-blue-200">
-                ~{modified}
-              </Badge>
-            </div>
-          </div>
-        </div>
-      </CardContent>
-    </Card>
-  )
-}
-
-export function DiffViewer({ 
-  conversationId, 
-  fromVersion, 
-  toVersion, 
-  onClose 
-}: DiffViewerProps) {
-  const [diff, setDiff] = useState<VersionDiff | null>(null)
-  const [isLoading, setIsLoading] = useState(true)
-  const [error, setError] = useState<string | null>(null)
-  const [viewMode, setViewMode] = useState<'unified' | 'split'>('unified')
-
-  useEffect(() => {
-    loadDiff()
-  }, [conversationId, fromVersion, toVersion])
-
-  const loadDiff = async () => {
-    try {
-      setIsLoading(true)
-      setError(null)
-      
-      const diffData = await getVersionDiff(conversationId, fromVersion, toVersion)
-      setDiff(diffData)
-    } catch (error) {
-      console.error('Failed to load diff:', error)
-      setError(error instanceof Error ? error.message : 'Failed to load diff')
-    } finally {
-      setIsLoading(false)
-    }
-  }
-
-  if (isLoading) {
-    return (
-      <div className="flex items-center justify-center h-64">
-        <div className="text-center">
-          <RefreshCw className="h-8 w-8 animate-spin mx-auto mb-2 text-muted-foreground" />
-          <p className="text-sm text-muted-foreground">Loading diff...</p>
-        </div>
-      </div>
-    )
-  }
-
-  if (error) {
-    return (
-      <div className="flex items-center justify-center h-64">
-        <div className="text-center">
-          <AlertCircle className="h-8 w-8 mx-auto mb-2 text-red-500" />
-          <p className="text-sm text-red-600 mb-4">{error}</p>
-          <Button variant="outline" onClick={loadDiff}>
-            <RefreshCw className="h-4 w-4 mr-2" />
-            Retry
-          </Button>
-        </div>
-      </div>
-    )
-  }
-
-  if (!diff) {
-    return (
-      <div className="flex items-center justify-center h-64">
-        <div className="text-center">
-          <AlertCircle className="h-8 w-8 mx-auto mb-2 text-muted-foreground" />
-          <p className="text-sm text-muted-foreground">No diff data available</p>
-        </div>
-      </div>
-    )
-  }
-
-  const hasChanges = (diff.stats.total_changes || 0) > 0
-
-  return (
-    <div className="flex flex-col h-full">
-      {/* Header */}
-      <div className="flex items-center justify-between mb-4">
-        <div>
-          <h3 className="font-semibold">
-            Changes from Version {fromVersion} to Version {toVersion}
-          </h3>
-          <p className="text-sm text-muted-foreground">
-            {hasChanges 
-              ? `${diff.stats.total_changes} changes detected`
-              : 'No changes between versions'
-            }
-          </p>
-        </div>
-        <Button variant="ghost" size="sm" onClick={onClose}>
-          <X className="h-4 w-4" />
-        </Button>
-      </div>
-
-      {/* Stats */}
-      {hasChanges && (
-        <div className="mb-4">
-          <DiffStats stats={diff.stats} />
-        </div>
-      )}
-
-      {/* Content */}
-      {!hasChanges ? (
-        <div className="flex-1 flex items-center justify-center">
-          <div className="text-center">
-            <Edit3 className="h-12 w-12 mx-auto mb-4 text-muted-foreground" />
-            <p className="text-lg font-medium mb-2">No Changes Found</p>
-            <p className="text-sm text-muted-foreground">
-              The content in version {fromVersion} and version {toVersion} is identical.
-            </p>
-          </div>
-        </div>
-      ) : (
-        <div className="flex-1 overflow-hidden">
-          <Tabs value={viewMode} onValueChange={(value) => setViewMode(value as 'unified' | 'split')} className="h-full flex flex-col">
-            <TabsList className="grid w-full grid-cols-2 mb-4">
-              <TabsTrigger value="unified">Unified View</TabsTrigger>
-              <TabsTrigger value="split">Split View</TabsTrigger>
-            </TabsList>
-
-            <TabsContent value="unified" className="flex-1 overflow-hidden mt-0">
-              <ScrollArea className="h-full">
-                <div className="space-y-1">
-                  {/* Removed lines */}
-                  {diff.removed_lines.map((line, index) => (
-                    <DiffLine
-                      key={`removed-${index}`}
-                      content={line}
-                      lineNumber={index + 1}
-                      type="removed"
-                    />
-                  ))}
-                  
-                  {/* Added lines */}
-                  {diff.added_lines.map((line, index) => (
-                    <DiffLine
-                      key={`added-${index}`}
-                      content={line}
-                      lineNumber={index + 1}
-                      type="added"
-                    />
-                  ))}
-                  
-                  {/* Modified lines */}
-                  {diff.modified_lines.map((modifiedLine, index) => (
-                    <div key={`modified-${index}`} className="space-y-0">
-                      <DiffLine
-                        content={modifiedLine.original}
-                        lineNumber={modifiedLine.line_number}
-                        type="modified"
-                        isOld={true}
-                      />
-                      <DiffLine
-                        content={modifiedLine.modified}
-                        lineNumber={modifiedLine.line_number}
-                        type="modified"
-                        isOld={false}
-                      />
-                    </div>
-                  ))}
-                  
-                  {/* Context lines (sample) */}
-                  {diff.unchanged_lines.slice(0, 5).map((line, index) => (
-                    <DiffLine
-                      key={`unchanged-${index}`}
-                      content={line}
-                      lineNumber={index + 1}
-                      type="unchanged"
-                    />
-                  ))}
-                </div>
-              </ScrollArea>
-            </TabsContent>
-
-            <TabsContent value="split" className="flex-1 overflow-hidden mt-0">
-              <div className="grid grid-cols-2 gap-4 h-full">
-                {/* Before (Version fromVersion) */}
-                <div className="flex flex-col">
-                  <h4 className="text-sm font-medium mb-2 text-red-700">
-                    Version {fromVersion} (Before)
-                  </h4>
-                  <ScrollArea className="flex-1 border rounded">
-                    <div className="space-y-1 p-2">
-                      {diff.removed_lines.map((line, index) => (
-                        <DiffLine
-                          key={`before-${index}`}
-                          content={line}
-                          lineNumber={index + 1}
-                          type="removed"
-                        />
-                      ))}
-                      {diff.modified_lines.map((modifiedLine, index) => (
-                        <DiffLine
-                          key={`before-modified-${index}`}
-                          content={modifiedLine.original}
-                          lineNumber={modifiedLine.line_number}
-                          type="modified"
-                          isOld={true}
-                        />
-                      ))}
-                    </div>
-                  </ScrollArea>
-                </div>
-
-                {/* After (Version toVersion) */}
-                <div className="flex flex-col">
-                  <h4 className="text-sm font-medium mb-2 text-green-700">
-                    Version {toVersion} (After)
-                  </h4>
-                  <ScrollArea className="flex-1 border rounded">
-                    <div className="space-y-1 p-2">
-                      {diff.added_lines.map((line, index) => (
-                        <DiffLine
-                          key={`after-${index}`}
-                          content={line}
-                          lineNumber={index + 1}
-                          type="added"
-                        />
-                      ))}
-                      {diff.modified_lines.map((modifiedLine, index) => (
-                        <DiffLine
-                          key={`after-modified-${index}`}
-                          content={modifiedLine.modified}
-                          lineNumber={modifiedLine.line_number}
-                          type="modified"
-                          isOld={false}
-                        />
-                      ))}
-                    </div>
-                  </ScrollArea>
-                </div>
-              </div>
-            </TabsContent>
-          </Tabs>
-        </div>
-      )}
-    </div>
-  )
-}
\ No newline at end of file
diff --git a/frontend/components/feedme/DragDropManager.tsx b/frontend/components/feedme/DragDropManager.tsx
deleted file mode 100644
index b974878..0000000
--- a/frontend/components/feedme/DragDropManager.tsx
+++ /dev/null
@@ -1,822 +0,0 @@
-/**
- * DragDropManager Component
- * 
- * Advanced drag-and-drop system with visual feedback, drop zones,
- * conflict resolution, and progress indicators for move operations.
- * 
- * Part of FeedMe v2.0 Phase 3B: Enhanced Folder Management
- */
-
-'use client'
-
-import React, { useState, useCallback, useRef, useEffect } from 'react'
-import { 
-  DragDropContext, 
-  Droppable, 
-  Draggable, 
-  DropResult,
-  DragStart,
-  DragUpdate
-} from '@hello-pangea/dnd'
-import { 
-  Folder, FolderOpen, FileText, Move, Copy, Trash2, 
-  CheckCircle, AlertCircle, Clock, X, ArrowRight
-} from 'lucide-react'
-import { useActions, useConversations, useFolders } from '@/lib/stores/feedme-store'
-import type { Conversation, Folder as FolderType } from '@/lib/stores/feedme-store'
-
-// Type guard functions
-const isConversation = (item: Conversation | FolderType): item is Conversation => {
-  return 'title' in item && 'original_filename' in item && 'processing_status' in item
-}
-
-const isFolder = (item: Conversation | FolderType): item is FolderType => {
-  return 'name' in item && 'conversation_count' in item && !('title' in item)
-}
-
-// Utility function to sanitize folder ID for droppable ID
-const sanitizeFolderId = (folderId: number | null): string => {
-  if (folderId === null) return 'root'
-  return String(folderId).replace(/[^a-zA-Z0-9_-]/g, '_')
-}
-
-// Utility function to parse droppable ID safely
-const parseDroppableId = (droppableId: string): { type: string; id: string } => {
-  const match = droppableId.match(/^([^-]+)-(.+)$/)
-  if (!match) {
-    throw new Error(`Invalid droppable ID format: ${droppableId}`)
-  }
-  return { type: match[1], id: match[2] }
-}
-import { cn } from '@/lib/utils'
-import { Card, CardContent } from '@/components/ui/card'
-import { Button } from '@/components/ui/button'
-import { Badge } from '@/components/ui/badge'
-import { Progress } from '@/components/ui/progress'
-import { Separator } from '@/components/ui/separator'
-import { Alert, AlertDescription } from '@/components/ui/alert'
-import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from '@/components/ui/dialog'
-import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
-import { Checkbox } from '@/components/ui/checkbox'
-
-// Types
-interface DragDropManagerProps {
-  className?: string
-  onMoveComplete?: (movedItems: MoveOperation[]) => void
-  onError?: (error: string) => void
-  enableConflictResolution?: boolean
-  enableBulkOperations?: boolean
-  maxConcurrentOperations?: number
-  /**
-   * Enable rendering of explicit drop zones (used in tests)
-   */
-  enableDropZones?: boolean
-  /**
-   * Callback invoked when a drag starts – primarily for test hooks.
-   */
-  onDragStart?: (start: DragStart) => void
-  /**
-   * Show history panel (legacy prop kept for backward-compatibility).
-   */
-  showHistory?: boolean
-}
-
-interface MoveOperation {
-  type: 'file' | 'folder'
-  sourceId: number
-  targetId: number | null
-  status: 'pending' | 'processing' | 'completed' | 'failed'
-  progress: number
-  error?: string
-  item: Conversation | FolderType
-}
-
-interface ConflictResolution {
-  sourceItem: Conversation | FolderType
-  targetFolder: FolderType
-  conflictType: 'duplicate_name' | 'permission_denied' | 'circular_reference'
-  resolution: 'skip' | 'rename' | 'replace' | 'merge'
-}
-
-interface DropZoneProps {
-  folderId: number | null
-  folderName: string
-  isActive: boolean
-  isOver: boolean
-  canDrop: boolean
-  itemCount: number
-  onDrop: (folderId: number | null) => void
-}
-
-// Drop Zone Component
-const DropZone: React.FC<DropZoneProps> = ({
-  folderId,
-  folderName,
-  isActive,
-  isOver,
-  canDrop,
-  itemCount,
-  onDrop
-}) => {
-  return (
-    <Droppable droppableId={`folder-${sanitizeFolderId(folderId)}`} type="ITEM">
-      {(provided, snapshot) => (
-        <div
-          ref={provided.innerRef}
-          {...provided.droppableProps}
-          className={cn(
-            'border-2 border-dashed rounded-lg p-4 transition-all duration-200',
-            'min-h-[80px] flex flex-col items-center justify-center',
-            canDrop && isOver && 'border-accent bg-accent/10 scale-105',
-            canDrop && !isOver && 'border-muted-foreground/30',
-            !canDrop && 'border-muted-foreground/10 opacity-50',
-            isActive && 'ring-2 ring-accent/50'
-          )}
-          onClick={() => canDrop && onDrop(folderId)}
-        >
-          <div className="flex items-center gap-2 mb-2">
-            {folderId ? (
-              isOver ? <FolderOpen className="h-6 w-6 text-accent" /> : <Folder className="h-6 w-6 text-muted-foreground" />
-            ) : (
-              <Folder className="h-6 w-6 text-muted-foreground" />
-            )}
-            <span className="font-medium">
-              {folderName}
-            </span>
-          </div>
-          
-          {itemCount > 0 && (
-            <Badge variant="secondary" className="text-xs">
-              {itemCount} items
-            </Badge>
-          )}
-          
-          {isOver && canDrop && (
-            <div className="mt-2 text-xs text-accent font-medium">
-              Drop here to move
-            </div>
-          )}
-          
-          {!canDrop && isOver && (
-            <div className="mt-2 text-xs text-destructive">
-              Cannot drop here
-            </div>
-          )}
-          
-          {provided.placeholder}
-        </div>
-      )}
-    </Droppable>
-  )
-}
-
-// Draggable Item Component
-const DraggableItem: React.FC<{
-  item: Conversation | FolderType
-  index: number
-  type: 'file' | 'folder'
-  isSelected: boolean
-  onSelect: (id: number, selected: boolean) => void
-}> = ({ item, index, type, isSelected, onSelect }) => {
-  return (
-    <Draggable draggableId={`${type}-${item.id}`} index={index}>
-      {(provided, snapshot) => (
-        <Card
-          ref={provided.innerRef}
-          {...provided.draggableProps}
-          {...provided.dragHandleProps}
-          className={cn(
-            'mb-2 cursor-grab active:cursor-grabbing',
-            snapshot.isDragging && 'rotate-2 shadow-lg z-50',
-            isSelected && 'ring-2 ring-accent',
-            'transition-all duration-200'
-          )}
-        >
-          <CardContent className="p-3 flex items-center gap-3">
-            <Checkbox
-              checked={isSelected}
-              onCheckedChange={(checked) => onSelect(item.id, !!checked)}
-              onClick={(e) => e.stopPropagation()}
-            />
-            
-            {type === 'folder' ? (
-              <Folder className="h-4 w-4 text-accent flex-shrink-0" />
-            ) : (
-              <FileText className="h-4 w-4 text-blue-500 flex-shrink-0" />
-            )}
-            
-            <div className="flex-1 min-w-0">
-              <div className="font-medium text-sm truncate">
-                {type === 'folder' ? (
-                  isFolder(item) ? item.name : 'Unknown Folder'
-                ) : (
-                  isConversation(item) ? item.title : 'Unknown File'
-                )}
-              </div>
-              <div className="text-xs text-muted-foreground">
-                {type === 'folder' ? (
-                  isFolder(item) ? `${item.conversation_count || 0} files` : 'Folder'
-                ) : (
-                  isConversation(item) ? item.original_filename : 'File'
-                )}
-              </div>
-            </div>
-            
-            {type === 'file' && isConversation(item) && (
-              <div className="flex-shrink-0">
-                {item.processing_status === 'completed' && (
-                  <CheckCircle className="h-4 w-4 text-green-500" />
-                )}
-                {item.processing_status === 'processing' && (
-                  <Clock className="h-4 w-4 text-blue-500 animate-spin" />
-                )}
-                {item.processing_status === 'failed' && (
-                  <AlertCircle className="h-4 w-4 text-red-500" />
-                )}
-              </div>
-            )}
-          </CardContent>
-        </Card>
-      )}
-    </Draggable>
-  )
-}
-
-// Move Operations Panel
-const MoveOperationsPanel: React.FC<{
-  operations: MoveOperation[]
-  onCancel: (operationId: string) => void
-  onRetry: (operationId: string) => void
-  onClear: () => void
-  folders: Record<number, FolderType>
-}> = ({ operations, onCancel, onRetry, onClear, folders }) => {
-  if (operations.length === 0) return null
-
-  const inProgress = operations.filter(op => op.status === 'processing').length
-  const completed = operations.filter(op => op.status === 'completed').length
-  const failed = operations.filter(op => op.status === 'failed').length
-
-  return (
-    <Card className="mb-4">
-      <CardContent className="p-4">
-        <div className="flex items-center justify-between mb-3">
-          <h3 className="font-medium text-sm">Move Operations</h3>
-          <div className="flex gap-2">
-            <Badge variant="secondary">{inProgress} in progress</Badge>
-            <Badge variant="default">{completed} completed</Badge>
-            {failed > 0 && <Badge variant="destructive">{failed} failed</Badge>}
-            <Button variant="ghost" size="sm" onClick={onClear}>
-              <X className="h-3 w-3" />
-            </Button>
-          </div>
-        </div>
-
-        <div className="space-y-2 max-h-40 overflow-y-auto">
-          {operations.map((operation, index) => (
-            <div key={index} className="flex items-center gap-3 p-2 border rounded">
-              <div className="flex-shrink-0">
-                {operation.type === 'folder' ? (
-                  <Folder className="h-4 w-4" />
-                ) : (
-                  <FileText className="h-4 w-4" />
-                )}
-              </div>
-              
-              <div className="flex-1 min-w-0">
-                <div className="text-sm truncate">
-                  {operation.type === 'folder' ? (
-                    isFolder(operation.item) ? operation.item.name : 'Unknown Folder'
-                  ) : (
-                    isConversation(operation.item) ? operation.item.title : 'Unknown File'
-                  )}
-                </div>
-                <div className="flex items-center gap-2 text-xs text-muted-foreground">
-                  <span>Moving to:</span>
-                  <ArrowRight className="h-3 w-3" />
-                  <span>
-                    {operation.targetId ? (
-                      folders[operation.targetId]?.name || `Folder ${operation.targetId}`
-                    ) : 'Root'}
-                  </span>
-                </div>
-              </div>
-
-              <div className="flex-shrink-0">
-                {operation.status === 'processing' && (
-                  <div className="flex items-center gap-2">
-                    <Progress value={operation.progress} className="w-16 h-2" />
-                    <Button
-                      variant="ghost"
-                      size="sm"
-                      onClick={() => onCancel(`${operation.type}-${operation.sourceId}`)}
-                    >
-                      <X className="h-3 w-3" />
-                    </Button>
-                  </div>
-                )}
-                {operation.status === 'completed' && (
-                  <CheckCircle className="h-4 w-4 text-green-500" />
-                )}
-                {operation.status === 'failed' && (
-                  <div className="flex items-center gap-1">
-                    <AlertCircle className="h-4 w-4 text-red-500" />
-                    <Button
-                      variant="ghost"
-                      size="sm"
-                      onClick={() => onRetry(`${operation.type}-${operation.sourceId}`)}
-                    >
-                      Retry
-                    </Button>
-                  </div>
-                )}
-              </div>
-            </div>
-          ))}
-        </div>
-      </CardContent>
-    </Card>
-  )
-}
-
-// Conflict Resolution Dialog
-const ConflictResolutionDialog: React.FC<{
-  conflicts: ConflictResolution[]
-  isOpen: boolean
-  onResolve: (resolutions: ConflictResolution[]) => void
-  onCancel: () => void
-}> = ({ conflicts, isOpen, onResolve, onCancel }) => {
-  const [resolutions, setResolutions] = useState<ConflictResolution[]>(conflicts)
-
-  const updateResolution = useCallback((index: number, resolution: ConflictResolution['resolution']) => {
-    setResolutions(prev => prev.map((r, i) => i === index ? { ...r, resolution } : r))
-  }, [])
-
-  const handleResolve = useCallback(() => {
-    onResolve(resolutions)
-  }, [resolutions, onResolve])
-
-  return (
-    <Dialog open={isOpen} onOpenChange={onCancel}>
-      <DialogContent className="max-w-2xl max-h-[80vh] overflow-y-auto">
-        <DialogHeader>
-          <DialogTitle>Resolve Conflicts</DialogTitle>
-          <DialogDescription>
-            Some items cannot be moved due to conflicts. Please choose how to resolve each conflict.
-          </DialogDescription>
-        </DialogHeader>
-
-        <div className="space-y-4">
-          {conflicts.map((conflict, index) => (
-            <Card key={index}>
-              <CardContent className="p-4">
-                <div className="flex items-start gap-3 mb-3">
-                  <AlertCircle className="h-5 w-5 text-yellow-500 flex-shrink-0 mt-0.5" />
-                  <div className="flex-1">
-                    <h4 className="font-medium text-sm mb-1">
-                      {conflict.sourceItem.name} → {conflict.targetFolder.name}
-                    </h4>
-                    <p className="text-xs text-muted-foreground">
-                      {conflict.conflictType === 'duplicate_name' && 'An item with this name already exists'}
-                      {conflict.conflictType === 'permission_denied' && 'You do not have permission to move this item'}
-                      {conflict.conflictType === 'circular_reference' && 'Cannot move folder into itself or its subfolder'}
-                    </p>
-                  </div>
-                </div>
-
-                <Select
-                  value={conflict.resolution}
-                  onValueChange={(value: ConflictResolution['resolution']) => updateResolution(index, value)}
-                >
-                  <SelectTrigger>
-                    <SelectValue />
-                  </SelectTrigger>
-                  <SelectContent>
-                    <SelectItem value="skip">Skip this item</SelectItem>
-                    {conflict.conflictType === 'duplicate_name' && (
-                      <>
-                        <SelectItem value="rename">Rename and move</SelectItem>
-                        <SelectItem value="replace">Replace existing</SelectItem>
-                        <SelectItem value="merge">Merge (folders only)</SelectItem>
-                      </>
-                    )}
-                  </SelectContent>
-                </Select>
-              </CardContent>
-            </Card>
-          ))}
-        </div>
-
-        <DialogFooter>
-          <Button variant="outline" onClick={onCancel}>
-            Cancel
-          </Button>
-          <Button onClick={handleResolve}>
-            Apply Resolutions
-          </Button>
-        </DialogFooter>
-      </DialogContent>
-    </Dialog>
-  )
-}
-
-// Main Component
-export const DragDropManager: React.FC<DragDropManagerProps> = ({
-  className,
-  onMoveComplete,
-  onError,
-  enableConflictResolution = true,
-  enableBulkOperations = true,
-  maxConcurrentOperations = 5,
-  // Legacy / test-only props – currently no-op in production
-  enableDropZones = false,
-  onDragStart: onDragStartProp,
-  showHistory = false
-}) => {
-  const conversations = useConversations()
-  const folders = useFolders()
-  const { updateConversation, updateFolder } = useActions()
-
-  const [draggedItems, setDraggedItems] = useState<Set<string>>(new Set())
-  const [moveOperations, setMoveOperations] = useState<MoveOperation[]>([])
-  const [conflicts, setConflicts] = useState<ConflictResolution[]>([])
-  const [showConflictDialog, setShowConflictDialog] = useState(false)
-  const [selectedFiles, setSelectedFiles] = useState<Set<number>>(new Set())
-  const [selectedFolders, setSelectedFolders] = useState<Set<number>>(new Set())
-
-  // Handle drag start
-  const handleDragStart = useCallback((start: DragStart) => {
-    const [type, id] = start.draggableId.split('-')
-    const itemId = parseInt(id)
-    
-    if (enableBulkOperations) {
-      const isSelected = type === 'file' 
-        ? selectedFiles.has(itemId)
-        : selectedFolders.has(itemId)
-      
-      if (!isSelected) {
-        // If item being dragged is not selected, clear selection and select only this item
-        if (type === 'file') {
-          setSelectedFiles(new Set([itemId]))
-          setSelectedFolders(new Set())
-        } else {
-          setSelectedFolders(new Set([itemId]))
-          setSelectedFiles(new Set())
-        }
-      }
-    }
-    
-    setDraggedItems(new Set([start.draggableId]))
-  }, [enableBulkOperations, selectedFiles, selectedFolders])
-
-  // Handle drag end
-  const handleDragEnd = useCallback((result: DropResult) => {
-    setDraggedItems(new Set())
-    
-    if (!result.destination) return
-
-    const dragParts = result.draggableId.split('-')
-    if (dragParts.length < 2) return
-    const [sourceType, sourceId] = dragParts
-    
-    const { type: dropType, id: targetId } = parseDroppableId(result.destination.droppableId)
-    const targetFolderId = targetId === 'root' ? null : parseInt(targetId)
-
-    // Get items to move
-    const itemsToMove: Array<{ type: 'file' | 'folder', id: number, item: Conversation | FolderType }> = []
-    
-    if (enableBulkOperations) {
-      // Include all selected items of the same type
-      if (sourceType === 'file') {
-        selectedFiles.forEach(id => {
-          const conversation = conversations.items.find(c => c.id === id)
-          if (conversation) {
-            itemsToMove.push({ type: 'file', id, item: conversation })
-          }
-        })
-      } else {
-        selectedFolders.forEach(id => {
-          const folder = Object.values(folders).find(f => f.id === id)
-          if (folder) {
-            itemsToMove.push({ type: 'folder', id, item: folder })
-          }
-        })
-      }
-    } else {
-      // Single item move
-      const id = parseInt(sourceId)
-      if (sourceType === 'file') {
-        const conversation = conversations.items.find(c => c.id === id)
-        if (conversation) {
-          itemsToMove.push({ type: 'file', id, item: conversation })
-        }
-      } else {
-        const folder = Object.values(folders).find(f => f.id === id)
-        if (folder) {
-          itemsToMove.push({ type: 'folder', id, item: folder })
-        }
-      }
-    }
-
-    // Check for conflicts
-    const detectedConflicts: ConflictResolution[] = []
-    
-    itemsToMove.forEach(({ type, id, item }) => {
-      // Check for circular reference (folders)
-      if (type === 'folder' && targetFolderId) {
-        const isCircular = checkCircularReference(id, targetFolderId, folders)
-        if (isCircular) {
-          detectedConflicts.push({
-            sourceItem: item,
-            targetFolder: Object.values(folders).find(f => f.id === targetFolderId)!,
-            conflictType: 'circular_reference',
-            resolution: 'skip'
-          })
-          return
-        }
-      }
-
-      // Check for duplicate names
-      const targetItems = targetFolderId 
-        ? Object.values(folders).filter(f => f.parent_id === targetFolderId)
-        : Object.values(folders).filter(f => !f.parent_id)
-      
-      const duplicateExists = targetItems.some(targetItem => 
-        targetItem.name === item.name && targetItem.id !== id
-      )
-      
-      if (duplicateExists) {
-        detectedConflicts.push({
-          sourceItem: item,
-          targetFolder: Object.values(folders).find(f => f.id === targetFolderId) || { name: 'Root' } as FolderType,
-          conflictType: 'duplicate_name',
-          resolution: 'rename'
-        })
-      }
-    })
-
-    if (detectedConflicts.length > 0 && enableConflictResolution) {
-      setConflicts(detectedConflicts)
-      setShowConflictDialog(true)
-      return
-    }
-
-    // Proceed with move operations
-    performMoveOperations(itemsToMove, targetFolderId)
-  }, [conversations.items, folders, enableBulkOperations, selectedFiles, selectedFolders, enableConflictResolution])
-
-  // Check circular reference with depth limit to prevent stack overflow
-  const checkCircularReference = useCallback((folderId: number, targetFolderId: number, folders: Record<number, FolderType>, depth: number = 0): boolean => {
-    // Prevent infinite recursion - max depth of 100 levels
-    if (depth > 100) {
-      console.warn('Circular reference check exceeded maximum depth, assuming circular')
-      return true
-    }
-    
-    if (folderId === targetFolderId) return true
-    
-    const targetFolder = folders[targetFolderId]
-    if (!targetFolder || !targetFolder.parent_id) return false
-    
-    return checkCircularReference(folderId, targetFolder.parent_id, folders, depth + 1)
-  }, [])
-
-  // Perform move operations
-  const performMoveOperations = useCallback(async (
-    itemsToMove: Array<{ type: 'file' | 'folder', id: number, item: Conversation | FolderType }>,
-    targetFolderId: number | null
-  ) => {
-    const operations: MoveOperation[] = itemsToMove.map(({ type, id, item }) => ({
-      type,
-      sourceId: id,
-      targetId: targetFolderId,
-      status: 'pending' as const,
-      progress: 0,
-      item
-    }))
-
-    setMoveOperations(prev => [...prev, ...operations])
-
-    // Process operations with concurrency limit
-    const chunks = []
-    for (let i = 0; i < operations.length; i += maxConcurrentOperations) {
-      chunks.push(operations.slice(i, i + maxConcurrentOperations))
-    }
-
-    for (const chunk of chunks) {
-      await Promise.all(chunk.map(async (operation) => {
-        try {
-          // Update operation status
-          setMoveOperations(prev => prev.map(op => 
-            op.sourceId === operation.sourceId && op.type === operation.type
-              ? { ...op, status: 'processing' as const }
-              : op
-          ))
-
-          // TODO: Connect to real progress updates from backend
-          // For now, we'll update progress based on actual operation completion
-          // In a real implementation, this would subscribe to WebSocket events or poll backend APIs
-          setMoveOperations(prev => prev.map(op => 
-            op.sourceId === operation.sourceId && op.type === operation.type
-              ? { ...op, progress: 50 } // Show intermediate progress
-              : op
-          ))
-
-          // Perform the actual move
-          if (operation.type === 'file') {
-            updateConversation(operation.sourceId, { folder_id: targetFolderId })
-          } else {
-            updateFolder(operation.sourceId, { parent_id: targetFolderId })
-          }
-
-          // Mark as completed
-          setMoveOperations(prev => prev.map(op => 
-            op.sourceId === operation.sourceId && op.type === operation.type
-              ? { ...op, status: 'completed' as const, progress: 100 }
-              : op
-          ))
-
-        } catch (error) {
-          setMoveOperations(prev => prev.map(op => 
-            op.sourceId === operation.sourceId && op.type === operation.type
-              ? { 
-                  ...op, 
-                  status: 'failed' as const, 
-                  error: error instanceof Error ? error.message : 'Unknown error' 
-                }
-              : op
-          ))
-          onError?.(error instanceof Error ? error.message : 'Move operation failed')
-        }
-      }))
-    }
-
-    onMoveComplete?.(operations)
-  }, [maxConcurrentOperations, updateConversation, updateFolder, onMoveComplete, onError])
-
-  // Handle conflict resolution
-  const handleConflictResolution = useCallback((resolutions: ConflictResolution[]) => {
-    setShowConflictDialog(false)
-    
-    // Process items that don't need to be skipped
-    const itemsToMove = resolutions
-      .filter(r => r.resolution !== 'skip')
-      .map(r => ({
-        type: isConversation(r.sourceItem) ? 'file' as const : 'folder' as const,
-        id: r.sourceItem.id,
-        item: r.sourceItem
-      }))
-    
-    if (itemsToMove.length > 0) {
-      const targetFolderId = resolutions[0]?.targetFolder.id || null
-      performMoveOperations(itemsToMove, targetFolderId)
-    }
-    
-    setConflicts([])
-  }, [performMoveOperations])
-
-  // Event handlers for selection
-  const handleFileSelect = useCallback((id: number, selected: boolean) => {
-    setSelectedFiles(prev => {
-      const newSet = new Set(prev)
-      if (selected) {
-        newSet.add(id)
-      } else {
-        newSet.delete(id)
-      }
-      return newSet
-    })
-  }, [])
-
-  const handleFolderSelect = useCallback((id: number, selected: boolean) => {
-    setSelectedFolders(prev => {
-      const newSet = new Set(prev)
-      if (selected) {
-        newSet.add(id)
-      } else {
-        newSet.delete(id)
-      }
-      return newSet
-    })
-  }, [])
-
-  // Clean up completed operations
-  const handleClearOperations = useCallback(() => {
-    setMoveOperations(prev => prev.filter(op => op.status === 'processing'))
-  }, [])
-
-  const handleCancelOperation = useCallback((operationId: string) => {
-    // In a real implementation, this would cancel the ongoing operation
-    setMoveOperations(prev => prev.filter(op => `${op.type}-${op.sourceId}` !== operationId))
-  }, [])
-
-  const handleRetryOperation = useCallback((operationId: string) => {
-    const [type, sourceId] = operationId.split('-')
-    const operation = moveOperations.find(op => op.type === type && op.sourceId === parseInt(sourceId))
-    
-    if (operation) {
-      performMoveOperations([{
-        type: operation.type,
-        id: operation.sourceId,
-        item: operation.item
-      }], operation.targetId)
-    }
-  }, [moveOperations, performMoveOperations])
-
-  return (
-    <div className={cn('space-y-4', className)}>
-      <DragDropContext onDragStart={handleDragStart} onDragEnd={handleDragEnd}>
-        {/* Move Operations Panel */}
-        <MoveOperationsPanel
-          operations={moveOperations}
-          onCancel={handleCancelOperation}
-          onRetry={handleRetryOperation}
-          onClear={handleClearOperations}
-          folders={folders}
-        />
-
-        {/* Drop Zones */}
-        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
-          <DropZone
-            folderId={null}
-            folderName="Root Folder"
-            isActive={false}
-            isOver={false}
-            canDrop={true}
-            itemCount={conversations.items.filter(c => !c.folder_id).length}
-            onDrop={() => {}}
-          />
-          
-          {Object.values(folders).map(folder => (
-            <DropZone
-              key={folder.id}
-              folderId={folder.id}
-              folderName={folder.name}
-              isActive={false}
-              isOver={false}
-              canDrop={true}
-              itemCount={folder.conversation_count || 0}
-              onDrop={() => {}}
-            />
-          ))}
-        </div>
-
-        {/* Draggable Items */}
-        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
-          {/* Files */}
-          <div>
-            <h3 className="font-medium mb-3">Files</h3>
-            <Droppable droppableId="files" type="ITEM">
-              {(provided) => (
-                <div ref={provided.innerRef} {...provided.droppableProps}>
-                  {conversations.items.map((conversation, index) => (
-                    <DraggableItem
-                      key={conversation.id}
-                      item={conversation}
-                      index={index}
-                      type="file"
-                      isSelected={selectedFiles.has(conversation.id)}
-                      onSelect={handleFileSelect}
-                    />
-                  ))}
-                  {provided.placeholder}
-                </div>
-              )}
-            </Droppable>
-          </div>
-
-          {/* Folders */}
-          <div>
-            <h3 className="font-medium mb-3">Folders</h3>
-            <Droppable droppableId="folders" type="ITEM">
-              {(provided) => (
-                <div ref={provided.innerRef} {...provided.droppableProps}>
-                  {Object.values(folders).map((folder, index) => (
-                    <DraggableItem
-                      key={folder.id}
-                      item={folder}
-                      index={index}
-                      type="folder"
-                      isSelected={selectedFolders.has(folder.id)}
-                      onSelect={handleFolderSelect}
-                    />
-                  ))}
-                  {provided.placeholder}
-                </div>
-              )}
-            </Droppable>
-          </div>
-        </div>
-      </DragDropContext>
-
-      {/* Conflict Resolution Dialog */}
-      <ConflictResolutionDialog
-        conflicts={conflicts}
-        isOpen={showConflictDialog}
-        onResolve={handleConflictResolution}
-        onCancel={() => setShowConflictDialog(false)}
-      />
-    </div>
-  )
-}
-
-export default DragDropManager
\ No newline at end of file
diff --git a/frontend/components/feedme/EditConversationModal.tsx b/frontend/components/feedme/EditConversationModal.tsx
deleted file mode 100644
index 17c000f..0000000
--- a/frontend/components/feedme/EditConversationModal.tsx
+++ /dev/null
@@ -1,451 +0,0 @@
-/**
- * FeedMe v2.0 Phase 3: Edit Conversation Modal
- * Rich text editor with version control for transcript editing
- * 
- * Features:
- * - Rich text editor with formatting toolbar
- * - Version history panel with diff visualization
- * - Save and reprocess workflow
- * - Validation and error handling
- * - Real-time preview
- */
-
-'use client'
-
-import React, { useState, useEffect, useRef } from 'react'
-import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from '../ui/dialog'
-import { Button } from '../ui/button'
-import { Input } from '../ui/input'
-import { Label } from '../ui/label'
-import { Tabs, TabsContent, TabsList, TabsTrigger } from '../ui/tabs'
-import { Alert, AlertDescription } from '../ui/alert'
-import { Badge } from '../ui/badge'
-import { Loader2, Save, RotateCcw, History, Eye, Edit3 } from 'lucide-react'
-import { cn } from '../../lib/utils'
-import { toast } from '../ui/use-toast'
-import {
-  editConversation,
-  getConversationVersions,
-  revertConversation,
-  getFormattedQAContent,
-  type ConversationVersion,
-  type VersionListResponse,
-  type ConversationEditRequest,
-  type ConversationRevertRequest,
-  type EditResponse,
-  type UploadTranscriptResponse
-} from '../../lib/feedme-api'
-import { VersionHistoryPanel } from './VersionHistoryPanel'
-import { DiffViewer } from './DiffViewer'
-import { RichTextEditor } from './RichTextEditor'
-
-interface EditConversationModalProps {
-  isOpen: boolean
-  onClose: () => void
-  conversation: UploadTranscriptResponse
-  onConversationUpdated?: (conversation: UploadTranscriptResponse) => void
-}
-
-interface FormData {
-  title: string
-  transcript: string
-}
-
-interface ContentData {
-  formatted_content: string
-  total_examples: number
-  content_type: 'qa_examples' | 'raw_transcript'
-  raw_transcript?: string
-  message: string
-}
-
-interface FormErrors {
-  title?: string
-  transcript?: string
-}
-
-export function EditConversationModal({
-  isOpen,
-  onClose,
-  conversation,
-  onConversationUpdated
-}: EditConversationModalProps) {
-  // Form state
-  const [formData, setFormData] = useState<FormData>({
-    title: conversation.title,
-    transcript: conversation.metadata?.raw_transcript || ''
-  })
-  const [contentData, setContentData] = useState<ContentData | null>(null)
-  const [isLoadingContent, setIsLoadingContent] = useState(false)
-  const [errors, setErrors] = useState<FormErrors>({})
-  const [apiError, setApiError] = useState<string | null>(null)
-  const [isLoading, setIsLoading] = useState(false)
-  const [isSaving, setIsSaving] = useState(false)
-  
-  // Version management state
-  const [versions, setVersions] = useState<ConversationVersion[]>([])
-  const [isLoadingVersions, setIsLoadingVersions] = useState(false)
-  const [selectedVersion, setSelectedVersion] = useState<number | null>(null)
-  const [showDiff, setShowDiff] = useState(false)
-  
-  // UI state
-  const [activeTab, setActiveTab] = useState<'edit' | 'history' | 'diff'>('edit')
-  const [hasUnsavedChanges, setHasUnsavedChanges] = useState(false)
-  const [showReprocessOption, setShowReprocessOption] = useState(false)
-  const [reprocessAfterSave, setReprocessAfterSave] = useState(true)
-  
-  // Current user (mock for now - would come from auth context)
-  const currentUser = 'editor@example.com'
-
-  // Load version history and formatted content on mount
-  useEffect(() => {
-    if (isOpen) {
-      loadVersionHistory()
-      loadFormattedContent()
-    }
-  }, [isOpen, conversation.id])
-
-  // Track unsaved changes
-  useEffect(() => {
-    const originalTranscript = contentData?.formatted_content || conversation.metadata?.raw_transcript || ''
-    const hasChanges = 
-      formData.title !== conversation.title ||
-      formData.transcript !== originalTranscript
-    
-    setHasUnsavedChanges(hasChanges)
-  }, [formData, conversation, contentData])
-
-  const loadVersionHistory = async () => {
-    setApiError(null)
-    try {
-      setIsLoadingVersions(true)
-      const response = await getConversationVersions(conversation.id)
-      setVersions(response.versions)
-    } catch (error) {
-      console.error('Failed to load version history:', error)
-      // Don't show error for pending conversations (versions may not exist yet)
-      if (conversation.processing_status !== 'pending') {
-        const message = error instanceof Error ? error.message : 'Could not load version history.'
-        setApiError(message)
-      }
-      // Set empty versions array for pending conversations
-      setVersions([])
-    } finally {
-      setIsLoadingVersions(false)
-    }
-  }
-
-  const loadFormattedContent = async () => {
-    setApiError(null)
-    try {
-      setIsLoadingContent(true)
-      const content = await getFormattedQAContent(conversation.id)
-      setContentData(content)
-      
-      // Update the form with the formatted content
-      setFormData(prev => ({
-        ...prev,
-        transcript: content.formatted_content
-      }))
-      
-      console.log(`[EditModal] Loaded ${content.content_type}: ${content.message}`)
-    } catch (error) {
-      console.error('Failed to load formatted content:', error)
-      // Keep the existing raw transcript on error
-      const fallbackContent = conversation.metadata?.raw_transcript || ''
-      setFormData(prev => ({
-        ...prev,
-        transcript: fallbackContent
-      }))
-      
-      // Don't show error for this - just log it
-      console.log('[EditModal] Using raw transcript as fallback')
-    } finally {
-      setIsLoadingContent(false)
-    }
-  }
-
-  const validateForm = (): boolean => {
-    const newErrors: FormErrors = {}
-
-    if (!formData.title.trim()) {
-      newErrors.title = 'Title is required'
-    }
-
-    if (!formData.transcript.trim()) {
-      newErrors.transcript = 'Transcript content cannot be empty'
-    }
-
-    setErrors(newErrors)
-    return Object.keys(newErrors).length === 0
-  }
-
-  const handleSave = async () => {
-    setApiError(null)
-    if (!validateForm()) {
-      return
-    }
-
-    setIsSaving(true)
-    try {
-      const payload: ConversationEditRequest = {
-        title: formData.title,
-        raw_transcript: formData.transcript,
-        reprocess: reprocessAfterSave,
-        updated_by: currentUser
-      }
-
-      const response = await editConversation(conversation.id, payload)
-
-      toast({
-        title: 'Success',
-        description: `Saved as v${response.new_version}.${response.reprocessing ? ' Reprocessing...' : ''}`
-      })
-
-      if (onConversationUpdated) {
-        onConversationUpdated(response.conversation)
-      }
-      handleClose()
-    } catch (error) {
-      console.error('Save failed:', error)
-      const message = error instanceof Error ? error.message : 'An unknown error occurred.'
-      setApiError(`Failed to save changes: ${message}`)
-    } finally {
-      setIsSaving(false)
-    }
-  }
-
-  const handleVersionSelect = (versionNumber: number) => {
-    setSelectedVersion(versionNumber)
-    setShowDiff(true)
-    setActiveTab('diff')
-  }
-
-  const handleRevert = async (versionNumber: number) => {
-    setApiError(null)
-    setIsLoading(true)
-    try {
-      const revertPayload: ConversationRevertRequest = {
-        target_version: versionNumber,
-        reverted_by: currentUser,
-        reason: 'Manual revert from UI',
-        reprocess: true
-      }
-      const response = await revertConversation(conversation.id, versionNumber, revertPayload)
-
-      toast({
-        title: 'Success',
-        description: `Reverted to v${response.reverted_to_version}. New active version is v${response.new_version}.`
-      })
-
-      // Update form data with reverted content
-      setFormData({
-        title: response.conversation.title,
-        transcript: response.conversation.metadata?.raw_transcript || ''
-      })
-
-      // Refresh version history to show new active version
-      await loadVersionHistory()
-
-      // Notify parent component
-      if (onConversationUpdated) {
-        onConversationUpdated(response.conversation)
-      }
-
-      // Switch back to edit tab
-      setActiveTab('edit')
-    } catch (error) {
-      console.error(`Failed to revert to version ${versionNumber}:`, error)
-      const message = error instanceof Error ? error.message : 'An unknown error occurred.'
-      setApiError(`Failed to revert to version ${versionNumber}: ${message}`)
-    } finally {
-      setIsLoading(false)
-    }
-  }
-
-  const handleClose = () => {
-    if (hasUnsavedChanges) {
-      const confirmed = window.confirm(
-        'You have unsaved changes. Are you sure you want to close without saving?'
-      )
-      if (!confirmed) return
-    }
-    onClose()
-  }
-
-  return (
-    <Dialog open={isOpen} onOpenChange={handleClose}>
-      <DialogContent className="max-w-5xl max-h-[90vh] overflow-hidden flex flex-col">
-        <DialogHeader>
-          <DialogTitle className="flex items-center gap-2">
-            <Edit3 className="h-5 w-5" />
-            Edit Conversation
-            {hasUnsavedChanges && <Badge variant="outline">Unsaved Changes</Badge>}
-          </DialogTitle>
-          <DialogDescription>
-            Edit the conversation title and transcript. You can view version history, see diffs, and revert to previous versions.
-          </DialogDescription>
-        </DialogHeader>
-
-        {apiError && (
-          <Alert variant="destructive" className="my-4">
-            <AlertDescription>{apiError}</AlertDescription>
-          </Alert>
-        )}
-
-        <Tabs value={activeTab} onValueChange={(value) => setActiveTab(value as 'edit' | 'history' | 'diff')} className="flex-1 flex flex-col overflow-hidden">
-          <TabsList className="grid w-full grid-cols-3">
-            <TabsTrigger value="edit" className="flex items-center gap-2">
-              <Edit3 className="h-4 w-4" />
-              Edit
-            </TabsTrigger>
-            <TabsTrigger value="history" className="flex items-center gap-2">
-              <History className="h-4 w-4" />
-              Version History
-              {versions.length > 1 && (
-                <Badge variant="secondary" className="ml-1">
-                  {versions.length}
-                </Badge>
-              )}
-            </TabsTrigger>
-            <TabsTrigger value="diff" disabled={!showDiff} className="flex items-center gap-2">
-              <Eye className="h-4 w-4" />
-              Compare
-            </TabsTrigger>
-          </TabsList>
-
-          {/* Edit Tab */}
-          <TabsContent value="edit" className="flex-1 flex flex-col overflow-hidden mt-4">
-            <div className="flex flex-col gap-4 flex-1 overflow-hidden">
-              {/* Title Input */}
-              <div className="space-y-2">
-                <Label htmlFor="title">Title</Label>
-                <Input
-                  id="title"
-                  value={formData.title}
-                  onChange={(e) => setFormData(prev => ({ ...prev, title: e.target.value }))}
-                  className={cn(errors.title && 'border-red-500')}
-                  placeholder="Enter conversation title..."
-                />
-                {errors.title && (
-                  <p className="text-sm text-red-500">{errors.title}</p>
-                )}
-              </div>
-
-              {/* Rich Text Editor */}
-              <div className="space-y-2 flex-1 flex flex-col overflow-hidden">
-                <div className="flex items-center justify-between">
-                  <Label htmlFor="transcript">
-                    {contentData?.content_type === 'qa_examples' ? 'Q&A Examples' : 'Transcript Content'}
-                  </Label>
-                  {isLoadingContent && (
-                    <div className="flex items-center gap-2 text-sm text-muted-foreground">
-                      <Loader2 className="h-3 w-3 animate-spin" />
-                      Loading content...
-                    </div>
-                  )}
-                  {contentData && (
-                    <Badge variant={contentData.content_type === 'qa_examples' ? 'default' : 'secondary'}>
-                      {contentData.content_type === 'qa_examples' 
-                        ? `${contentData.total_examples} Examples` 
-                        : 'Raw Transcript'}
-                    </Badge>
-                  )}
-                </div>
-                {contentData?.message && (
-                  <p className="text-xs text-muted-foreground">{contentData.message}</p>
-                )}
-                <div className="flex-1 overflow-hidden">
-                  <RichTextEditor
-                    value={formData.transcript}
-                    onChange={(value) => setFormData(prev => ({ ...prev, transcript: value }))}
-                    placeholder={
-                      contentData?.content_type === 'qa_examples' 
-                        ? "Edit Q&A examples (markdown format)..."
-                        : "Enter transcript content..."
-                    }
-                    className={cn(
-                      'h-full',
-                      errors.transcript && 'border-red-500'
-                    )}
-                  />
-                </div>
-                {errors.transcript && (
-                  <p className="text-sm text-red-500">{errors.transcript}</p>
-                )}
-              </div>
-
-              {/* Reprocess Option */}
-              {hasUnsavedChanges && (
-                <Alert>
-                  <AlertDescription className="flex items-center justify-between">
-                    <span>Reprocess transcript after saving to extract new Q&A examples?</span>
-                    <div className="flex items-center gap-2">
-                      <input
-                        type="checkbox"
-                        id="reprocess"
-                        checked={reprocessAfterSave}
-                        onChange={(e) => setReprocessAfterSave(e.target.checked)}
-                        className="rounded"
-                      />
-                      <Label htmlFor="reprocess" className="text-sm">
-                        Auto-reprocess
-                      </Label>
-                    </div>
-                  </AlertDescription>
-                </Alert>
-              )}
-            </div>
-
-            {/* Action Buttons */}
-            <div className="flex justify-end gap-2 pt-4 border-t">
-              <Button variant="outline" onClick={handleClose}>
-                Cancel
-              </Button>
-              <Button 
-                onClick={handleSave} 
-                disabled={isSaving || !hasUnsavedChanges}
-                className="flex items-center gap-2"
-              >
-                {isSaving ? (
-                  <Loader2 className="h-4 w-4 animate-spin" />
-                ) : (
-                  <Save className="h-4 w-4" />
-                )}
-                {isSaving ? 'Saving...' : 'Save Changes'}
-              </Button>
-            </div>
-          </TabsContent>
-
-          {/* Version History Tab */}
-          <TabsContent value="history" className="flex-1 overflow-hidden mt-4">
-            <VersionHistoryPanel
-              conversationId={conversation.id}
-              versions={versions}
-              isLoading={isLoadingVersions}
-              onSelectVersion={handleVersionSelect}
-              onRevertVersion={handleRevert}
-              onRefresh={loadVersionHistory}
-            />
-          </TabsContent>
-
-          {/* Diff Viewer Tab */}
-          <TabsContent value="diff" className="flex-1 overflow-hidden mt-4">
-            {showDiff && selectedVersion && (
-              <DiffViewer
-                conversationId={conversation.id}
-                fromVersion={selectedVersion}
-                toVersion={versions.find(v => v.is_active)?.version || 1}
-                onClose={() => {
-                  setShowDiff(false)
-                  setSelectedVersion(null)
-                  setActiveTab('history')
-                }}
-              />
-            )}
-          </TabsContent>
-        </Tabs>
-      </DialogContent>
-    </Dialog>
-  )
-}
\ No newline at end of file
diff --git a/frontend/components/feedme/FeedMeModal.tsx b/frontend/components/feedme/FeedMeModal.tsx
deleted file mode 100644
index e94068b..0000000
--- a/frontend/components/feedme/FeedMeModal.tsx
+++ /dev/null
@@ -1,522 +0,0 @@
-"use client"
-
-import React, { useState, useCallback } from 'react'
-import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from '@/components/ui/dialog'
-import { Button } from '@/components/ui/button'
-import { Input } from '@/components/ui/input'
-import { Textarea } from '@/components/ui/textarea'
-import { Label } from '@/components/ui/label'
-import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
-import { Progress } from '@/components/ui/progress'
-import { Alert, AlertDescription } from '@/components/ui/alert'
-import { Upload, FileText, Loader2, AlertCircle, CheckCircle2 } from 'lucide-react'
-import { uploadTranscriptFile, uploadTranscriptText, getProcessingStatus } from '@/lib/feedme-api'
-
-interface FeedMeModalProps {
-  isOpen: boolean
-  onClose: () => void
-}
-
-interface UploadState {
-  isUploading: boolean
-  progress: number
-  error: string | null
-  success: boolean
-  conversationId?: number
-  processingStatus?: string
-}
-
-interface FilePreview {
-  isHtml: boolean
-  messageCount?: number
-  attachmentCount?: number
-  description?: string
-}
-
-export function FeedMeModal({ isOpen, onClose }: FeedMeModalProps) {
-  const [title, setTitle] = useState('')
-  const [textContent, setTextContent] = useState('')
-  const [uploadedFile, setUploadedFile] = useState<File | null>(null)
-  const [activeTab, setActiveTab] = useState('file')
-  const [isDragActive, setIsDragActive] = useState(false)
-  const [filePreview, setFilePreview] = useState<FilePreview | null>(null)
-  const [uploadState, setUploadState] = useState<UploadState>({
-    isUploading: false,
-    progress: 0,
-    error: null,
-    success: false
-  })
-
-  const userId = process.env.NEXT_PUBLIC_FEEDME_USER_ID || 'web-user'
-
-  // File validation helper
-  const validateFile = (file: File) => {
-    // Validate file type (text files and HTML)
-    const allowedTypes = ['text/plain', 'text/html', 'application/html', 'text/csv']
-    const allowedExtensions = ['.txt', '.log', '.html', '.htm', '.csv']
-    
-    const hasValidType = file.type === '' || allowedTypes.includes(file.type) || file.type.startsWith('text/')
-    const hasValidExtension = allowedExtensions.some(ext => file.name.toLowerCase().endsWith(ext))
-    
-    if (!hasValidType && !hasValidExtension) {
-      setUploadState(prev => ({
-        ...prev,
-        error: 'Please upload a text or HTML file (.txt, .log, .html, .htm, or plain text)'
-      }))
-      return false
-    }
-
-    // Validate file size (10MB limit as per settings)
-    const maxSize = 10 * 1024 * 1024 // 10MB
-    if (file.size > maxSize) {
-      setUploadState(prev => ({
-        ...prev,
-        error: 'File size must be less than 10MB'
-      }))
-      return false
-    }
-
-    return true
-  }
-
-  // HTML file analysis helper
-  const analyzeHtmlFile = async (file: File): Promise<FilePreview> => {
-    try {
-      const content = await file.text()
-      const parser = new DOMParser()
-      const doc = parser.parseFromString(content, 'text/html')
-      
-      // Check if it's a Zendesk ticket
-      const zendeskSelectors = [
-        '.zd-comment',
-        '[data-test-id="ticket-title"]',
-        '[data-creator-name]',
-        'meta[name="generator"][content*="Zendesk"]',
-        '#zendesk',
-        '.zendesk'
-      ]
-      const hasZendeskMarker = zendeskSelectors.some(sel => doc.querySelector(sel))
-      const isZendeskTicket = hasZendeskMarker || /zendesk|zd-comment/i.test(content)
-      
-      if (isZendeskTicket) {
-        // Count zd-comment divs (support messages)
-        const commentDivs = doc.querySelectorAll('div.zd-comment, .zd-comment')
-        
-        // Count potential attachment links/references
-        const attachmentLinks = doc.querySelectorAll('a[href*="attachment"], a[href*="download"], img')
-        
-        // Look for main email body content
-        const mainBody = doc.querySelector('#html')
-        const hasMainContent = mainBody && mainBody.textContent && mainBody.textContent.trim().length > 50
-        
-        const messageCount = commentDivs.length + (hasMainContent ? 1 : 0)
-        
-        return {
-          isHtml: true,
-          messageCount,
-          attachmentCount: attachmentLinks.length,
-          description: `Zendesk ticket detected – ${messageCount} message${messageCount !== 1 ? 's' : ''}, ${attachmentLinks.length} attachment${attachmentLinks.length !== 1 ? 's' : ''}`
-        }
-      } else {
-        // Generic HTML file
-        const textLength = doc.body?.textContent?.length || 0
-        return {
-          isHtml: true,
-          description: `HTML file detected – ${Math.round(textLength / 100)} content blocks`
-        }
-      }
-    } catch (error) {
-      console.warn('Error analyzing HTML file:', error)
-      return {
-        isHtml: true,
-        description: 'HTML file detected'
-      }
-    }
-  }
-
-  // Handle file selection
-  const handleFileSelect = async (file: File) => {
-    if (validateFile(file)) {
-      setUploadedFile(file)
-      setUploadState(prev => ({ ...prev, error: null }))
-      
-      // Auto-generate title from filename if not set
-      if (!title.trim()) {
-        const fileName = file.name.replace(/\.(txt|log|html|htm)$/i, '')
-        setTitle(fileName)
-      }
-
-      // Analyze HTML files for preview
-      const isHtmlFile = file.name.toLowerCase().endsWith('.html') || 
-                        file.name.toLowerCase().endsWith('.htm') ||
-                        file.type.includes('html')
-      
-      if (isHtmlFile) {
-        try {
-          const preview = await analyzeHtmlFile(file)
-          setFilePreview(preview)
-        } catch (error) {
-          console.warn('Error analyzing HTML file:', error)
-          setFilePreview({
-            isHtml: true,
-            description: 'HTML file detected'
-          })
-        }
-      } else {
-        setFilePreview(null)
-      }
-    }
-  }
-
-  // Native drag and drop handlers
-  const handleDragEnter = (e: React.DragEvent) => {
-    e.preventDefault()
-    e.stopPropagation()
-    setIsDragActive(true)
-  }
-
-  const handleDragLeave = (e: React.DragEvent) => {
-    e.preventDefault()
-    e.stopPropagation()
-    setIsDragActive(false)
-  }
-
-  const handleDragOver = (e: React.DragEvent) => {
-    e.preventDefault()
-    e.stopPropagation()
-  }
-
-  const handleDrop = (e: React.DragEvent) => {
-    e.preventDefault()
-    e.stopPropagation()
-    setIsDragActive(false)
-
-    const files = Array.from(e.dataTransfer.files)
-    if (files.length > 0) {
-      handleFileSelect(files[0])
-    }
-  }
-
-  // Handle file input change
-  const handleFileInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
-    const files = e.target.files
-    if (files && files.length > 0) {
-      handleFileSelect(files[0])
-    }
-  }
-
-  // Reset form
-  const resetForm = () => {
-    setTitle('')
-    setTextContent('')
-    setUploadedFile(null)
-    setFilePreview(null)
-    setActiveTab('file')
-    setUploadState({
-      isUploading: false,
-      progress: 0,
-      error: null,
-      success: false
-    })
-  }
-
-  // Handle modal close
-  const handleClose = () => {
-    if (!uploadState.isUploading) {
-      resetForm()
-      onClose()
-    }
-  }
-
-  // Form validation
-  const isValid = () => {
-    if (!title.trim()) return false
-    if (activeTab === 'file' && !uploadedFile) return false
-    if (activeTab === 'text' && !textContent.trim()) return false
-    return true
-  }
-
-  // Handle form submission
-  const handleSubmit = async (e: React.FormEvent) => {
-    e.preventDefault()
-    
-    if (!isValid()) {
-      setUploadState(prev => ({
-        ...prev,
-        error: 'Please fill in all required fields'
-      }))
-      return
-    }
-
-    setUploadState({
-      isUploading: true,
-      progress: 20,
-      error: null,
-      success: false
-    })
-
-    try {
-      let uploadResponse
-
-      if (activeTab === 'file' && uploadedFile) {
-        // Upload file
-        setUploadState(prev => ({ ...prev, progress: 40 }))
-        uploadResponse = await uploadTranscriptFile(title, uploadedFile, userId, true)
-      } else if (activeTab === 'text' && textContent) {
-        // Upload text content
-        setUploadState(prev => ({ ...prev, progress: 40 }))
-        uploadResponse = await uploadTranscriptText(title, textContent, userId, true)
-      } else {
-        throw new Error('Invalid upload data')
-      }
-
-      setUploadState(prev => ({ 
-        ...prev, 
-        progress: 60,
-        conversationId: uploadResponse.id,
-        processingStatus: uploadResponse.processing_status
-      }))
-
-      // Poll for processing completion with exponential backoff
-      setUploadState(prev => ({ ...prev, progress: 80 }))
-      let delay = 1000
-      let statusResponse: any = null
-      while (true) {
-        try {
-          statusResponse = await getProcessingStatus(uploadResponse.id)
-          setUploadState(prev => ({
-            ...prev,
-            processingStatus: statusResponse.status
-          }))
-          if (statusResponse.status !== 'processing') {
-            break
-          }
-        } catch (statusError) {
-          console.warn('Status check failed:', statusError)
-          break
-        }
-        await new Promise(resolve => setTimeout(resolve, delay))
-        delay = Math.min(delay * 2, 10000)
-      }
-
-      setUploadState(prev => ({
-        ...prev,
-        progress: 100,
-        processingStatus: statusResponse?.status || prev.processingStatus
-      }))
-
-      setUploadState(prev => ({
-        ...prev,
-        isUploading: false,
-        success: true
-      }))
-
-      // Auto-close after success
-      setTimeout(() => {
-        handleClose()
-      }, 3000)
-
-    } catch (error) {
-      console.error('Upload failed:', error)
-      setUploadState({
-        isUploading: false,
-        progress: 0,
-        error: error instanceof Error ? error.message : 'Upload failed. Please try again.',
-        success: false
-      })
-    }
-  }
-
-  return (
-    <Dialog
-      open={isOpen}
-      onOpenChange={(open) => {
-        if (!open && !uploadState.isUploading) {
-          handleClose()
-        }
-      }}
-    >
-      <DialogContent className="sm:max-w-[600px] max-h-[80vh] overflow-y-auto">
-        <DialogHeader>
-          <DialogTitle className="flex items-center gap-2 text-accent">
-            <Upload className="h-5 w-5" />
-            FeedMe - Upload Customer Support Transcript
-          </DialogTitle>
-          <DialogDescription>
-            Upload customer support transcripts to help improve our knowledge base.
-            Accepted formats: .txt, .log, .html, .htm, or plain text.
-          </DialogDescription>
-        </DialogHeader>
-
-        <form onSubmit={handleSubmit} className="space-y-6">
-          {/* Title Field */}
-          <div className="space-y-2">
-            <Label htmlFor="title">Conversation Title *</Label>
-            <Input
-              id="title"
-              placeholder="e.g., Email Setup Issue - Customer #12345"
-              value={title}
-              onChange={(e) => setTitle(e.target.value)}
-              disabled={uploadState.isUploading}
-              className="focus-visible:ring-accent"
-            />
-          </div>
-
-          {/* Upload Tabs */}
-          <Tabs value={activeTab} onValueChange={setActiveTab}>
-            <TabsList className="grid w-full grid-cols-2">
-              <TabsTrigger value="file" disabled={uploadState.isUploading}>
-                <FileText className="h-4 w-4 mr-2" />
-                Upload File
-              </TabsTrigger>
-              <TabsTrigger value="text" disabled={uploadState.isUploading}>
-                <Upload className="h-4 w-4 mr-2" />
-                Paste Text
-              </TabsTrigger>
-            </TabsList>
-
-            {/* File Upload Tab */}
-            <TabsContent value="file" className="space-y-4">
-              <div
-                onDragEnter={handleDragEnter}
-                onDragLeave={handleDragLeave}
-                onDragOver={handleDragOver}
-                onDrop={handleDrop}
-                onClick={() => document.getElementById('file-input')?.click()}
-                className={`
-                  border-2 border-dashed rounded-lg p-8 text-center cursor-pointer transition-colors
-                  ${isDragActive ? 'border-accent bg-accent/5' : 'border-muted-foreground/25'}
-                  ${uploadedFile ? 'border-accent bg-accent/5' : ''}
-                  ${uploadState.isUploading ? 'pointer-events-none opacity-50' : 'hover:border-accent hover:bg-accent/5'}
-                `}
-              >
-                <input
-                  id="file-input"
-                  type="file"
-                  accept=".txt,.log,.html,.htm,text/*"
-                  onChange={handleFileInputChange}
-                  className="hidden"
-                  disabled={uploadState.isUploading}
-                />
-                <div className="space-y-2">
-                  {uploadedFile ? (
-                    <>
-                      <CheckCircle2 className="h-8 w-8 text-accent mx-auto" />
-                      <p className="text-sm font-medium">{uploadedFile.name}</p>
-                      <p className="text-xs text-muted-foreground">
-                        {(uploadedFile.size / 1024).toFixed(1)} KB
-                      </p>
-                      {filePreview && filePreview.description && (
-                        <div className="mt-2 p-2 bg-blue-50 border border-blue-200 rounded-md">
-                          <p className="text-xs text-blue-700 font-medium">
-                            {filePreview.description}
-                          </p>
-                        </div>
-                      )}
-                    </>
-                  ) : (
-                    <>
-                      <Upload className="h-8 w-8 text-muted-foreground mx-auto" />
-                      <p className="text-sm font-medium">
-                        {isDragActive ? 'Drop the file here...' : 'Drag and drop a file here, or click to select'}
-                      </p>
-                      <p className="text-xs text-muted-foreground">
-                        Supports .txt, .log, .html, .htm files up to 10MB
-                      </p>
-                    </>
-                  )}
-                </div>
-              </div>
-            </TabsContent>
-
-            {/* Text Input Tab */}
-            <TabsContent value="text" className="space-y-4">
-              <div className="space-y-2">
-                <Label htmlFor="textContent">Transcript Content *</Label>
-                <Textarea
-                  id="textContent"
-                  placeholder="Paste your customer support transcript here..."
-                  value={textContent}
-                  onChange={(e) => setTextContent(e.target.value)}
-                  disabled={uploadState.isUploading}
-                  className="min-h-[200px] focus-visible:ring-accent"
-                />
-                <p className="text-xs text-muted-foreground">
-                  {textContent.length} characters
-                </p>
-              </div>
-            </TabsContent>
-          </Tabs>
-
-          {/* Upload Progress */}
-          {uploadState.isUploading && (
-            <div className="space-y-2">
-              <div className="flex items-center justify-between text-sm">
-                <span>Uploading transcript...</span>
-                <span>{uploadState.progress}%</span>
-              </div>
-              <Progress value={uploadState.progress} className="h-2" />
-            </div>
-          )}
-
-          {/* Error Alert */}
-          {uploadState.error && (
-            <Alert variant="destructive">
-              <AlertCircle className="h-4 w-4" />
-              <AlertDescription>{uploadState.error}</AlertDescription>
-            </Alert>
-          )}
-
-          {/* Success Alert */}
-          {uploadState.success && (
-            <Alert className="border-green-200 text-green-800 bg-green-50">
-              <CheckCircle2 className="h-4 w-4" />
-              <AlertDescription>
-                Transcript uploaded successfully! 
-                {uploadState.conversationId && (
-                  <> Conversation ID: {uploadState.conversationId}.</>
-                )}
-                {uploadState.processingStatus && (
-                  <> Status: {uploadState.processingStatus}.</>
-                )}
-                {uploadState.processingStatus === 'completed' 
-                  ? ' Processing complete - examples are now available for searches!'
-                  : ' Processing will continue in the background.'
-                }
-              </AlertDescription>
-            </Alert>
-          )}
-
-          {/* Action Buttons */}
-          <div className="flex justify-end gap-3 pt-4 border-t">
-            <Button
-              type="button"
-              variant="outline"
-              onClick={handleClose}
-              disabled={uploadState.isUploading}
-            >
-              Cancel
-            </Button>
-            <Button
-              type="submit"
-              disabled={!isValid() || uploadState.isUploading}
-              className="bg-accent hover:bg-accent/90"
-            >
-              {uploadState.isUploading ? (
-                <>
-                  <Loader2 className="h-4 w-4 mr-2 animate-spin" />
-                  Uploading...
-                </>
-              ) : (
-                <>
-                  <Upload className="h-4 w-4 mr-2" />
-                  Upload Transcript
-                </>
-              )}
-            </Button>
-          </div>
-        </form>
-      </DialogContent>
-    </Dialog>
-  )
-}
\ No newline at end of file
diff --git a/frontend/components/feedme/FileGridView.tsx b/frontend/components/feedme/FileGridView.tsx
deleted file mode 100644
index 33c442b..0000000
--- a/frontend/components/feedme/FileGridView.tsx
+++ /dev/null
@@ -1,689 +0,0 @@
-/**
- * FileGridView Component
- * 
- * Grid layout with thumbnail previews, multi-select with keyboard shortcuts,
- * bulk operations panel, file type indicators, and processing status.
- * 
- * Part of FeedMe v2.0 Phase 3B: Enhanced Folder Management
- */
-
-'use client'
-
-import React, { useState, useCallback, useMemo, useRef, useEffect } from 'react'
-import { FixedSizeGrid as Grid } from 'react-window'
-import { 
-  FileText, File, Upload, CheckCircle2, AlertCircle, Clock, 
-  MoreHorizontal, Eye, Edit, Trash2, Download, Move, Filter,
-  Grid3X3, List, Table, Search, X, ChevronDown
-} from 'lucide-react'
-import { useConversations, useActions, useUI } from '@/lib/stores/feedme-store'
-import type { Conversation } from '@/lib/stores/feedme-store'
-import { cn } from '@/lib/utils'
-import { Button } from '@/components/ui/button'
-import { Card, CardContent } from '@/components/ui/card'
-import { Badge } from '@/components/ui/badge'
-import { Checkbox } from '@/components/ui/checkbox'
-import { Input } from '@/components/ui/input'
-import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
-import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuSeparator, DropdownMenuTrigger } from '@/components/ui/dropdown-menu'
-import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip'
-import { Separator } from '@/components/ui/separator'
-import { Progress } from '@/components/ui/progress'
-
-// Types
-interface FileGridViewProps {
-  height?: number
-  className?: string
-  onFileSelect?: (fileId: number) => void
-  onFilePreview?: (fileId: number) => void
-  onFileEdit?: (fileId: number) => void
-  onFileDelete?: (fileId: number) => void
-  onFileMove?: (fileIds: number[], targetFolderId: number) => void
-  onBulkAction?: (action: string, fileIds: number[]) => void
-  enableMultiSelect?: boolean
-  enableBulkActions?: boolean
-  showThumbnails?: boolean
-  itemSize?: number
-  columnsCount?: number
-}
-
-interface GridItemProps {
-  columnIndex: number
-  rowIndex: number
-  style: React.CSSProperties
-  data: {
-    conversations: Conversation[]
-    columnsCount: number
-    onSelect: (id: number, event: React.MouseEvent) => void
-    onPreview: (id: number) => void
-    onEdit: (id: number) => void
-    onDelete: (id: number) => void
-    selectedIds: Set<number>
-    enableMultiSelect: boolean
-    showThumbnails: boolean
-  }
-}
-
-// File Status Component
-const FileStatus: React.FC<{ 
-  status: Conversation['processing_status'], 
-  progress?: number,
-  size?: 'sm' | 'md' 
-}> = ({ status, progress, size = 'md' }) => {
-  const iconSize = size === 'sm' ? 'h-3 w-3' : 'h-4 w-4'
-  
-  switch (status) {
-    case 'completed':
-      return (
-        <TooltipProvider>
-          <Tooltip>
-            <TooltipTrigger>
-              <CheckCircle2 className={cn(iconSize, 'text-green-500')} />
-            </TooltipTrigger>
-            <TooltipContent>
-              <p>Processing completed</p>
-            </TooltipContent>
-          </Tooltip>
-        </TooltipProvider>
-      )
-    case 'processing':
-      return (
-        <TooltipProvider>
-          <Tooltip>
-            <TooltipTrigger>
-              <div className="flex items-center gap-1">
-                <Clock className={cn(iconSize, 'text-blue-500 animate-spin')} />
-                {progress !== undefined && (
-                  <span className="text-xs">{Math.round(progress)}%</span>
-                )}
-              </div>
-            </TooltipTrigger>
-            <TooltipContent>
-              <p>Processing in progress{progress ? ` (${Math.round(progress)}%)` : ''}</p>
-            </TooltipContent>
-          </Tooltip>
-        </TooltipProvider>
-      )
-    case 'failed':
-      return (
-        <TooltipProvider>
-          <Tooltip>
-            <TooltipTrigger>
-              <AlertCircle className={cn(iconSize, 'text-red-500')} />
-            </TooltipTrigger>
-            <TooltipContent>
-              <p>Processing failed</p>
-            </TooltipContent>
-          </Tooltip>
-        </TooltipProvider>
-      )
-    default:
-      return (
-        <TooltipProvider>
-          <Tooltip>
-            <TooltipTrigger>
-              <Upload className={cn(iconSize, 'text-gray-400')} />
-            </TooltipTrigger>
-            <TooltipContent>
-              <p>Pending processing</p>
-            </TooltipContent>
-          </Tooltip>
-        </TooltipProvider>
-      )
-  }
-}
-
-// File Type Icon Component
-const FileTypeIcon: React.FC<{ 
-  filename: string, 
-  mimeType?: string,
-  size?: 'sm' | 'md' | 'lg' 
-}> = ({ filename, mimeType, size = 'md' }) => {
-  const iconSize = size === 'sm' ? 'h-4 w-4' : size === 'md' ? 'h-6 w-6' : 'h-8 w-8'
-  
-  if (mimeType?.startsWith('text/') || filename.endsWith('.txt') || filename.endsWith('.log')) {
-    return <FileText className={cn(iconSize, 'text-blue-500')} />
-  }
-  
-  return <File className={cn(iconSize, 'text-gray-500')} />
-}
-
-// Quality Score Badge
-const QualityScoreBadge: React.FC<{ score?: number }> = ({ score }) => {
-  if (score === undefined) return null
-  
-  const variant = score >= 0.8 ? 'default' : score >= 0.6 ? 'secondary' : 'destructive'
-  const color = score >= 0.8 ? 'text-green-600' : score >= 0.6 ? 'text-yellow-600' : 'text-red-600'
-  
-  return (
-    <Badge variant={variant} className={cn('text-xs', color)}>
-      {Math.round(score * 100)}%
-    </Badge>
-  )
-}
-
-// Grid Item Component
-const GridItem: React.FC<GridItemProps> = ({ columnIndex, rowIndex, style, data }) => {
-  const {
-    conversations,
-    columnsCount,
-    onSelect,
-    onPreview,
-    onEdit,
-    onDelete,
-    selectedIds,
-    enableMultiSelect,
-    showThumbnails
-  } = data
-
-  const index = rowIndex * columnsCount + columnIndex
-  const conversation = conversations[index]
-  
-  if (!conversation) {
-    return <div style={style} />
-  }
-
-  const isSelected = selectedIds.has(conversation.id)
-  const [isHovered, setIsHovered] = useState(false)
-
-  const handleClick = useCallback((e: React.MouseEvent) => {
-    onSelect(conversation.id, e)
-  }, [conversation.id, onSelect])
-
-  const handlePreview = useCallback((e: React.MouseEvent) => {
-    e.stopPropagation()
-    onPreview(conversation.id)
-  }, [conversation.id, onPreview])
-
-  const handleEdit = useCallback((e: React.MouseEvent) => {
-    e.stopPropagation()
-    onEdit(conversation.id)
-  }, [conversation.id, onEdit])
-
-  const handleDelete = useCallback((e: React.MouseEvent) => {
-    e.stopPropagation()
-    onDelete(conversation.id)
-  }, [conversation.id, onDelete])
-
-  return (
-    <div style={style} className="p-1">
-      <Card
-        className={cn(
-          'h-full cursor-pointer transition-all duration-200',
-          'hover:shadow-md hover:scale-[1.02]',
-          isSelected && 'ring-2 ring-accent shadow-md',
-          'group'
-        )}
-        onClick={handleClick}
-        onMouseEnter={() => setIsHovered(true)}
-        onMouseLeave={() => setIsHovered(false)}
-      >
-        <CardContent className="p-3 h-full flex flex-col">
-          {/* Header */}
-          <div className="flex items-start justify-between mb-2">
-            <div className="flex items-center gap-2 min-w-0 flex-1">
-              {enableMultiSelect && (
-                <Checkbox
-                  checked={isSelected}
-                  onChange={() => {}}
-                  className="flex-shrink-0"
-                  onClick={(e) => e.stopPropagation()}
-                />
-              )}
-              <FileTypeIcon 
-                filename={conversation.original_filename || 'unknown'} 
-                size="sm"
-              />
-            </div>
-            <div className="flex items-center gap-1">
-              <FileStatus 
-                status={conversation.processing_status} 
-                size="sm"
-              />
-              {(isHovered || isSelected) && (
-                <DropdownMenu>
-                  <DropdownMenuTrigger asChild>
-                    <Button
-                      variant="ghost"
-                      size="sm"
-                      className="h-6 w-6 p-0 opacity-0 group-hover:opacity-100 transition-opacity"
-                      onClick={(e) => e.stopPropagation()}
-                    >
-                      <MoreHorizontal className="h-3 w-3" />
-                    </Button>
-                  </DropdownMenuTrigger>
-                  <DropdownMenuContent align="end">
-                    <DropdownMenuItem onClick={handlePreview}>
-                      <Eye className="h-3 w-3 mr-2" />
-                      Preview
-                    </DropdownMenuItem>
-                    <DropdownMenuItem onClick={handleEdit}>
-                      <Edit className="h-3 w-3 mr-2" />
-                      Edit
-                    </DropdownMenuItem>
-                    <DropdownMenuItem>
-                      <Download className="h-3 w-3 mr-2" />
-                      Download
-                    </DropdownMenuItem>
-                    <DropdownMenuItem>
-                      <Move className="h-3 w-3 mr-2" />
-                      Move
-                    </DropdownMenuItem>
-                    <DropdownMenuSeparator />
-                    <DropdownMenuItem 
-                      onClick={handleDelete}
-                      className="text-destructive"
-                    >
-                      <Trash2 className="h-3 w-3 mr-2" />
-                      Delete
-                    </DropdownMenuItem>
-                  </DropdownMenuContent>
-                </DropdownMenu>
-              )}
-            </div>
-          </div>
-
-          {/* Thumbnail or Preview */}
-          {showThumbnails && (
-            <div className="flex-1 mb-2 min-h-[80px] bg-muted/30 rounded flex items-center justify-center">
-              <FileTypeIcon 
-                filename={conversation.original_filename || 'unknown'} 
-                size="lg"
-              />
-            </div>
-          )}
-
-          {/* Content */}
-          <div className="flex-1 min-h-0">
-            <h4 className="text-sm font-medium mb-1 truncate" title={conversation.title}>
-              {conversation.title}
-            </h4>
-            <p className="text-xs text-muted-foreground mb-2 line-clamp-2">
-              {conversation.original_filename}
-            </p>
-            
-            {/* Progress Bar for Processing */}
-            {conversation.processing_status === 'processing' && conversation.examples_extracted !== undefined && (
-              <Progress 
-                value={conversation.examples_extracted} 
-                className="h-1 mb-2" 
-              />
-            )}
-
-            {/* Metadata */}
-            <div className="flex items-center justify-between text-xs text-muted-foreground">
-              <span>
-                {conversation.examples_extracted || 0} examples
-              </span>
-              <QualityScoreBadge score={conversation.quality_score} />
-            </div>
-          </div>
-
-          {/* Footer */}
-          <div className="flex items-center justify-between mt-2 pt-2 border-t">
-            <span className="text-xs text-muted-foreground">
-              {new Date(conversation.created_at).toLocaleDateString()}
-            </span>
-            {conversation.updated_at && (
-              <span className="text-xs text-muted-foreground">
-                {new Date(conversation.updated_at).toLocaleDateString()}
-              </span>
-            )}
-          </div>
-        </CardContent>
-      </Card>
-    </div>
-  )
-}
-
-// Bulk Actions Panel
-const BulkActionsPanel: React.FC<{
-  selectedCount: number
-  onAction: (action: string) => void
-  onClear: () => void
-}> = ({ selectedCount, onAction, onClear }) => {
-  if (selectedCount === 0) return null
-
-  return (
-    <div className="flex items-center justify-between p-3 bg-accent/10 border rounded-lg">
-      <div className="flex items-center gap-2">
-        <span className="text-sm font-medium">
-          {selectedCount} file{selectedCount === 1 ? '' : 's'} selected
-        </span>
-        <Button variant="ghost" size="sm" onClick={onClear}>
-          <X className="h-3 w-3" />
-        </Button>
-      </div>
-      <div className="flex items-center gap-2">
-        <Button variant="outline" size="sm" onClick={() => onAction('move')}>
-          <Move className="h-3 w-3 mr-1" />
-          Move
-        </Button>
-        <Button variant="outline" size="sm" onClick={() => onAction('download')}>
-          <Download className="h-3 w-3 mr-1" />
-          Download
-        </Button>
-        <Button 
-          variant="outline" 
-          size="sm" 
-          onClick={() => onAction('delete')}
-          className="text-destructive"
-        >
-          <Trash2 className="h-3 w-3 mr-1" />
-          Delete
-        </Button>
-      </div>
-    </div>
-  )
-}
-
-// Main Component
-export const FileGridView: React.FC<FileGridViewProps> = ({
-  height = 600,
-  className,
-  onFileSelect,
-  onFilePreview,
-  onFileEdit,
-  onFileDelete,
-  onFileMove,
-  onBulkAction,
-  enableMultiSelect = true,
-  enableBulkActions = true,
-  showThumbnails = true,
-  itemSize = 200,
-  columnsCount = 4
-}) => {
-  const { items: conversations, isLoading } = useConversations()
-  const { selectedConversations, viewMode } = useUI()
-  const { selectConversation, selectAllConversations, setViewMode } = useActions()
-
-  const [searchQuery, setSearchQuery] = useState('')
-  const [sortBy, setSortBy] = useState<'name' | 'date' | 'size' | 'status'>('date')
-  const [filterBy, setFilterBy] = useState<'all' | 'completed' | 'processing' | 'failed'>('all')
-  
-  const gridRef = useRef<Grid>(null)
-
-  // Filter and sort conversations
-  const filteredConversations = useMemo(() => {
-    let filtered = [...conversations]
-
-    // Search filter
-    if (searchQuery.trim()) {
-      const query = searchQuery.toLowerCase()
-      filtered = filtered.filter(conv => 
-        conv.title.toLowerCase().includes(query) ||
-        (conv.original_filename || '').toLowerCase().includes(query)
-      )
-    }
-
-    // Status filter
-    if (filterBy !== 'all') {
-      filtered = filtered.filter(conv => conv.processing_status === filterBy)
-    }
-
-    // Sort
-    filtered.sort((a, b) => {
-      switch (sortBy) {
-        case 'name':
-          return a.title.localeCompare(b.title)
-        case 'date':
-          return new Date(b.created_at).getTime() - new Date(a.created_at).getTime()
-        case 'size':
-          return (b.examples_extracted || 0) - (a.examples_extracted || 0)
-        case 'status':
-          return (a.processing_status || '').localeCompare(b.processing_status || '')
-        default:
-          return 0
-      }
-    })
-
-    return filtered
-  }, [conversations, searchQuery, sortBy, filterBy])
-
-  // Calculate grid dimensions
-  const actualColumnsCount = Math.max(1, Math.floor((window.innerWidth - 100) / itemSize))
-  const rowCount = Math.ceil(filteredConversations.length / actualColumnsCount)
-
-  // Event handlers
-  const handleSelect = useCallback((id: number, event: React.MouseEvent) => {
-    if (enableMultiSelect && (event.ctrlKey || event.metaKey)) {
-      const isSelected = selectedConversations.includes(id)
-      selectConversation(id, !isSelected)
-    } else if (enableMultiSelect && event.shiftKey && selectedConversations.length > 0) {
-      // Shift-click multi-select
-      const lastSelected = selectedConversations[selectedConversations.length - 1]
-      const startIndex = filteredConversations.findIndex(c => c.id === lastSelected)
-      const endIndex = filteredConversations.findIndex(c => c.id === id)
-      
-      const [start, end] = startIndex <= endIndex ? [startIndex, endIndex] : [endIndex, startIndex]
-      
-      for (let i = start; i <= end; i++) {
-        selectConversation(filteredConversations[i].id, true)
-      }
-    } else {
-      // Clear other selections and select this one
-      selectedConversations.forEach(selectedId => {
-        if (selectedId !== id) {
-          selectConversation(selectedId, false)
-        }
-      })
-      selectConversation(id, true)
-      onFileSelect?.(id)
-    }
-  }, [enableMultiSelect, selectedConversations, selectConversation, onFileSelect, filteredConversations])
-
-  const handlePreview = useCallback((id: number) => {
-    onFilePreview?.(id)
-  }, [onFilePreview])
-
-  const handleEdit = useCallback((id: number) => {
-    onFileEdit?.(id)
-  }, [onFileEdit])
-
-  const handleDelete = useCallback((id: number) => {
-    if (window.confirm('Are you sure you want to delete this file?')) {
-      onFileDelete?.(id)
-    }
-  }, [onFileDelete])
-
-  const handleBulkAction = useCallback((action: string) => {
-    onBulkAction?.(action, selectedConversations)
-  }, [onBulkAction, selectedConversations])
-
-  const handleClearSelection = useCallback(() => {
-    selectAllConversations(false)
-  }, [selectAllConversations])
-
-  const handleSelectAll = useCallback(() => {
-    const allSelected = filteredConversations.every(c => selectedConversations.includes(c.id))
-    if (allSelected) {
-      selectAllConversations(false)
-    } else {
-      filteredConversations.forEach(c => selectConversation(c.id, true))
-    }
-  }, [filteredConversations, selectedConversations, selectAllConversations, selectConversation])
-
-  // Keyboard shortcuts
-  useEffect(() => {
-    const handleKeyDown = (e: KeyboardEvent) => {
-      if ((e.ctrlKey || e.metaKey) && e.key === 'a') {
-        e.preventDefault()
-        handleSelectAll()
-      }
-      if (e.key === 'Escape') {
-        handleClearSelection()
-      }
-    }
-
-    document.addEventListener('keydown', handleKeyDown)
-    return () => document.removeEventListener('keydown', handleKeyDown)
-  }, [handleSelectAll, handleClearSelection])
-
-  const selectedIdsSet = useMemo(() => new Set(selectedConversations), [selectedConversations])
-
-  const itemData = useMemo(() => ({
-    conversations: filteredConversations,
-    columnsCount: actualColumnsCount,
-    onSelect: handleSelect,
-    onPreview: handlePreview,
-    onEdit: handleEdit,
-    onDelete: handleDelete,
-    selectedIds: selectedIdsSet,
-    enableMultiSelect,
-    showThumbnails
-  }), [
-    filteredConversations,
-    actualColumnsCount,
-    handleSelect,
-    handlePreview,
-    handleEdit,
-    handleDelete,
-    selectedIdsSet,
-    enableMultiSelect,
-    showThumbnails
-  ])
-
-  return (
-    <div className={cn('flex flex-col h-full', className)}>
-      {/* Toolbar */}
-      <div className="flex items-center justify-between p-4 border-b">
-        <div className="flex items-center gap-2">
-          <div className="relative">
-            <Search className="absolute left-2 top-1/2 transform -translate-y-1/2 h-3 w-3 text-muted-foreground" />
-            <Input
-              placeholder="Search files..."
-              value={searchQuery}
-              onChange={(e) => setSearchQuery(e.target.value)}
-              className="pl-7 w-48"
-            />
-          </div>
-          <Select value={filterBy} onValueChange={(value: any) => setFilterBy(value)}>
-            <SelectTrigger className="w-32">
-              <SelectValue />
-            </SelectTrigger>
-            <SelectContent>
-              <SelectItem value="all">All files</SelectItem>
-              <SelectItem value="completed">Completed</SelectItem>
-              <SelectItem value="processing">Processing</SelectItem>
-              <SelectItem value="failed">Failed</SelectItem>
-            </SelectContent>
-          </Select>
-          <Select value={sortBy} onValueChange={(value: any) => setSortBy(value)}>
-            <SelectTrigger className="w-32">
-              <SelectValue />
-            </SelectTrigger>
-            <SelectContent>
-              <SelectItem value="date">Date</SelectItem>
-              <SelectItem value="name">Name</SelectItem>
-              <SelectItem value="size">Size</SelectItem>
-              <SelectItem value="status">Status</SelectItem>
-            </SelectContent>
-          </Select>
-        </div>
-
-        <div className="flex items-center gap-2">
-          {enableMultiSelect && (
-            <Button
-              variant="outline"
-              size="sm"
-              onClick={handleSelectAll}
-              disabled={filteredConversations.length === 0}
-            >
-              Select All
-            </Button>
-          )}
-          <div className="flex items-center border rounded-md">
-            <Button
-              variant={viewMode === 'grid' ? 'default' : 'ghost'}
-              size="sm"
-              onClick={() => setViewMode('grid')}
-              className="rounded-r-none"
-            >
-              <Grid3X3 className="h-3 w-3" />
-            </Button>
-            <Button
-              variant={viewMode === 'list' ? 'default' : 'ghost'}
-              size="sm"
-              onClick={() => setViewMode('list')}
-              className="rounded-none"
-            >
-              <List className="h-3 w-3" />
-            </Button>
-            <Button
-              variant={viewMode === 'table' ? 'default' : 'ghost'}
-              size="sm"
-              onClick={() => setViewMode('table')}
-              className="rounded-l-none"
-            >
-              <Table className="h-3 w-3" />
-            </Button>
-          </div>
-        </div>
-      </div>
-
-      {/* Bulk Actions */}
-      {enableBulkActions && (
-        <BulkActionsPanel
-          selectedCount={selectedConversations.length}
-          onAction={handleBulkAction}
-          onClear={handleClearSelection}
-        />
-      )}
-
-      {/* Grid Content */}
-      <div className="flex-1 overflow-hidden">
-        {isLoading ? (
-          <div className="flex items-center justify-center h-full">
-            <div className="text-center">
-              <Clock className="h-8 w-8 animate-spin mx-auto mb-2 text-muted-foreground" />
-              <p className="text-sm text-muted-foreground">Loading files...</p>
-            </div>
-          </div>
-        ) : filteredConversations.length > 0 ? (
-          <Grid
-            ref={gridRef}
-            columnCount={actualColumnsCount}
-            columnWidth={itemSize}
-            height={height}
-            rowCount={rowCount}
-            rowHeight={itemSize}
-            itemData={itemData}
-            width="100%"
-          >
-            {GridItem}
-          </Grid>
-        ) : (
-          <div className="flex items-center justify-center h-full">
-            <div className="text-center">
-              <FileText className="h-12 w-12 mx-auto mb-4 text-muted-foreground opacity-50" />
-              <h3 className="text-lg font-medium mb-2">No files found</h3>
-              <p className="text-sm text-muted-foreground mb-4">
-                {searchQuery ? 'Try adjusting your search criteria' : 'Upload some files to get started'}
-              </p>
-              {searchQuery && (
-                <Button variant="outline" onClick={() => setSearchQuery('')}>
-                  Clear search
-                </Button>
-              )}
-            </div>
-          </div>
-        )}
-      </div>
-
-      {/* Status Bar */}
-      <div className="flex items-center justify-between p-2 border-t text-xs text-muted-foreground">
-        <span>
-          {filteredConversations.length} of {conversations.length} files
-          {selectedConversations.length > 0 && ` · ${selectedConversations.length} selected`}
-        </span>
-        <span>
-          {conversations.filter(c => c.processing_status === 'completed').length} completed ·{' '}
-          {conversations.filter(c => c.processing_status === 'processing').length} processing ·{' '}
-          {conversations.filter(c => c.processing_status === 'failed').length} failed
-        </span>
-      </div>
-    </div>
-  )
-}
-
-export default FileGridView
\ No newline at end of file
diff --git a/frontend/components/feedme/FolderManager.tsx b/frontend/components/feedme/FolderManager.tsx
deleted file mode 100644
index 13c0170..0000000
--- a/frontend/components/feedme/FolderManager.tsx
+++ /dev/null
@@ -1,551 +0,0 @@
-/**
- * FeedMe Folder Management Component
- * Provides folder creation, editing, and organization for conversations
- * 
- * Features:
- * - Colored folder organization with preset colors
- * - Folder creation with custom names and colors
- * - Conversation assignment to folders
- * - Folder editing and deletion
- * - Visual folder browser with conversation counts
- */
-
-'use client'
-
-import React, { useState, useEffect, useRef } from 'react'
-import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from '../ui/dialog'
-import { Button } from '../ui/button'
-import { Input } from '../ui/input'
-import { Label } from '../ui/label'
-import { Textarea } from '../ui/textarea'
-import { Badge } from '../ui/badge'
-import { Alert, AlertDescription } from '../ui/alert'
-import { Tabs, TabsContent, TabsList, TabsTrigger } from '../ui/tabs'
-import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../ui/card'
-import { 
-  Folder, 
-  FolderPlus, 
-  Edit3, 
-  Trash2, 
-  Move, 
-  Loader2, 
-  Check,
-  X
-} from 'lucide-react'
-import { cn } from '../../lib/utils'
-import { toast } from '../ui/use-toast'
-import {
-  listFolders,
-  createFolder,
-  updateFolder,
-  deleteFolder,
-  assignConversationsToFolder,
-  type FeedMeFolder,
-  type FolderCreate,
-  type FolderUpdate,
-  type AssignFolderRequest
-} from '../../lib/feedme-api'
-
-interface FolderManagerProps {
-  isOpen: boolean
-  onClose: () => void
-  onFolderSelected?: (folder: FeedMeFolder | null) => void
-  selectedConversations?: number[]
-  onConversationsUpdated?: () => void
-}
-
-interface ColorOption {
-  name: string
-  value: string
-  description: string
-}
-
-const PRESET_COLORS: ColorOption[] = [
-  { name: 'Mailbird Blue', value: '#0095ff', description: 'Default blue' },
-  { name: 'Email Red', value: '#e74c3c', description: 'Email issues' },
-  { name: 'Sky Blue', value: '#3498db', description: 'Account setup' },
-  { name: 'Orange', value: '#f39c12', description: 'Performance' },
-  { name: 'Purple', value: '#9b59b6', description: 'Features' },
-  { name: 'Amber', value: '#e67e22', description: 'Bug reports' },
-  { name: 'Gray', value: '#95a5a6', description: 'General' },
-  { name: 'Green', value: '#27ae60', description: 'Resolved' },
-  { name: 'Pink', value: '#e91e63', description: 'Priority' },
-]
-
-export function FolderManager({
-  isOpen,
-  onClose,
-  onFolderSelected,
-  selectedConversations = [],
-  onConversationsUpdated
-}: FolderManagerProps) {
-  // State management
-  const [folders, setFolders] = useState<FeedMeFolder[]>([])
-  const [isLoading, setIsLoading] = useState(false)
-  const [apiError, setApiError] = useState<string | null>(null)
-  
-  // Form states
-  const [isCreating, setIsCreating] = useState(false)
-  const [editingFolder, setEditingFolder] = useState<FeedMeFolder | null>(null)
-  const [deleteConfirmFolder, setDeleteConfirmFolder] = useState<FeedMeFolder | null>(null)
-  
-  // Create/Edit form data
-  const [formData, setFormData] = useState<FolderCreate>({
-    name: '',
-    color: PRESET_COLORS[0].value,
-    description: ''
-  })
-  
-  // Assignment state
-  const [isAssigning, setIsAssigning] = useState(false)
-  const [selectedFolderForAssignment, setSelectedFolderForAssignment] = useState<number | null>(null)
-  
-  // Active tab
-  const [activeTab, setActiveTab] = useState<'browse' | 'create' | 'assign'>('browse')
-
-  const nameInputRef = useRef<HTMLInputElement>(null)
-
-  useEffect(() => {
-    if (activeTab === 'create' && editingFolder) {
-      // Timeout to allow tab content to render before focusing
-      setTimeout(() => nameInputRef.current?.focus(), 50)
-    }
-  }, [activeTab, editingFolder])
-
-  // Load folders on mount
-  useEffect(() => {
-    if (isOpen) {
-      loadFolders()
-      // Set default tab based on props
-      if (selectedConversations.length > 0) {
-        setActiveTab('assign')
-      } else {
-        setActiveTab('browse')
-      }
-    }
-  }, [isOpen, selectedConversations])
-
-  const loadFolders = async () => {
-    setIsLoading(true)
-    setApiError(null)
-    try {
-      const response = await listFolders()
-      setFolders(response.folders)
-    } catch (error) {
-      console.error('Failed to load folders:', error)
-      setApiError('Failed to load folders. Please check the connection and try again.')
-    } finally {
-      setIsLoading(false)
-    }
-  }
-
-  const handleCreateFolder = async () => {
-    if (!formData.name.trim()) {
-      setApiError('Folder name is required.');
-      return;
-    }
-
-    setIsCreating(true);
-    setApiError(null);
-
-    try {
-      const folderName = formData.name;
-      await createFolder(formData);
-      
-      toast({
-        title: 'Folder Created',
-        description: `"${folderName}" has been successfully created.`,
-      });
-      
-      // Reset form and switch tab before reloading data
-      setFormData({ name: '', color: PRESET_COLORS[0].value, description: '' });
-      setActiveTab('browse');
-      
-      // Refresh the folder list from the server to ensure consistency
-      await loadFolders();
-
-    } catch (error) {
-      const errorMessage = error instanceof Error ? error.message : 'An unknown error occurred.';
-      setApiError(errorMessage);
-      toast({
-        title: 'Error Creating Folder',
-        description: errorMessage,
-        variant: 'destructive',
-      });
-    } finally {
-      setIsCreating(false);
-    }
-  };
-
-  const handleEditFolder = async () => {
-    if (!editingFolder) return
-    
-    setApiError(null)
-    setIsCreating(true) // Reuse creating state for loading indicator
-    
-    try {
-      await updateFolder(editingFolder.id, formData)
-      toast({
-        title: 'Folder Updated',
-        description: `Folder "${formData.name}" was successfully updated.`,
-      })
-      await loadFolders()
-      cancelEdit()
-    } catch (error) {
-      console.error('Failed to update folder:', error)
-      setApiError('Failed to update folder. Please try again.')
-    } finally {
-      setIsCreating(false)
-    }
-  }
-
-  const handleDeleteFolder = async (folder: FeedMeFolder, moveToFolderId?: number) => {
-    setApiError(null)
-    setIsLoading(true)
-    
-    try {
-      await deleteFolder(folder.id, moveToFolderId)
-      toast({
-        title: 'Folder Deleted',
-        description: `Folder "${folder.name}" was successfully deleted.`,
-      })
-      await loadFolders()
-      setDeleteConfirmFolder(null)
-    } catch (error) {
-      console.error('Failed to delete folder:', error)
-      setApiError('Failed to delete folder. Please try again.')
-    } finally {
-      setIsLoading(false)
-    }
-  }
-
-  const handleAssignToFolder = async (folderId: number | null) => {
-    if (selectedConversations.length === 0) {
-      toast({
-        title: 'No Conversations Selected',
-        description: 'Please select conversations to assign.',
-        variant: 'destructive',
-      })
-      return
-    }
-
-    setApiError(null)
-    setIsAssigning(true)
-    setSelectedFolderForAssignment(folderId)
-
-    try {
-      const request: AssignFolderRequest = {
-        folder_id: folderId,
-        conversation_ids: selectedConversations,
-      }
-      await assignConversationsToFolder(request)
-      toast({
-        title: 'Conversations Assigned',
-        description: `${selectedConversations.length} conversations have been assigned.`,
-      })
-      if (onConversationsUpdated) {
-        onConversationsUpdated()
-      }
-      onClose()
-    } catch (error) {
-      console.error('Failed to assign conversations:', error)
-      setApiError('Failed to assign conversations. Please try again.')
-    } finally {
-      setIsAssigning(false)
-      setSelectedFolderForAssignment(null)
-    }
-  }
-  
-  const startEditFolder = (folder: FeedMeFolder) => {
-    setEditingFolder(folder)
-    setFormData({
-      name: folder.name,
-      color: folder.color,
-      description: folder.description || ''
-    })
-    setActiveTab('create') // Reuse create tab for editing
-  }
-
-  const cancelEdit = () => {
-    setEditingFolder(null)
-    setFormData({
-      name: '',
-      color: PRESET_COLORS[0].value,
-      description: ''
-    })
-    setActiveTab('browse')
-  }
-  
-  const renderContent = () => {
-    if (isLoading && folders.length === 0) {
-      return (
-        <div className="flex items-center justify-center h-64">
-          <Loader2 className="h-8 w-8 animate-spin text-gray-400" />
-          <span className="ml-3 text-gray-500">Loading folders...</span>
-        </div>
-      )
-    }
-
-    if (apiError) {
-      return (
-        <Alert variant="destructive" className="my-4">
-          <AlertDescription>{apiError}</AlertDescription>
-        </Alert>
-      )
-    }
-
-    return null
-  }
-
-  return (
-    <Dialog open={isOpen} onOpenChange={(open) => !open && onClose()}>
-      <DialogContent className="max-w-4xl h-[80vh] flex flex-col">
-        <DialogHeader>
-          <DialogTitle>Folder Management</DialogTitle>
-          <DialogDescription>
-            Organize your conversations with colored folders for better management and navigation.
-          </DialogDescription>
-        </DialogHeader>
-
-        {renderContent() || (
-          <Tabs value={activeTab} onValueChange={(value) => setActiveTab(value as any)} className="flex-grow flex flex-col">
-            <TabsList>
-              <TabsTrigger value="browse">
-                <Folder className="h-4 w-4 mr-2" />
-                Browse Folders ({folders.length})
-              </TabsTrigger>
-              <TabsTrigger value="create">
-                <FolderPlus className="h-4 w-4 mr-2" />
-                {editingFolder ? 'Edit Folder' : 'Create New Folder'}
-              </TabsTrigger>
-              {selectedConversations.length > 0 && (
-                <TabsTrigger value="assign">
-                  <Move className="h-4 w-4 mr-2" />
-                  Assign to Folder
-                </TabsTrigger>
-              )}
-            </TabsList>
-
-            {/* Browse Folders Tab */}
-            <TabsContent value="browse" className="flex-grow overflow-y-auto p-1">
-              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
-                {folders.map((folder) => (
-                  <Card key={folder.id} className="flex flex-col">
-                    <CardHeader>
-                      <CardTitle className="flex items-center gap-2">
-                        <div className="w-4 h-4 rounded-full" style={{ backgroundColor: folder.color }} />
-                        <span className="flex-1 truncate">{folder.name}</span>
-                      </CardTitle>
-                      <CardDescription>{folder.description || 'No description'}</CardDescription>
-                    </CardHeader>
-                    <CardContent className="flex-grow flex items-end justify-between">
-                      <Badge variant="secondary">{folder.conversation_count} items</Badge>
-                      <div className="flex gap-2">
-                        <Button variant="ghost" size="icon" onClick={() => startEditFolder(folder)}>
-                          <Edit3 className="h-4 w-4" />
-                        </Button>
-                        <Button variant="ghost" size="icon" className="text-red-500 hover:text-red-600" onClick={() => setDeleteConfirmFolder(folder)}>
-                          <Trash2 className="h-4 w-4" />
-                        </Button>
-                      </div>
-                    </CardContent>
-                  </Card>
-                ))}
-              </div>
-
-              {folders.length === 0 && (
-                <div className="flex items-center justify-center h-64">
-                  <div className="text-center">
-                    <Folder className="h-12 w-12 mx-auto mb-4 text-muted-foreground" />
-                    <h3 className="text-lg font-medium mb-2">No folders yet</h3>
-                    <p className="text-sm text-muted-foreground mb-4">
-                      Create your first folder to organize conversations
-                    </p>
-                    <Button onClick={() => setActiveTab('create')}>
-                      <FolderPlus className="h-4 w-4 mr-2" />
-                      Create Folder
-                    </Button>
-                  </div>
-                </div>
-              )}
-            </TabsContent>
-
-            {/* Create/Edit Folder Tab */}
-            <TabsContent value="create" className="flex-grow overflow-y-auto p-1">
-              <div className="max-w-md mx-auto">
-                <h3 className="text-lg font-medium mb-4">
-                  {editingFolder ? 'Edit Folder Details' : 'Create a New Folder'}
-                </h3>
-                <form
-                  onSubmit={(e) => {
-                    e.preventDefault()
-                    if (editingFolder) {
-                      void handleEditFolder()
-                    } else {
-                      void handleCreateFolder()
-                    }
-                  }}
-                >
-                  <div className="space-y-4">
-                    <div>
-                      <Label htmlFor="folder-name">Folder Name</Label>
-                      <Input
-                        id="folder-name"
-                        ref={nameInputRef}
-                        value={formData.name}
-                        onChange={(e) => setFormData({ ...formData, name: e.target.value })}
-                        placeholder="e.g., 'High Priority Tickets'"
-                      />
-                    </div>
-                    <div>
-                      <Label htmlFor="folder-description">Description</Label>
-                      <Textarea
-                        id="folder-description"
-                        value={formData.description || ''}
-                        onChange={(e) => setFormData({ ...formData, description: e.target.value })}
-                        placeholder="A brief description of what this folder is for"
-                      />
-                    </div>
-                    <div>
-                      <Label>Folder Color</Label>
-                      <div className="grid grid-cols-3 gap-2 mt-2">
-                        {PRESET_COLORS.map((color) => (
-                          <button
-                            type="button"
-                            key={color.value}
-                            className={cn(
-                              'p-2 rounded-md border-2 flex items-center gap-2 hover:bg-gray-50',
-                              formData.color === color.value ? 'border-blue-500 bg-blue-50' : 'border-gray-200'
-                            )}
-                            onClick={() => setFormData({ ...formData, color: color.value })}
-                          >
-                            <div className="w-5 h-5 rounded-full" style={{ backgroundColor: color.value }} />
-                            <span className="text-sm">{color.name}</span>
-                          </button>
-                        ))}
-                      </div>
-                    </div>
-                    <div className="flex gap-2">
-                      <Button type="submit" disabled={isCreating || !formData.name.trim()}>
-                        {isCreating ? (
-                          <Loader2 className="h-4 w-4 animate-spin mr-2" />
-                        ) : editingFolder ? (
-                          <Check className="h-4 w-4 mr-2" />
-                        ) : (
-                          <FolderPlus className="h-4 w-4 mr-2" />
-                        )}
-                        {editingFolder ? 'Save Changes' : 'Create Folder'}
-                      </Button>
-                      {editingFolder && (
-                        <Button variant="outline" type="button" onClick={cancelEdit}>
-                          <X className="h-4 w-4 mr-2" />
-                          Cancel
-                        </Button>
-                      )}
-                    </div>
-                  </div>
-                </form>
-              </div>
-            </TabsContent>
-
-            {/* Assign to Folder Tab */}
-            {selectedConversations.length > 0 && (
-              <TabsContent value="assign" className="flex-grow overflow-y-auto p-1">
-                <div className="max-w-md mx-auto">
-                  <div className="text-center">
-                    <h3 className="text-lg font-medium mb-2">
-                      Assign {selectedConversations.length} conversations
-                    </h3>
-                    <p className="text-muted-foreground mb-4">
-                      Choose a folder to organize these conversations
-                    </p>
-                  </div>
-
-                  <div className="space-y-2">
-                    {/* Option to remove from folders */}
-                    <button
-                      className="w-full flex items-center gap-3 p-3 rounded-md border hover:bg-gray-50 transition-colors text-left"
-                      onClick={() => handleAssignToFolder(null)}
-                      disabled={isAssigning}
-                    >
-                      <div className="w-4 h-4 rounded-full border border-gray-300 bg-gray-100" />
-                      <div className="flex-1">
-                        <div className="font-medium">No Folder</div>
-                        <div className="text-sm text-muted-foreground">Remove from all folders</div>
-                      </div>
-                    </button>
-
-                    {/* Folder options */}
-                    {folders.map((folder) => (
-                      <button
-                        key={folder.id}
-                        className="w-full flex items-center gap-3 p-3 rounded-md border hover:bg-gray-50 transition-colors text-left"
-                        onClick={() => handleAssignToFolder(folder.id)}
-                        disabled={isAssigning}
-                      >
-                        <div 
-                          className="w-4 h-4 rounded-full border border-gray-300"
-                          style={{ backgroundColor: folder.color }}
-                        />
-                        <div className="flex-1">
-                          <div className="font-medium">{folder.name}</div>
-                          <div className="text-sm text-muted-foreground">
-                            {folder.conversation_count} conversations
-                          </div>
-                        </div>
-                      </button>
-                    ))}
-                  </div>
-
-                  {isAssigning && (
-                    <div className="flex items-center justify-center py-4">
-                      <Loader2 className="h-4 w-4 animate-spin mr-2" />
-                      Assigning conversations...
-                    </div>
-                  )}
-                </div>
-              </TabsContent>
-            )}
-          </Tabs>
-        )}
-
-        {/* Delete Confirmation Dialog */}
-        {deleteConfirmFolder && (
-          <Dialog open={!!deleteConfirmFolder} onOpenChange={() => setDeleteConfirmFolder(null)}>
-            <DialogContent>
-              <DialogHeader>
-                <DialogTitle>Delete Folder</DialogTitle>
-                <DialogDescription>
-                  Are you sure you want to delete "{deleteConfirmFolder.name}"? 
-                  {deleteConfirmFolder.conversation_count > 0 && (
-                    <span className="block mt-2 text-amber-600">
-                      This folder contains {deleteConfirmFolder.conversation_count} conversations.
-                      They will be moved to "No Folder".
-                    </span>
-                  )}
-                </DialogDescription>
-              </DialogHeader>
-              <div className="flex gap-2 justify-end">
-                <Button variant="outline" onClick={() => setDeleteConfirmFolder(null)}>
-                  Cancel
-                </Button>
-                <Button 
-                  variant="destructive" 
-                  onClick={() => handleDeleteFolder(deleteConfirmFolder)}
-                  disabled={isLoading}
-                >
-                  {isLoading ? (
-                    <Loader2 className="h-4 w-4 animate-spin mr-2" />
-                  ) : (
-                    <Trash2 className="h-4 w-4 mr-2" />
-                  )}
-                  Delete Folder
-                </Button>
-              </div>
-            </DialogContent>
-          </Dialog>
-        )}
-      </DialogContent>
-    </Dialog>
-  )
-}
\ No newline at end of file
diff --git a/frontend/components/feedme/FolderTreeView.tsx b/frontend/components/feedme/FolderTreeView.tsx
deleted file mode 100644
index f7f37b9..0000000
--- a/frontend/components/feedme/FolderTreeView.tsx
+++ /dev/null
@@ -1,519 +0,0 @@
-/**
- * FolderTreeView Component
- * 
- * Hierarchical folder structure with expand/collapse functionality,
- * drag-and-drop between folders, context menus, and virtual scrolling.
- * 
- * Part of FeedMe v2.0 Phase 3B: Enhanced Folder Management
- */
-
-'use client'
-
-import React, { useState, useCallback, useMemo, useRef, useEffect } from 'react'
-import { ChevronRight, ChevronDown, Folder, FolderOpen, MoreHorizontal, Plus, Edit2, Trash2, Move } from 'lucide-react'
-import { useFeedMeStore, useActions, useFolders, useUI } from '@/lib/stores/feedme-store'
-import { cn } from '@/lib/utils'
-import { Button } from '@/components/ui/button'
-import { ContextMenu, ContextMenuContent, ContextMenuItem, ContextMenuSeparator, ContextMenuTrigger } from '@/components/ui/context-menu'
-import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuSeparator, DropdownMenuTrigger } from '@/components/ui/dropdown-menu'
-import { Input } from '@/components/ui/input'
-import { Badge } from '@/components/ui/badge'
-import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip'
-import { ScrollArea } from '@/components/ui/scroll-area'
-
-// Types
-interface TreeNode {
-  id: number
-  name: string
-  description?: string
-  parent_id?: number
-  children: TreeNode[]
-  isExpanded: boolean
-  isSelected: boolean
-  level: number
-  conversation_count: number
-  created_at: string
-  updated_at: string
-}
-
-interface FolderTreeViewProps {
-  height?: number
-  className?: string
-  onFolderSelect?: (folderId: number) => void
-  onFolderCreate?: (parentId?: number) => void
-  onFolderUpdate?: (folderId: number, updates: { name?: string; description?: string }) => void
-  onFolderDelete?: (folderId: number) => void
-  onFolderMove?: (folderId: number, newParentId?: number) => void
-  enableDragDrop?: boolean
-  enableContextMenu?: boolean
-  showItemCounts?: boolean
-}
-
-interface TreeItemProps {
-  index: number
-  style: React.CSSProperties
-  data: {
-    nodes: TreeNode[]
-    onToggle: (nodeId: number) => void
-    onSelect: (nodeId: number) => void
-    onContextMenu: (nodeId: number, event: React.MouseEvent) => void
-    onEdit: (nodeId: number) => void
-    onDelete: (nodeId: number) => void
-    onMove: (sourceId: number, targetId: number) => void
-    selectedNodes: Set<number>
-    editingNode: number | null
-    enableDragDrop: boolean
-    enableContextMenu: boolean
-    showItemCounts: boolean
-  }
-}
-
-// Drag and Drop Types
-interface DragState {
-  isDragging: boolean
-  draggedNode: TreeNode | null
-  dropTarget: TreeNode | null
-  dropPosition: 'before' | 'after' | 'inside' | null
-}
-
-// Tree Item Component
-const TreeItem: React.FC<TreeItemProps> = ({ index, style, data }) => {
-  const {
-    nodes,
-    onToggle,
-    onSelect,
-    onContextMenu,
-    onEdit,
-    onDelete,
-    onMove,
-    selectedNodes,
-    editingNode,
-    enableDragDrop,
-    enableContextMenu,
-    showItemCounts
-  } = data
-
-  const node = nodes[index]
-  const [isHovered, setIsHovered] = useState(false)
-  const [dragState, setDragState] = useState<DragState>({
-    isDragging: false,
-    draggedNode: null,
-    dropTarget: null,
-    dropPosition: null
-  })
-
-  const handleDragStart = useCallback((e: React.DragEvent, node: TreeNode) => {
-    if (!enableDragDrop) return
-    
-    e.dataTransfer.setData('application/json', JSON.stringify(node))
-    e.dataTransfer.effectAllowed = 'move'
-    setDragState(prev => ({ ...prev, isDragging: true, draggedNode: node }))
-  }, [enableDragDrop])
-
-  const handleDragOver = useCallback((e: React.DragEvent) => {
-    if (!enableDragDrop) return
-    e.preventDefault()
-    e.dataTransfer.dropEffect = 'move'
-  }, [enableDragDrop])
-
-  const handleDragEnter = useCallback((e: React.DragEvent) => {
-    if (!enableDragDrop) return
-    e.preventDefault()
-    setDragState(prev => ({ ...prev, dropTarget: node }))
-  }, [enableDragDrop, node])
-
-  const handleDragLeave = useCallback((e: React.DragEvent) => {
-    if (!enableDragDrop) return
-    const rect = e.currentTarget.getBoundingClientRect()
-    const x = e.clientX
-    const y = e.clientY
-    
-    if (x < rect.left || x > rect.right || y < rect.top || y > rect.bottom) {
-      setDragState(prev => ({ ...prev, dropTarget: null, dropPosition: null }))
-    }
-  }, [enableDragDrop])
-
-  const handleDrop = useCallback((e: React.DragEvent) => {
-    if (!enableDragDrop) return
-    e.preventDefault()
-    
-    try {
-      const draggedData = JSON.parse(e.dataTransfer.getData('application/json')) as TreeNode
-      if (draggedData.id !== node.id && draggedData.id !== node.parent_id) {
-        onMove(draggedData.id, node.id)
-      }
-    } catch (error) {
-      console.error('Failed to parse drag data:', error)
-    }
-    
-    setDragState({
-      isDragging: false,
-      draggedNode: null,
-      dropTarget: null,
-      dropPosition: null
-    })
-  }, [enableDragDrop, node.id, node.parent_id, onMove])
-
-  const handleClick = useCallback((e: React.MouseEvent) => {
-    e.stopPropagation()
-    onSelect(node.id)
-  }, [node.id, onSelect])
-
-  const handleToggle = useCallback((e: React.MouseEvent) => {
-    e.stopPropagation()
-    onToggle(node.id)
-  }, [node.id, onToggle])
-
-  const handleContextMenu = useCallback((e: React.MouseEvent) => {
-    if (!enableContextMenu) return
-    e.preventDefault()
-    onContextMenu(node.id, e)
-  }, [enableContextMenu, node.id, onContextMenu])
-
-  const isSelected = selectedNodes.has(node.id)
-  const isDropTarget = dragState.dropTarget?.id === node.id
-  const hasChildren = node.children.length > 0
-
-  return (
-    <div
-      style={style}
-      className={cn(
-        'flex items-center gap-2 px-2 py-1 text-sm cursor-pointer transition-colors',
-        'hover:bg-accent/50',
-        isSelected && 'bg-accent text-accent-foreground',
-        isDropTarget && 'bg-accent/70 ring-2 ring-accent',
-        'select-none'
-      )}
-      draggable={enableDragDrop}
-      onDragStart={(e) => handleDragStart(e, node)}
-      onDragOver={handleDragOver}
-      onDragEnter={handleDragEnter}
-      onDragLeave={handleDragLeave}
-      onDrop={handleDrop}
-      onClick={handleClick}
-      onContextMenu={handleContextMenu}
-      onMouseEnter={() => setIsHovered(true)}
-      onMouseLeave={() => setIsHovered(false)}
-    >
-      {/* Indentation */}
-      <div style={{ width: `${node.level * 16}px` }} />
-      
-      {/* Toggle Button */}
-      <Button
-        variant="ghost"
-        size="sm"
-        className="h-4 w-4 p-0 hover:bg-transparent"
-        onClick={handleToggle}
-        disabled={!hasChildren}
-      >
-        {hasChildren ? (
-          node.isExpanded ? <ChevronDown className="h-3 w-3" /> : <ChevronRight className="h-3 w-3" />
-        ) : (
-          <div className="h-3 w-3" />
-        )}
-      </Button>
-
-      {/* Folder Icon */}
-      <div className="flex-shrink-0">
-        {node.isExpanded ? (
-          <FolderOpen className="h-4 w-4 text-accent" />
-        ) : (
-          <Folder className="h-4 w-4 text-muted-foreground" />
-        )}
-      </div>
-
-      {/* Folder Name */}
-      <div className="flex-1 min-w-0">
-        {editingNode === node.id ? (
-          <Input
-            className="h-6 px-1 py-0 text-xs"
-            defaultValue={node.name}
-            onBlur={(e) => {
-              if (e.target.value.trim() !== node.name) {
-                onEdit(node.id)
-              }
-            }}
-            onKeyDown={(e) => {
-              if (e.key === 'Enter') {
-                e.currentTarget.blur()
-              }
-              if (e.key === 'Escape') {
-                onEdit(-1) // Cancel edit
-              }
-            }}
-            autoFocus
-          />
-        ) : (
-          <span className="truncate">{node.name}</span>
-        )}
-      </div>
-
-      {/* Item Count Badge */}
-      {showItemCounts && node.conversation_count > 0 && (
-        <Badge variant="secondary" className="text-xs h-5 px-1">
-          {node.conversation_count}
-        </Badge>
-      )}
-
-      {/* Context Menu Trigger */}
-      {enableContextMenu && isHovered && (
-        <DropdownMenu>
-          <DropdownMenuTrigger asChild>
-            <Button variant="ghost" size="sm" className="h-6 w-6 p-0">
-              <MoreHorizontal className="h-3 w-3" />
-            </Button>
-          </DropdownMenuTrigger>
-          <DropdownMenuContent align="end">
-            <DropdownMenuItem onClick={() => onEdit(node.id)}>
-              <Edit2 className="h-3 w-3 mr-2" />
-              Rename
-            </DropdownMenuItem>
-            <DropdownMenuItem onClick={() => onMove(node.id, node.parent_id)}>
-              <Move className="h-3 w-3 mr-2" />
-              Move
-            </DropdownMenuItem>
-            <DropdownMenuSeparator />
-            <DropdownMenuItem 
-              onClick={() => onDelete(node.id)}
-              className="text-destructive"
-            >
-              <Trash2 className="h-3 w-3 mr-2" />
-              Delete
-            </DropdownMenuItem>
-          </DropdownMenuContent>
-        </DropdownMenu>
-      )}
-    </div>
-  )
-}
-
-// Main Component
-export const FolderTreeView: React.FC<FolderTreeViewProps> = ({
-  height = 400,
-  className,
-  onFolderSelect,
-  onFolderCreate,
-  onFolderUpdate,
-  onFolderDelete,
-  onFolderMove,
-  enableDragDrop = true,
-  enableContextMenu = true,
-  showItemCounts = true
-}) => {
-  const folders = useFolders()
-  const { selectedFolders } = useUI()
-  const { toggleFolderExpanded, selectFolder } = useActions()
-  
-  const [editingNode, setEditingNode] = useState<number | null>(null)
-  const [contextMenuNode, setContextMenuNode] = useState<number | null>(null)
-  const treeRef = useRef<Tree>(null)
-
-  // Transform folders to tree structure
-  const treeData = useMemo(() => {
-    const folderList = Object.values(folders)
-    const nodeMap = new Map<number, TreeNode>()
-    
-    // Create nodes
-    folderList.forEach(folder => {
-      nodeMap.set(folder.id, {
-        id: folder.id,
-        name: folder.name,
-        description: folder.description,
-        parent_id: folder.parent_id,
-        children: [],
-        isExpanded: folder.isExpanded || false,
-        isSelected: folder.isSelected || false,
-        level: 0,
-        conversation_count: folder.conversation_count || 0,
-        created_at: folder.created_at,
-        updated_at: folder.updated_at
-      })
-    })
-
-    // Build tree structure
-    const roots: TreeNode[] = []
-    nodeMap.forEach(node => {
-      if (node.parent_id) {
-        const parent = nodeMap.get(node.parent_id)
-        if (parent) {
-          parent.children.push(node)
-          node.level = parent.level + 1
-        }
-      } else {
-        roots.push(node)
-      }
-    })
-
-    // Flatten tree for virtual scrolling
-    const flattenTree = (nodes: TreeNode[], level = 0): TreeNode[] => {
-      const result: TreeNode[] = []
-      
-      nodes.forEach(node => {
-        node.level = level
-        result.push(node)
-        
-        if (node.isExpanded && node.children.length > 0) {
-          result.push(...flattenTree(node.children, level + 1))
-        }
-      })
-      
-      return result
-    }
-
-    return flattenTree(roots)
-  }, [folders])
-
-  // Event handlers
-  const handleToggle = useCallback((nodeId: number) => {
-    toggleFolderExpanded(nodeId)
-  }, [toggleFolderExpanded])
-
-  const handleSelect = useCallback((nodeId: number) => {
-    const isSelected = selectedFolders.includes(nodeId)
-    selectFolder(nodeId, !isSelected)
-    onFolderSelect?.(nodeId)
-  }, [selectedFolders, selectFolder, onFolderSelect])
-
-  const handleContextMenu = useCallback((nodeId: number, event: React.MouseEvent) => {
-    setContextMenuNode(nodeId)
-  }, [])
-
-  const handleEdit = useCallback((nodeId: number) => {
-    setEditingNode(nodeId === editingNode ? null : nodeId)
-  }, [editingNode])
-
-  const handleDelete = useCallback((nodeId: number) => {
-    if (window.confirm('Are you sure you want to delete this folder?')) {
-      onFolderDelete?.(nodeId)
-    }
-  }, [onFolderDelete])
-
-  const handleMove = useCallback((sourceId: number, targetId: number) => {
-    onFolderMove?.(sourceId, targetId)
-  }, [onFolderMove])
-
-  const handleCreateFolder = useCallback(() => {
-    const parentId = selectedFolders.length === 1 ? selectedFolders[0] : undefined
-    onFolderCreate?.(parentId)
-  }, [selectedFolders, onFolderCreate])
-
-  const selectedNodesSet = useMemo(() => new Set(selectedFolders), [selectedFolders])
-
-  const itemData = useMemo(() => ({
-    nodes: treeData,
-    onToggle: handleToggle,
-    onSelect: handleSelect,
-    onContextMenu: handleContextMenu,
-    onEdit: handleEdit,
-    onDelete: handleDelete,
-    onMove: handleMove,
-    selectedNodes: selectedNodesSet,
-    editingNode,
-    enableDragDrop,
-    enableContextMenu,
-    showItemCounts
-  }), [
-    treeData,
-    handleToggle,
-    handleSelect,
-    handleContextMenu,
-    handleEdit,
-    handleDelete,
-    handleMove,
-    selectedNodesSet,
-    editingNode,
-    enableDragDrop,
-    enableContextMenu,
-    showItemCounts
-  ])
-
-  return (
-    <div className={cn('flex flex-col', className)}>
-      {/* Header */}
-      <div className="flex items-center justify-between p-2 border-b">
-        <h3 className="text-sm font-medium">Folders</h3>
-        <TooltipProvider>
-          <Tooltip>
-            <TooltipTrigger asChild>
-              <Button
-                variant="ghost"
-                size="sm"
-                onClick={handleCreateFolder}
-                className="h-6 w-6 p-0"
-              >
-                <Plus className="h-3 w-3" />
-              </Button>
-            </TooltipTrigger>
-            <TooltipContent>
-              <p>Create new folder</p>
-            </TooltipContent>
-          </Tooltip>
-        </TooltipProvider>
-      </div>
-
-      {/* Tree View */}
-      <div className="flex-1 overflow-hidden">
-        {treeData.length > 0 ? (
-          <Tree
-            ref={treeRef}
-            height={height}
-            itemCount={treeData.length}
-            itemSize={28}
-            itemData={itemData}
-            width="100%"
-          >
-            {TreeItem}
-          </Tree>
-        ) : (
-          <div className="flex items-center justify-center h-32 text-muted-foreground">
-            <div className="text-center">
-              <Folder className="h-8 w-8 mx-auto mb-2 opacity-50" />
-              <p className="text-sm">No folders yet</p>
-              <Button
-                variant="outline"
-                size="sm"
-                onClick={handleCreateFolder}
-                className="mt-2"
-              >
-                <Plus className="h-3 w-3 mr-1" />
-                Create folder
-              </Button>
-            </div>
-          </div>
-        )}
-      </div>
-
-      {/* Context Menu */}
-      {enableContextMenu && contextMenuNode && (
-        <ContextMenu>
-          <ContextMenuTrigger />
-          <ContextMenuContent>
-            <ContextMenuItem onClick={() => handleEdit(contextMenuNode)}>
-              <Edit2 className="h-3 w-3 mr-2" />
-              Rename
-            </ContextMenuItem>
-            <ContextMenuItem onClick={() => onFolderCreate?.(contextMenuNode)}>
-              <Plus className="h-3 w-3 mr-2" />
-              Create subfolder
-            </ContextMenuItem>
-            <ContextMenuSeparator />
-            <ContextMenuItem onClick={() => handleMove(contextMenuNode, undefined)}>
-              <Move className="h-3 w-3 mr-2" />
-              Move to root
-            </ContextMenuItem>
-            <ContextMenuSeparator />
-            <ContextMenuItem 
-              onClick={() => handleDelete(contextMenuNode)}
-              className="text-destructive"
-            >
-              <Trash2 className="h-3 w-3 mr-2" />
-              Delete
-            </ContextMenuItem>
-          </ContextMenuContent>
-        </ContextMenu>
-      )}
-    </div>
-  )
-}
-
-export default FolderTreeView
\ No newline at end of file
diff --git a/frontend/components/feedme/QAPairExtractor.tsx b/frontend/components/feedme/QAPairExtractor.tsx
deleted file mode 100644
index 4f6947c..0000000
--- a/frontend/components/feedme/QAPairExtractor.tsx
+++ /dev/null
@@ -1,1128 +0,0 @@
-/**
- * QAPairExtractor Component
- * 
- * AI-powered Q&A pair detection with confidence scoring visualization,
- * quality indicators with color coding, and suggested improvements panel.
- * 
- * Part of FeedMe v2.0 Phase 3C: Smart Conversation Editor
- */
-
-'use client'
-
-import React, { useState, useCallback, useMemo, useRef, useEffect } from 'react'
-import { 
-  Brain, Eye, Edit3, Trash2, CheckCircle2, AlertCircle, 
-  Clock, Wand2, TrendingUp, MessageCircle, Bot, User,
-  ChevronDown, ChevronRight, Copy, Download, RefreshCw,
-  Filter, SortAsc, Search, Plus, Minus, Star, Flag
-} from 'lucide-react'
-import { cn } from '@/lib/utils'
-import { Button } from '@/components/ui/button'
-import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
-import { Badge } from '@/components/ui/badge'
-import { Progress } from '@/components/ui/progress'
-import { Separator } from '@/components/ui/separator'
-import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip'
-import { ScrollArea } from '@/components/ui/scroll-area'
-import { Input } from '@/components/ui/input'
-import { Textarea } from '@/components/ui/textarea'
-import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
-import { Checkbox } from '@/components/ui/checkbox'
-import { Alert, AlertDescription } from '@/components/ui/alert'
-import { Collapsible, CollapsibleContent, CollapsibleTrigger } from '@/components/ui/collapsible'
-import { Slider } from '@/components/ui/slider'
-
-// Types
-interface QAPairExtractorProps {
-  conversationId: number
-  segments: ConversationSegment[]
-  onExtractComplete?: (qaPairs: QAPair[]) => void
-  onPairUpdate?: (pairId: string, updates: Partial<QAPair>) => void
-  onPairDelete?: (pairId: string) => void
-  enableRealTimeExtraction?: boolean
-  minConfidenceThreshold?: number
-  className?: string
-}
-
-interface ConversationSegment {
-  id: string
-  type: 'customer' | 'agent' | 'system' | 'metadata'
-  speaker?: string
-  content: string
-  confidence: number
-  timestamp?: string
-}
-
-interface QAPair {
-  id: string
-  question: string
-  answer: string
-  context: string[]
-  confidence: number
-  quality_score: number
-  source_segments: string[]
-  tags: string[]
-  category: string
-  issue_type: string
-  resolution_type: string
-  sentiment: 'positive' | 'neutral' | 'negative'
-  usefulness_score: number
-  is_approved: boolean
-  is_flagged: boolean
-  extraction_method: 'ai_detected' | 'manual_created' | 'ai_suggested'
-  improvement_suggestions: ImprovementSuggestion[]
-  validation_status: 'valid' | 'needs_review' | 'invalid'
-  validation_message?: string
-  created_at: string
-  updated_at: string
-}
-
-interface ImprovementSuggestion {
-  id: string
-  type: 'clarity' | 'completeness' | 'accuracy' | 'formatting'
-  severity: 'low' | 'medium' | 'high'
-  description: string
-  suggested_change: string
-  confidence: number
-}
-
-interface ExtractionState {
-  isExtracting: boolean
-  progress: number
-  currentStep: string
-  extractedPairs: QAPair[]
-  filteredPairs: QAPair[]
-  selectedPairs: Set<string>
-  editingPair: string | null
-  searchQuery: string
-  filterBy: 'all' | 'approved' | 'needs_review' | 'flagged'
-  sortBy: 'confidence' | 'quality' | 'created_at' | 'usefulness'
-  sortOrder: 'asc' | 'desc'
-  confidenceThreshold: number
-  qualityThreshold: number
-}
-
-// Quality Score Component
-const QualityScoreIndicator: React.FC<{ 
-  score: number, 
-  size?: 'sm' | 'md' | 'lg',
-  showLabel?: boolean 
-}> = ({ score, size = 'md', showLabel = true }) => {
-  const getColor = (score: number) => {
-    if (score >= 0.8) return 'text-green-600 bg-green-100'
-    if (score >= 0.6) return 'text-yellow-600 bg-yellow-100'
-    return 'text-red-600 bg-red-100'
-  }
-
-  const sizeClasses = {
-    sm: 'h-6 w-12 text-xs',
-    md: 'h-8 w-16 text-sm',
-    lg: 'h-10 w-20 text-base'
-  }
-
-  return (
-    <div className={cn('flex items-center gap-2')}>
-      <div className={cn(
-        'flex items-center justify-center rounded-full font-medium',
-        getColor(score),
-        sizeClasses[size]
-      )}>
-        {Math.round(score * 100)}%
-      </div>
-      {showLabel && <span className="text-xs text-muted-foreground">Quality</span>}
-    </div>
-  )
-}
-
-// Confidence Meter Component
-const ConfidenceMeter: React.FC<{ 
-  confidence: number,
-  threshold?: number
-}> = ({ confidence, threshold = 0.7 }) => {
-  const percentage = confidence * 100
-  const isAboveThreshold = confidence >= threshold
-  
-  return (
-    <TooltipProvider>
-      <Tooltip>
-        <TooltipTrigger>
-          <div className="flex items-center gap-2">
-            <Progress 
-              value={percentage} 
-              className={cn(
-                'w-16 h-2',
-                isAboveThreshold ? 'bg-green-100' : 'bg-red-100'
-              )}
-            />
-            <span className={cn(
-              'text-xs font-medium',
-              isAboveThreshold ? 'text-green-600' : 'text-red-600'
-            )}>
-              {Math.round(percentage)}%
-            </span>
-          </div>
-        </TooltipTrigger>
-        <TooltipContent>
-          <p>AI Confidence: {Math.round(percentage)}%</p>
-          <p>Threshold: {Math.round(threshold * 100)}%</p>
-        </TooltipContent>
-      </Tooltip>
-    </TooltipProvider>
-  )
-}
-
-// Sentiment Badge Component
-const SentimentBadge: React.FC<{ sentiment: QAPair['sentiment'] }> = ({ sentiment }) => {
-  const config = {
-    positive: { color: 'bg-green-100 text-green-800', label: 'Positive' },
-    neutral: { color: 'bg-gray-100 text-gray-800', label: 'Neutral' },
-    negative: { color: 'bg-red-100 text-red-800', label: 'Negative' }
-  }
-
-  return (
-    <Badge variant="secondary" className={cn('text-xs', config[sentiment].color)}>
-      {config[sentiment].label}
-    </Badge>
-  )
-}
-
-// Improvement Suggestions Panel
-const ImprovementSuggestionsPanel: React.FC<{
-  suggestions: ImprovementSuggestion[]
-  onApply: (suggestionId: string) => void
-  onDismiss: (suggestionId: string) => void
-}> = ({ suggestions, onApply, onDismiss }) => {
-  if (suggestions.length === 0) return null
-
-  return (
-    <Card className="mt-3">
-      <CardHeader className="pb-2">
-        <CardTitle className="text-sm flex items-center gap-2">
-          <Wand2 className="h-4 w-4" />
-          Improvement Suggestions
-        </CardTitle>
-      </CardHeader>
-      <CardContent className="space-y-2">
-        {suggestions.map(suggestion => (
-          <div key={suggestion.id} className="p-3 border rounded-lg">
-            <div className="flex items-start justify-between mb-2">
-              <div className="flex items-center gap-2">
-                <Badge 
-                  variant="outline" 
-                  className={cn(
-                    'text-xs',
-                    suggestion.severity === 'high' && 'border-red-500 text-red-700',
-                    suggestion.severity === 'medium' && 'border-yellow-500 text-yellow-700',
-                    suggestion.severity === 'low' && 'border-gray-500 text-gray-700'
-                  )}
-                >
-                  {suggestion.type}
-                </Badge>
-                <Badge variant="secondary" className="text-xs">
-                  {Math.round(suggestion.confidence * 100)}%
-                </Badge>
-              </div>
-              <div className="flex gap-1">
-                <Button
-                  variant="ghost"
-                  size="sm"
-                  onClick={() => onApply(suggestion.id)}
-                  className="h-6 px-2 text-xs"
-                >
-                  Apply
-                </Button>
-                <Button
-                  variant="ghost"
-                  size="sm"
-                  onClick={() => onDismiss(suggestion.id)}
-                  className="h-6 px-2 text-xs"
-                >
-                  Dismiss
-                </Button>
-              </div>
-            </div>
-            <p className="text-sm text-muted-foreground mb-2">
-              {suggestion.description}
-            </p>
-            <div className="text-sm p-2 bg-muted rounded">
-              {suggestion.suggested_change}
-            </div>
-          </div>
-        ))}
-      </CardContent>
-    </Card>
-  )
-}
-
-// QA Pair Card Component
-const QAPairCard: React.FC<{
-  pair: QAPair
-  isSelected: boolean
-  isEditing: boolean
-  onSelect: (id: string) => void
-  onEdit: (id: string) => void
-  onSave: (id: string, updates: Partial<QAPair>) => void
-  onCancel: (id: string) => void
-  onDelete: (id: string) => void
-  onToggleApproval: (id: string) => void
-  onToggleFlag: (id: string) => void
-  onApplyImprovement: (pairId: string, suggestionId: string) => void
-  onDismissImprovement: (pairId: string, suggestionId: string) => void
-}> = ({
-  pair,
-  isSelected,
-  isEditing,
-  onSelect,
-  onEdit,
-  onSave,
-  onCancel,
-  onDelete,
-  onToggleApproval,
-  onToggleFlag,
-  onApplyImprovement,
-  onDismissImprovement
-}) => {
-  const [editQuestion, setEditQuestion] = useState(pair.question)
-  const [editAnswer, setEditAnswer] = useState(pair.answer)
-  const [isExpanded, setIsExpanded] = useState(false)
-
-  const handleSave = useCallback(() => {
-    onSave(pair.id, {
-      question: editQuestion,
-      answer: editAnswer,
-      updated_at: new Date().toISOString()
-    })
-  }, [pair.id, editQuestion, editAnswer, onSave])
-
-  const handleCancel = useCallback(() => {
-    setEditQuestion(pair.question)
-    setEditAnswer(pair.answer)
-    onCancel(pair.id)
-  }, [pair.id, pair.question, pair.answer, onCancel])
-
-  return (
-    <Card 
-      className={cn(
-        'mb-4 transition-all duration-200',
-        isSelected && 'ring-2 ring-accent shadow-md',
-        pair.is_flagged && 'border-red-300',
-        pair.is_approved && 'border-green-300',
-        'hover:shadow-sm cursor-pointer'
-      )}
-      onClick={() => !isEditing && onSelect(pair.id)}
-    >
-      <CardHeader className="pb-3">
-        <div className="flex items-start justify-between">
-          <div className="flex items-center gap-2 min-w-0 flex-1">
-            <Checkbox
-              checked={isSelected}
-              onChange={() => onSelect(pair.id)}
-              onClick={(e) => e.stopPropagation()}
-            />
-            <Badge variant="outline" className="text-xs shrink-0">
-              {pair.extraction_method.replace('_', ' ')}
-            </Badge>
-            <Badge variant="secondary" className="text-xs shrink-0">
-              {pair.category}
-            </Badge>
-            <SentimentBadge sentiment={pair.sentiment} />
-            {pair.validation_status !== 'valid' && (
-              <Badge variant="destructive" className="text-xs">
-                {pair.validation_status.replace('_', ' ')}
-              </Badge>
-            )}
-          </div>
-          
-          <div className="flex items-center gap-1 shrink-0">
-            <QualityScoreIndicator score={pair.quality_score} size="sm" showLabel={false} />
-            <ConfidenceMeter confidence={pair.confidence} />
-            
-            <Button
-              variant="ghost"
-              size="sm"
-              onClick={(e) => {
-                e.stopPropagation()
-                onToggleApproval(pair.id)
-              }}
-              className={cn(
-                'h-6 w-6 p-0',
-                pair.is_approved && 'text-green-600'
-              )}
-            >
-              <CheckCircle2 className="h-3 w-3" />
-            </Button>
-            
-            <Button
-              variant="ghost"
-              size="sm"
-              onClick={(e) => {
-                e.stopPropagation()
-                onToggleFlag(pair.id)
-              }}
-              className={cn(
-                'h-6 w-6 p-0',
-                pair.is_flagged && 'text-red-600'
-              )}
-            >
-              <Flag className="h-3 w-3" />
-            </Button>
-            
-            {!isEditing && (
-              <Button
-                variant="ghost"
-                size="sm"
-                onClick={(e) => {
-                  e.stopPropagation()
-                  onEdit(pair.id)
-                }}
-                className="h-6 w-6 p-0"
-              >
-                <Edit3 className="h-3 w-3" />
-              </Button>
-            )}
-            
-            <Button
-              variant="ghost"
-              size="sm"
-              onClick={(e) => {
-                e.stopPropagation()
-                onDelete(pair.id)
-              }}
-              className="h-6 w-6 p-0 text-destructive"
-            >
-              <Trash2 className="h-3 w-3" />
-            </Button>
-          </div>
-        </div>
-      </CardHeader>
-
-      <CardContent className="space-y-3">
-        {/* Question */}
-        <div>
-          <div className="flex items-center gap-2 mb-1">
-            <User className="h-3 w-3 text-blue-500" />
-            <span className="text-xs font-medium text-muted-foreground">QUESTION</span>
-          </div>
-          {isEditing ? (
-            <Textarea
-              value={editQuestion}
-              onChange={(e) => setEditQuestion(e.target.value)}
-              className="min-h-[60px] text-sm"
-              placeholder="Enter question..."
-            />
-          ) : (
-            <p className="text-sm leading-relaxed">{pair.question}</p>
-          )}
-        </div>
-
-        {/* Answer */}
-        <div>
-          <div className="flex items-center gap-2 mb-1">
-            <MessageCircle className="h-3 w-3 text-green-500" />
-            <span className="text-xs font-medium text-muted-foreground">ANSWER</span>
-          </div>
-          {isEditing ? (
-            <Textarea
-              value={editAnswer}
-              onChange={(e) => setEditAnswer(e.target.value)}
-              className="min-h-[80px] text-sm"
-              placeholder="Enter answer..."
-            />
-          ) : (
-            <p className="text-sm leading-relaxed">{pair.answer}</p>
-          )}
-        </div>
-
-        {/* Edit Controls */}
-        {isEditing && (
-          <div className="flex items-center gap-2 pt-2 border-t">
-            <Button variant="default" size="sm" onClick={handleSave}>
-              <CheckCircle2 className="h-3 w-3 mr-1" />
-              Save
-            </Button>
-            <Button variant="ghost" size="sm" onClick={handleCancel}>
-              Cancel
-            </Button>
-          </div>
-        )}
-
-        {/* Expandable Details */}
-        <Collapsible open={isExpanded} onOpenChange={setIsExpanded}>
-          <CollapsibleTrigger asChild>
-            <Button variant="ghost" size="sm" className="w-full justify-between p-0 h-auto">
-              <span className="text-xs text-muted-foreground">
-                {isExpanded ? 'Hide details' : 'Show details'}
-              </span>
-              {isExpanded ? (
-                <ChevronDown className="h-3 w-3" />
-              ) : (
-                <ChevronRight className="h-3 w-3" />
-              )}
-            </Button>
-          </CollapsibleTrigger>
-          
-          <CollapsibleContent className="space-y-3 pt-3">
-            {/* Tags and Metadata */}
-            <div className="grid grid-cols-2 gap-4 text-xs">
-              <div>
-                <span className="text-muted-foreground">Issue Type:</span>
-                <div className="font-medium">{pair.issue_type}</div>
-              </div>
-              <div>
-                <span className="text-muted-foreground">Resolution:</span>
-                <div className="font-medium">{pair.resolution_type}</div>
-              </div>
-              <div>
-                <span className="text-muted-foreground">Usefulness:</span>
-                <div className="flex items-center gap-1">
-                  <Star className="h-3 w-3 text-yellow-500" />
-                  <span className="font-medium">{Math.round(pair.usefulness_score * 100)}%</span>
-                </div>
-              </div>
-              <div>
-                <span className="text-muted-foreground">Created:</span>
-                <div className="font-medium">
-                  {new Date(pair.created_at).toLocaleDateString()}
-                </div>
-              </div>
-            </div>
-
-            {/* Tags */}
-            {pair.tags.length > 0 && (
-              <div>
-                <span className="text-xs text-muted-foreground mb-1 block">Tags:</span>
-                <div className="flex gap-1 flex-wrap">
-                  {pair.tags.map(tag => (
-                    <Badge key={tag} variant="outline" className="text-xs">
-                      {tag}
-                    </Badge>
-                  ))}
-                </div>
-              </div>
-            )}
-
-            {/* Context */}
-            {pair.context.length > 0 && (
-              <div>
-                <span className="text-xs text-muted-foreground mb-1 block">Context:</span>
-                <div className="text-xs text-muted-foreground space-y-1">
-                  {pair.context.map((ctx, index) => (
-                    <div key={index} className="pl-2 border-l-2 border-muted">
-                      {ctx}
-                    </div>
-                  ))}
-                </div>
-              </div>
-            )}
-
-            {/* Improvement Suggestions */}
-            <ImprovementSuggestionsPanel
-              suggestions={pair.improvement_suggestions}
-              onApply={(suggestionId) => onApplyImprovement(pair.id, suggestionId)}
-              onDismiss={(suggestionId) => onDismissImprovement(pair.id, suggestionId)}
-            />
-          </CollapsibleContent>
-        </Collapsible>
-      </CardContent>
-    </Card>
-  )
-}
-
-// Extraction Progress Panel
-const ExtractionProgressPanel: React.FC<{
-  isExtracting: boolean
-  progress: number
-  currentStep: string
-  onCancel: () => void
-}> = ({ isExtracting, progress, currentStep, onCancel }) => {
-  if (!isExtracting) return null
-
-  return (
-    <Card className="mb-4">
-      <CardContent className="p-4">
-        <div className="flex items-center justify-between mb-3">
-          <div className="flex items-center gap-2">
-            <Brain className="h-4 w-4 text-accent animate-pulse" />
-            <span className="font-medium text-sm">Extracting Q&A Pairs</span>
-          </div>
-          <Button variant="ghost" size="sm" onClick={onCancel}>
-            Cancel
-          </Button>
-        </div>
-        
-        <Progress value={progress} className="mb-2" />
-        
-        <div className="flex items-center justify-between text-xs text-muted-foreground">
-          <span>{currentStep}</span>
-          <span>{Math.round(progress)}%</span>
-        </div>
-      </CardContent>
-    </Card>
-  )
-}
-
-// Main Component
-export const QAPairExtractor: React.FC<QAPairExtractorProps> = ({
-  conversationId,
-  segments,
-  onExtractComplete,
-  onPairUpdate,
-  onPairDelete,
-  enableRealTimeExtraction = true,
-  minConfidenceThreshold = 0.7,
-  className
-}) => {
-  const [state, setState] = useState<ExtractionState>({
-    isExtracting: false,
-    progress: 0,
-    currentStep: '',
-    extractedPairs: [],
-    filteredPairs: [],
-    selectedPairs: new Set(),
-    editingPair: null,
-    searchQuery: '',
-    filterBy: 'all',
-    sortBy: 'confidence',
-    sortOrder: 'desc',
-    confidenceThreshold: minConfidenceThreshold,
-    qualityThreshold: 0.6
-  })
-
-  // Filter and sort pairs
-  const filteredAndSortedPairs = useMemo(() => {
-    let filtered = [...state.extractedPairs]
-
-    // Search filter
-    if (state.searchQuery.trim()) {
-      const query = state.searchQuery.toLowerCase()
-      filtered = filtered.filter(pair => 
-        pair.question.toLowerCase().includes(query) ||
-        pair.answer.toLowerCase().includes(query) ||
-        pair.tags.some(tag => tag.toLowerCase().includes(query))
-      )
-    }
-
-    // Status filter
-    switch (state.filterBy) {
-      case 'approved':
-        filtered = filtered.filter(pair => pair.is_approved)
-        break
-      case 'needs_review':
-        filtered = filtered.filter(pair => pair.validation_status === 'needs_review')
-        break
-      case 'flagged':
-        filtered = filtered.filter(pair => pair.is_flagged)
-        break
-    }
-
-    // Threshold filters
-    filtered = filtered.filter(pair => 
-      pair.confidence >= state.confidenceThreshold &&
-      pair.quality_score >= state.qualityThreshold
-    )
-
-    // Sort
-    filtered.sort((a, b) => {
-      const multiplier = state.sortOrder === 'asc' ? 1 : -1
-      
-      switch (state.sortBy) {
-        case 'confidence':
-          return (a.confidence - b.confidence) * multiplier
-        case 'quality':
-          return (a.quality_score - b.quality_score) * multiplier
-        case 'created_at':
-          return (new Date(a.created_at).getTime() - new Date(b.created_at).getTime()) * multiplier
-        case 'usefulness':
-          return (a.usefulness_score - b.usefulness_score) * multiplier
-        default:
-          return 0
-      }
-    })
-
-    return filtered
-  }, [state.extractedPairs, state.searchQuery, state.filterBy, state.sortBy, state.sortOrder, state.confidenceThreshold, state.qualityThreshold])
-
-  // Start extraction
-  const handleStartExtraction = useCallback(async () => {
-    setState(prev => ({ 
-      ...prev, 
-      isExtracting: true, 
-      progress: 0,
-      currentStep: 'Analyzing conversation structure...'
-    }))
-
-    try {
-      const steps = [
-        'Analyzing conversation structure...',
-        'Identifying question-answer patterns...',
-        'Extracting potential Q&A pairs...',
-        'Analyzing context and quality...',
-        'Generating improvement suggestions...',
-        'Finalizing extraction...'
-      ]
-
-      for (let i = 0; i < steps.length; i++) {
-        setState(prev => ({ 
-          ...prev, 
-          progress: (i / steps.length) * 100,
-          currentStep: steps[i]
-        }))
-        
-        await new Promise(resolve => setTimeout(resolve, 1000))
-      }
-
-      // Mock extracted pairs
-      const mockPairs: QAPair[] = [
-        {
-          id: 'qa-1',
-          question: 'How do I sync my emails with Mailbird?',
-          answer: 'To sync your emails with Mailbird, go to Account Settings and click on the Sync tab. Make sure your internet connection is stable and click "Sync Now".',
-          context: ['Previous sync failed', 'User has IMAP account'],
-          confidence: 0.92,
-          quality_score: 0.85,
-          source_segments: ['seg-1', 'seg-3'],
-          tags: ['sync', 'email', 'settings'],
-          category: 'Technical Support',
-          issue_type: 'Sync Issues',
-          resolution_type: 'Configuration',
-          sentiment: 'neutral',
-          usefulness_score: 0.88,
-          is_approved: false,
-          is_flagged: false,
-          extraction_method: 'ai_detected',
-          improvement_suggestions: [{
-            id: 'imp-1',
-            type: 'clarity',
-            severity: 'medium',
-            description: 'Consider adding more specific steps',
-            suggested_change: 'Add numbered steps for the sync process',
-            confidence: 0.75
-          }],
-          validation_status: 'valid',
-          created_at: new Date().toISOString(),
-          updated_at: new Date().toISOString()
-        },
-        {
-          id: 'qa-2',
-          question: 'Why are my emails not loading?',
-          answer: 'Email loading issues can be caused by network connectivity problems or server issues. Please check your internet connection and try refreshing the application.',
-          context: ['User experiencing slow loading', 'Multiple account setup'],
-          confidence: 0.78,
-          quality_score: 0.72,
-          source_segments: ['seg-2', 'seg-4'],
-          tags: ['loading', 'connectivity', 'troubleshooting'],
-          category: 'Technical Support',
-          issue_type: 'Performance',
-          resolution_type: 'Troubleshooting',
-          sentiment: 'negative',
-          usefulness_score: 0.81,
-          is_approved: false,
-          is_flagged: false,
-          extraction_method: 'ai_detected',
-          improvement_suggestions: [{
-            id: 'imp-2',
-            type: 'completeness',
-            severity: 'high',
-            description: 'Missing advanced troubleshooting steps',
-            suggested_change: 'Add steps for checking account settings and clearing cache',
-            confidence: 0.82
-          }],
-          validation_status: 'needs_review',
-          validation_message: 'Answer could be more comprehensive',
-          created_at: new Date().toISOString(),
-          updated_at: new Date().toISOString()
-        }
-      ]
-
-      setState(prev => ({ 
-        ...prev, 
-        isExtracting: false,
-        progress: 100,
-        extractedPairs: mockPairs,
-        filteredPairs: mockPairs
-      }))
-
-      onExtractComplete?.(mockPairs)
-
-    } catch (error) {
-      setState(prev => ({ 
-        ...prev, 
-        isExtracting: false,
-        progress: 0,
-        currentStep: 'Extraction failed'
-      }))
-    }
-  }, [onExtractComplete])
-
-  // Handle pair selection
-  const handlePairSelect = useCallback((pairId: string) => {
-    setState(prev => {
-      const newSelected = new Set(prev.selectedPairs)
-      if (newSelected.has(pairId)) {
-        newSelected.delete(pairId)
-      } else {
-        newSelected.add(pairId)
-      }
-      return { ...prev, selectedPairs: newSelected }
-    })
-  }, [])
-
-  // Handle pair editing
-  const handlePairEdit = useCallback((pairId: string) => {
-    setState(prev => ({ ...prev, editingPair: pairId }))
-  }, [])
-
-  // Handle pair save
-  const handlePairSave = useCallback((pairId: string, updates: Partial<QAPair>) => {
-    setState(prev => ({
-      ...prev,
-      extractedPairs: prev.extractedPairs.map(pair =>
-        pair.id === pairId ? { ...pair, ...updates } : pair
-      ),
-      editingPair: null
-    }))
-    onPairUpdate?.(pairId, updates)
-  }, [onPairUpdate])
-
-  // Handle pair cancel
-  const handlePairCancel = useCallback((pairId: string) => {
-    setState(prev => ({ ...prev, editingPair: null }))
-  }, [])
-
-  // Handle pair delete
-  const handlePairDelete = useCallback((pairId: string) => {
-    if (window.confirm('Are you sure you want to delete this Q&A pair?')) {
-      setState(prev => ({
-        ...prev,
-        extractedPairs: prev.extractedPairs.filter(pair => pair.id !== pairId),
-        selectedPairs: new Set([...prev.selectedPairs].filter(id => id !== pairId))
-      }))
-      onPairDelete?.(pairId)
-    }
-  }, [onPairDelete])
-
-  // Handle approval toggle
-  const handleToggleApproval = useCallback((pairId: string) => {
-    setState(prev => ({
-      ...prev,
-      extractedPairs: prev.extractedPairs.map(pair =>
-        pair.id === pairId ? { ...pair, is_approved: !pair.is_approved } : pair
-      )
-    }))
-  }, [])
-
-  // Handle flag toggle
-  const handleToggleFlag = useCallback((pairId: string) => {
-    setState(prev => ({
-      ...prev,
-      extractedPairs: prev.extractedPairs.map(pair =>
-        pair.id === pairId ? { ...pair, is_flagged: !pair.is_flagged } : pair
-      )
-    }))
-  }, [])
-
-  // Handle improvement application
-  const handleApplyImprovement = useCallback((pairId: string, suggestionId: string) => {
-    setState(prev => ({
-      ...prev,
-      extractedPairs: prev.extractedPairs.map(pair => {
-        if (pair.id === pairId) {
-          const suggestion = pair.improvement_suggestions.find(s => s.id === suggestionId)
-          if (suggestion) {
-            // Apply the suggestion (simplified)
-            return {
-              ...pair,
-              improvement_suggestions: pair.improvement_suggestions.filter(s => s.id !== suggestionId),
-              quality_score: Math.min(1.0, pair.quality_score + 0.1)
-            }
-          }
-        }
-        return pair
-      })
-    }))
-  }, [])
-
-  // Handle improvement dismissal
-  const handleDismissImprovement = useCallback((pairId: string, suggestionId: string) => {
-    setState(prev => ({
-      ...prev,
-      extractedPairs: prev.extractedPairs.map(pair =>
-        pair.id === pairId 
-          ? {
-              ...pair,
-              improvement_suggestions: pair.improvement_suggestions.filter(s => s.id !== suggestionId)
-            }
-          : pair
-      )
-    }))
-  }, [])
-
-  // Handle bulk approval
-  const handleBulkApprove = useCallback(() => {
-    setState(prev => ({
-      ...prev,
-      extractedPairs: prev.extractedPairs.map(pair =>
-        prev.selectedPairs.has(pair.id) ? { ...pair, is_approved: true } : pair
-      ),
-      selectedPairs: new Set()
-    }))
-  }, [])
-
-  // Handle export
-  const handleExport = useCallback(() => {
-    const exportData = {
-      conversationId,
-      qaPairs: state.extractedPairs,
-      exportedAt: new Date().toISOString()
-    }
-    
-    const blob = new Blob([JSON.stringify(exportData, null, 2)], { type: 'application/json' })
-    const url = URL.createObjectURL(blob)
-    const a = document.createElement('a')
-    a.href = url
-    a.download = `qa-pairs-${conversationId}.json`
-    document.body.appendChild(a)
-    a.click()
-    document.body.removeChild(a)
-    URL.revokeObjectURL(url)
-  }, [conversationId, state.extractedPairs])
-
-  const stats = useMemo(() => {
-    const total = state.extractedPairs.length
-    const approved = state.extractedPairs.filter(p => p.is_approved).length
-    const needsReview = state.extractedPairs.filter(p => p.validation_status === 'needs_review').length
-    const flagged = state.extractedPairs.filter(p => p.is_flagged).length
-    const avgQuality = total > 0 ? state.extractedPairs.reduce((sum, p) => sum + p.quality_score, 0) / total : 0
-    
-    return { total, approved, needsReview, flagged, avgQuality }
-  }, [state.extractedPairs])
-
-  return (
-    <div className={cn('h-full flex flex-col', className)}>
-      {/* Header */}
-      <div className="flex items-center justify-between p-4 border-b">
-        <div className="flex items-center gap-3">
-          <h2 className="text-lg font-medium flex items-center gap-2">
-            <Brain className="h-5 w-5" />
-            Q&A Pair Extractor
-          </h2>
-          {stats.total > 0 && (
-            <div className="flex items-center gap-2 text-sm text-muted-foreground">
-              <Badge variant="secondary">{stats.total} pairs</Badge>
-              <Badge variant="outline">{stats.approved} approved</Badge>
-              <Badge variant="outline">{Math.round(stats.avgQuality * 100)}% avg quality</Badge>
-            </div>
-          )}
-        </div>
-        
-        <div className="flex items-center gap-2">
-          {state.selectedPairs.size > 0 && (
-            <>
-              <Button variant="outline" size="sm" onClick={handleBulkApprove}>
-                Approve Selected ({state.selectedPairs.size})
-              </Button>
-              <Separator orientation="vertical" className="h-4" />
-            </>
-          )}
-          
-          <Button
-            variant="outline"
-            size="sm"
-            onClick={handleExport}
-            disabled={state.extractedPairs.length === 0}
-          >
-            <Download className="h-3 w-3 mr-1" />
-            Export
-          </Button>
-          
-          <Button
-            variant="default"
-            size="sm"
-            onClick={handleStartExtraction}
-            disabled={state.isExtracting || segments.length === 0}
-          >
-            <Brain className="h-3 w-3 mr-1" />
-            {state.extractedPairs.length > 0 ? 'Re-extract' : 'Extract Q&A Pairs'}
-          </Button>
-        </div>
-      </div>
-
-      {/* Extraction Progress */}
-      <ExtractionProgressPanel
-        isExtracting={state.isExtracting}
-        progress={state.progress}
-        currentStep={state.currentStep}
-        onCancel={() => setState(prev => ({ ...prev, isExtracting: false }))}
-      />
-
-      {/* Filters and Controls */}
-      {state.extractedPairs.length > 0 && (
-        <div className="p-4 border-b space-y-3">
-          {/* Search and Filter Bar */}
-          <div className="flex items-center gap-3">
-            <div className="relative flex-1 max-w-sm">
-              <Search className="absolute left-2 top-1/2 transform -translate-y-1/2 h-3 w-3 text-muted-foreground" />
-              <Input
-                placeholder="Search Q&A pairs..."
-                value={state.searchQuery}
-                onChange={(e) => setState(prev => ({ ...prev, searchQuery: e.target.value }))}
-                className="pl-7"
-              />
-            </div>
-            
-            <Select value={state.filterBy} onValueChange={(value: any) => setState(prev => ({ ...prev, filterBy: value }))}>
-              <SelectTrigger className="w-40">
-                <SelectValue />
-              </SelectTrigger>
-              <SelectContent>
-                <SelectItem value="all">All pairs</SelectItem>
-                <SelectItem value="approved">Approved</SelectItem>
-                <SelectItem value="needs_review">Needs review</SelectItem>
-                <SelectItem value="flagged">Flagged</SelectItem>
-              </SelectContent>
-            </Select>
-            
-            <Select value={state.sortBy} onValueChange={(value: any) => setState(prev => ({ ...prev, sortBy: value }))}>
-              <SelectTrigger className="w-32">
-                <SelectValue />
-              </SelectTrigger>
-              <SelectContent>
-                <SelectItem value="confidence">Confidence</SelectItem>
-                <SelectItem value="quality">Quality</SelectItem>
-                <SelectItem value="usefulness">Usefulness</SelectItem>
-                <SelectItem value="created_at">Date</SelectItem>
-              </SelectContent>
-            </Select>
-            
-            <Button
-              variant="ghost"
-              size="sm"
-              onClick={() => setState(prev => ({ 
-                ...prev, 
-                sortOrder: prev.sortOrder === 'asc' ? 'desc' : 'asc' 
-              }))}
-            >
-              <SortAsc className={cn('h-3 w-3', state.sortOrder === 'desc' && 'rotate-180')} />
-            </Button>
-          </div>
-
-          {/* Threshold Controls */}
-          <div className="flex items-center gap-6">
-            <div className="flex items-center gap-3">
-              <span className="text-sm text-muted-foreground">Confidence:</span>
-              <Slider
-                value={[state.confidenceThreshold]}
-                onValueChange={([value]) => setState(prev => ({ ...prev, confidenceThreshold: value }))}
-                max={1}
-                min={0}
-                step={0.05}
-                className="w-24"
-              />
-              <span className="text-xs w-8">{Math.round(state.confidenceThreshold * 100)}%</span>
-            </div>
-            
-            <div className="flex items-center gap-3">
-              <span className="text-sm text-muted-foreground">Quality:</span>
-              <Slider
-                value={[state.qualityThreshold]}
-                onValueChange={([value]) => setState(prev => ({ ...prev, qualityThreshold: value }))}
-                max={1}
-                min={0}
-                step={0.05}
-                className="w-24"
-              />
-              <span className="text-xs w-8">{Math.round(state.qualityThreshold * 100)}%</span>
-            </div>
-          </div>
-        </div>
-      )}
-
-      {/* Q&A Pairs List */}
-      <ScrollArea className="flex-1 p-4">
-        {filteredAndSortedPairs.length > 0 ? (
-          <div className="space-y-4">
-            {filteredAndSortedPairs.map(pair => (
-              <QAPairCard
-                key={pair.id}
-                pair={pair}
-                isSelected={state.selectedPairs.has(pair.id)}
-                isEditing={state.editingPair === pair.id}
-                onSelect={handlePairSelect}
-                onEdit={handlePairEdit}
-                onSave={handlePairSave}
-                onCancel={handlePairCancel}
-                onDelete={handlePairDelete}
-                onToggleApproval={handleToggleApproval}
-                onToggleFlag={handleToggleFlag}
-                onApplyImprovement={handleApplyImprovement}
-                onDismissImprovement={handleDismissImprovement}
-              />
-            ))}
-          </div>
-        ) : state.extractedPairs.length > 0 ? (
-          <div className="flex items-center justify-center h-32">
-            <div className="text-center">
-              <Filter className="h-8 w-8 mx-auto mb-2 text-muted-foreground opacity-50" />
-              <p className="text-sm text-muted-foreground">No pairs match the current filters</p>
-              <Button
-                variant="outline"
-                size="sm"
-                onClick={() => setState(prev => ({ 
-                  ...prev, 
-                  searchQuery: '', 
-                  filterBy: 'all',
-                  confidenceThreshold: 0,
-                  qualityThreshold: 0
-                }))}
-                className="mt-2"
-              >
-                Clear filters
-              </Button>
-            </div>
-          </div>
-        ) : segments.length > 0 ? (
-          <div className="flex items-center justify-center h-32">
-            <div className="text-center">
-              <Brain className="h-12 w-12 mx-auto mb-4 text-muted-foreground opacity-50" />
-              <h3 className="text-lg font-medium mb-2">Ready to Extract Q&A Pairs</h3>
-              <p className="text-sm text-muted-foreground mb-4">
-                Click "Extract Q&A Pairs" to analyze the conversation and identify potential question-answer pairs.
-              </p>
-              <Button onClick={handleStartExtraction}>
-                <Brain className="h-4 w-4 mr-2" />
-                Start Extraction
-              </Button>
-            </div>
-          </div>
-        ) : (
-          <div className="flex items-center justify-center h-32">
-            <div className="text-center">
-              <MessageCircle className="h-12 w-12 mx-auto mb-4 text-muted-foreground opacity-50" />
-              <h3 className="text-lg font-medium mb-2">No Conversation Segments</h3>
-              <p className="text-sm text-muted-foreground">
-                Please provide conversation segments to extract Q&A pairs.
-              </p>
-            </div>
-          </div>
-        )}
-      </ScrollArea>
-
-      {/* Status Bar */}
-      <div className="flex items-center justify-between p-2 border-t text-xs text-muted-foreground">
-        <div className="flex items-center gap-4">
-          <span>{filteredAndSortedPairs.length} of {state.extractedPairs.length} pairs shown</span>
-          {state.selectedPairs.size > 0 && (
-            <span>{state.selectedPairs.size} selected</span>
-          )}
-        </div>
-        <div className="flex items-center gap-4">
-          <span>{stats.approved} approved</span>
-          <span>{stats.needsReview} need review</span>
-          {stats.flagged > 0 && <span>{stats.flagged} flagged</span>}
-        </div>
-      </div>
-    </div>
-  )
-}
-
-export default QAPairExtractor
\ No newline at end of file
diff --git a/frontend/components/feedme/RichTextEditor.tsx b/frontend/components/feedme/RichTextEditor.tsx
deleted file mode 100644
index cf171b7..0000000
--- a/frontend/components/feedme/RichTextEditor.tsx
+++ /dev/null
@@ -1,332 +0,0 @@
-/**
- * Rich Text Editor Component
- * Simple rich text editor with formatting toolbar for transcript editing
- * 
- * Features:
- * - Basic formatting (bold, italic, underline)
- * - Line breaks and paragraphs
- * - Keyboard shortcuts
- * - Undo/redo functionality
- * - Auto-save capabilities
- */
-
-'use client'
-
-import React, { useRef, useEffect, useState, useCallback } from 'react'
-import { Button } from '../ui/button'
-import { 
-  Bold, 
-  Italic, 
-  Underline, 
-  Undo2, 
-  Redo2,
-  Type,
-  AlignLeft,
-  List
-} from 'lucide-react'
-import { cn } from '../../lib/utils'
-
-interface RichTextEditorProps {
-  value: string
-  onChange: (value: string) => void
-  placeholder?: string
-  className?: string
-  disabled?: boolean
-}
-
-interface ToolbarButtonProps {
-  command: string
-  icon: React.ReactNode
-  title: string
-  isActive?: boolean
-  onClick: () => void
-}
-
-function ToolbarButton({ command, icon, title, isActive, onClick }: ToolbarButtonProps) {
-  return (
-    <Button
-      type="button"
-      variant={isActive ? "default" : "ghost"}
-      size="sm"
-      className={cn(
-        "h-8 w-8 p-0",
-        isActive && "bg-accent text-accent-foreground"
-      )}
-      onClick={onClick}
-      title={title}
-      aria-label={title}
-      aria-pressed={isActive}
-      role="button"
-    >
-      {icon}
-    </Button>
-  )
-}
-
-export function RichTextEditor({ 
-  value, 
-  onChange, 
-  placeholder = "Start typing...", 
-  className,
-  disabled = false 
-}: RichTextEditorProps) {
-  const editorRef = useRef<HTMLDivElement>(null)
-  const [isEditorFocused, setIsEditorFocused] = useState(false)
-  const [toolbarState, setToolbarState] = useState({
-    bold: false,
-    italic: false,
-    underline: false
-  })
-
-  // Initialize editor content
-  useEffect(() => {
-    if (editorRef.current && editorRef.current.innerHTML !== value) {
-      editorRef.current.innerHTML = value
-    }
-  }, [value])
-
-  // Update toolbar state based on current selection
-  const updateToolbarState = useCallback(() => {
-    if (disabled) return
-    
-    try {
-      const selection = window.getSelection()
-      if (!selection || selection.rangeCount === 0) return
-      
-      const range = selection.getRangeAt(0)
-      const parentElement = range.commonAncestorContainer.nodeType === Node.TEXT_NODE 
-        ? range.commonAncestorContainer.parentElement 
-        : range.commonAncestorContainer as Element
-      
-      if (!parentElement) return
-      
-      // Check for formatting by traversing parent elements
-      let element = parentElement
-      const state = { bold: false, italic: false, underline: false }
-      
-      while (element && element !== editorRef.current) {
-        const style = window.getComputedStyle(element)
-        if (style.fontWeight === 'bold' || style.fontWeight === '700' || element.tagName === 'B' || element.tagName === 'STRONG') {
-          state.bold = true
-        }
-        if (style.fontStyle === 'italic' || element.tagName === 'I' || element.tagName === 'EM') {
-          state.italic = true
-        }
-        if (style.textDecoration.includes('underline') || element.tagName === 'U') {
-          state.underline = true
-        }
-        element = element.parentElement as Element
-      }
-      
-      setToolbarState(state)
-    } catch (error) {
-      // Ignore errors in selection detection
-      console.warn('Error updating toolbar state:', error)
-    }
-  }, [disabled])
-
-  // Handle content changes
-  const handleInput = useCallback((e: React.FormEvent<HTMLDivElement>) => {
-    if (disabled) return
-    
-    const target = e.target as HTMLDivElement
-    const content = target.innerHTML
-    onChange(content)
-  }, [onChange, disabled])
-
-  // Handle keyboard shortcuts
-  const handleKeyDown = useCallback((e: React.KeyboardEvent<HTMLDivElement>) => {
-    if (disabled) return
-
-    // Ctrl/Cmd + B for bold
-    if ((e.ctrlKey || e.metaKey) && e.key === 'b') {
-      e.preventDefault()
-      execCommand('bold')
-    }
-    
-    // Ctrl/Cmd + I for italic
-    if ((e.ctrlKey || e.metaKey) && e.key === 'i') {
-      e.preventDefault()
-      execCommand('italic')
-    }
-    
-    // Ctrl/Cmd + U for underline
-    if ((e.ctrlKey || e.metaKey) && e.key === 'u') {
-      e.preventDefault()
-      execCommand('underline')
-    }
-
-    // Ctrl/Cmd + Z for undo
-    if ((e.ctrlKey || e.metaKey) && e.key === 'z' && !e.shiftKey) {
-      e.preventDefault()
-      execCommand('undo')
-    }
-
-    // Ctrl/Cmd + Y or Ctrl/Cmd + Shift + Z for redo
-    if ((e.ctrlKey || e.metaKey) && (e.key === 'y' || (e.key === 'z' && e.shiftKey))) {
-      e.preventDefault()
-      execCommand('redo')
-    }
-  }, [disabled])
-
-  // Execute formatting commands
-  const execCommand = useCallback((command: string, value?: string) => {
-    if (disabled) return
-    
-    try {
-      document.execCommand(command, false, value)
-      updateToolbarState()
-      
-      // Trigger onChange to capture the updated content
-      if (editorRef.current) {
-        onChange(editorRef.current.innerHTML)
-      }
-    } catch (error) {
-      console.warn('Failed to execute command:', command, error)
-    }
-  }, [disabled, onChange, updateToolbarState])
-
-  // Handle selection changes
-  useEffect(() => {
-    const handleSelectionChange = () => {
-      if (isEditorFocused) {
-        updateToolbarState()
-      }
-    }
-
-    document.addEventListener('selectionchange', handleSelectionChange)
-    return () => document.removeEventListener('selectionchange', handleSelectionChange)
-  }, [isEditorFocused, updateToolbarState])
-
-  // Focus management
-  const handleFocus = () => {
-    setIsEditorFocused(true)
-    updateToolbarState()
-  }
-
-  const handleBlur = () => {
-    setIsEditorFocused(false)
-  }
-
-  // Paste handling to clean up pasted content
-  const handlePaste = useCallback((e: React.ClipboardEvent<HTMLDivElement>) => {
-    if (disabled) return
-
-    e.preventDefault()
-    
-    // Get plain text from clipboard
-    const text = e.clipboardData.getData('text/plain')
-    
-    // Insert as plain text to avoid unwanted formatting
-    document.execCommand('insertText', false, text)
-    
-    // Update content
-    if (editorRef.current) {
-      onChange(editorRef.current.innerHTML)
-    }
-  }, [disabled, onChange])
-
-  return (
-    <div className={cn("border rounded-md overflow-hidden", className)}>
-      {/* Toolbar */}
-      <div 
-        role="toolbar" 
-        className="flex items-center gap-1 p-2 border-b bg-muted/30"
-        aria-label="Text formatting toolbar"
-      >
-        <div className="flex items-center gap-1">
-          <ToolbarButton
-            command="bold"
-            icon={<Bold className="h-4 w-4" />}
-            title="Bold (Ctrl+B)"
-            isActive={toolbarState.bold}
-            onClick={() => execCommand('bold')}
-          />
-          <ToolbarButton
-            command="italic"
-            icon={<Italic className="h-4 w-4" />}
-            title="Italic (Ctrl+I)"
-            isActive={toolbarState.italic}
-            onClick={() => execCommand('italic')}
-          />
-          <ToolbarButton
-            command="underline"
-            icon={<Underline className="h-4 w-4" />}
-            title="Underline (Ctrl+U)"
-            isActive={toolbarState.underline}
-            onClick={() => execCommand('underline')}
-          />
-        </div>
-
-        <div className="w-px h-6 bg-border mx-2" />
-
-        <div className="flex items-center gap-1">
-          <ToolbarButton
-            command="insertUnorderedList"
-            icon={<List className="h-4 w-4" />}
-            title="Bullet List"
-            onClick={() => execCommand('insertUnorderedList')}
-          />
-        </div>
-
-        <div className="w-px h-6 bg-border mx-2" />
-
-        <div className="flex items-center gap-1">
-          <ToolbarButton
-            command="undo"
-            icon={<Undo2 className="h-4 w-4" />}
-            title="Undo (Ctrl+Z)"
-            onClick={() => execCommand('undo')}
-          />
-          <ToolbarButton
-            command="redo"
-            icon={<Redo2 className="h-4 w-4" />}
-            title="Redo (Ctrl+Y)"
-            onClick={() => execCommand('redo')}
-          />
-        </div>
-
-        <div className="flex-1" />
-
-        <div className="text-xs text-muted-foreground">
-          Ctrl+B/I/U for formatting
-        </div>
-      </div>
-
-      {/* Editor */}
-      <div
-        ref={editorRef}
-        contentEditable={!disabled}
-        className={cn(
-          "min-h-[200px] max-h-[400px] overflow-y-auto p-4 focus:outline-none",
-          "prose prose-sm max-w-none",
-          "[&>*]:my-1 [&>*:first-child]:mt-0 [&>*:last-child]:mb-0",
-          disabled && "opacity-50 cursor-not-allowed"
-        )}
-        onInput={handleInput}
-        onKeyDown={handleKeyDown}
-        onFocus={handleFocus}
-        onBlur={handleBlur}
-        onPaste={handlePaste}
-        role="textbox"
-        aria-label="Transcript content"
-        aria-multiline="true"
-        style={{
-          whiteSpace: 'pre-wrap',
-          wordBreak: 'break-word'
-        }}
-        data-placeholder={placeholder}
-      />
-
-      {/* Placeholder styling */}
-      <style jsx>{`
-        [contenteditable][data-placeholder]:empty:before {
-          content: attr(data-placeholder);
-          color: #9ca3af;
-          pointer-events: none;
-          position: absolute;
-        }
-      `}</style>
-    </div>
-  )
-}
\ No newline at end of file
diff --git a/frontend/components/feedme/SearchResultsGrid.tsx b/frontend/components/feedme/SearchResultsGrid.tsx
deleted file mode 100644
index 0da9d54..0000000
--- a/frontend/components/feedme/SearchResultsGrid.tsx
+++ /dev/null
@@ -1,882 +0,0 @@
-/**
- * SearchResultsGrid Component
- * 
- * Rich result cards with relevance scoring, infinite scroll with virtualization,
- * preview modal for quick content review, and export selected results functionality.
- * 
- * Part of FeedMe v2.0 Phase 3D: Advanced Search Interface
- */
-
-'use client'
-
-import React, { useState, useCallback, useMemo, useRef, useEffect } from 'react'
-import { FixedSizeGrid as Grid } from 'react-window'
-import InfiniteLoader from 'react-window-infinite-loader'
-import { 
-  Star, Eye, Download, ExternalLink, Clock, CheckCircle2,
-  Filter, SortAsc, Grid3X3, List, MoreHorizontal, Share,
-  FileText, MessageCircle, Tag, Calendar, User, Zap,
-  ArrowUpDown, TrendingUp, Search, X, Plus, Minus
-} from 'lucide-react'
-import { useSearch, useActions } from '@/lib/stores/feedme-store'
-import { cn } from '@/lib/utils'
-import { Card, CardContent, CardHeader } from '@/components/ui/card'
-import { Badge } from '@/components/ui/badge'
-import { Button } from '@/components/ui/button'
-import { Checkbox } from '@/components/ui/checkbox'
-import { Progress } from '@/components/ui/progress'
-import { Separator } from '@/components/ui/separator'
-import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
-import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuSeparator, DropdownMenuTrigger } from '@/components/ui/dropdown-menu'
-import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip'
-import { ScrollArea } from '@/components/ui/scroll-area'
-import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from '@/components/ui/dialog'
-import { Input } from '@/components/ui/input'
-import { Textarea } from '@/components/ui/textarea'
-
-// Types
-interface SearchResultsGridProps {
-  results: SearchResult[]
-  totalResults: number
-  isLoading: boolean
-  hasNextPage?: boolean
-  onLoadMore?: () => Promise<void>
-  onResultSelect?: (resultId: string) => void
-  onResultPreview?: (resultId: string) => void
-  onExportSelected?: (resultIds: string[]) => void
-  enableInfiniteScroll?: boolean
-  enableVirtualization?: boolean
-  itemsPerRow?: number
-  className?: string
-}
-
-interface SearchResult {
-  id: string
-  type: 'conversation' | 'qa_pair' | 'example'
-  title: string
-  content: string
-  snippet: string
-  score: number
-  relevanceFactors: RelevanceFactor[]
-  metadata: ResultMetadata
-  highlights: string[]
-  tags: string[]
-  source: {
-    id: string
-    name: string
-    type: 'file' | 'folder' | 'system'
-  }
-  createdAt: string
-  updatedAt: string
-}
-
-interface RelevanceFactor {
-  type: 'keyword_match' | 'semantic_similarity' | 'context_relevance' | 'quality_score'
-  score: number
-  weight: number
-  description: string
-}
-
-interface ResultMetadata {
-  platform?: string
-  confidence?: number
-  qualityScore?: number
-  sentiment?: 'positive' | 'neutral' | 'negative'
-  category?: string
-  priority?: 'high' | 'medium' | 'low'
-  processingStatus?: 'completed' | 'processing' | 'failed'
-  approvalStatus?: 'approved' | 'pending' | 'rejected'
-  wordCount?: number
-  exampleCount?: number
-}
-
-interface GridItemProps {
-  columnIndex: number
-  rowIndex: number
-  style: React.CSSProperties
-  data: {
-    results: SearchResult[]
-    itemsPerRow: number
-    selectedResults: Set<string>
-    onSelect: (resultId: string, selected: boolean) => void
-    onPreview: (resultId: string) => void
-    viewMode: 'grid' | 'list'
-  }
-}
-
-// Relevance Score Component
-const RelevanceScoreIndicator: React.FC<{ 
-  score: number,
-  factors: RelevanceFactor[],
-  showDetails?: boolean
-}> = ({ score, factors, showDetails = false }) => {
-  const getScoreColor = (score: number) => {
-    if (score >= 0.8) return 'text-green-600 bg-green-100'
-    if (score >= 0.6) return 'text-yellow-600 bg-yellow-100'
-    return 'text-red-600 bg-red-100'
-  }
-
-  const scorePercentage = Math.round(score * 100)
-
-  return (
-    <TooltipProvider>
-      <Tooltip>
-        <TooltipTrigger>
-          <div className={cn(
-            'flex items-center gap-1 px-2 py-1 rounded-full text-xs font-medium',
-            getScoreColor(score)
-          )}>
-            <Star className="h-3 w-3" />
-            {scorePercentage}%
-          </div>
-        </TooltipTrigger>
-        <TooltipContent className="max-w-xs">
-          <div className="space-y-2">
-            <p className="font-medium">Relevance Score: {scorePercentage}%</p>
-            {showDetails && (
-              <div className="space-y-1 text-xs">
-                {factors.map((factor, index) => (
-                  <div key={index} className="flex justify-between">
-                    <span>{factor.description}:</span>
-                    <span>{Math.round(factor.score * 100)}%</span>
-                  </div>
-                ))}
-              </div>
-            )}
-          </div>
-        </TooltipContent>
-      </Tooltip>
-    </TooltipProvider>
-  )
-}
-
-// Result Type Badge
-const ResultTypeBadge: React.FC<{ type: SearchResult['type'] }> = ({ type }) => {
-  const config = {
-    conversation: { icon: MessageCircle, label: 'Conversation', color: 'bg-blue-100 text-blue-800' },
-    qa_pair: { icon: FileText, label: 'Q&A Pair', color: 'bg-green-100 text-green-800' },
-    example: { icon: Zap, label: 'Example', color: 'bg-purple-100 text-purple-800' }
-  }
-
-  const { icon: Icon, label, color } = config[type]
-
-  return (
-    <Badge variant="secondary" className={cn('text-xs', color)}>
-      <Icon className="h-3 w-3 mr-1" />
-      {label}
-    </Badge>
-  )
-}
-
-// Metadata Display Component
-const MetadataDisplay: React.FC<{ metadata: ResultMetadata }> = ({ metadata }) => {
-  return (
-    <div className="flex items-center gap-2 text-xs text-muted-foreground">
-      {metadata.platform && (
-        <span className="capitalize">{metadata.platform}</span>
-      )}
-      {metadata.confidence && (
-        <span>{Math.round(metadata.confidence * 100)}% conf</span>
-      )}
-      {metadata.qualityScore && (
-        <span>{Math.round(metadata.qualityScore * 100)}% quality</span>
-      )}
-      {metadata.sentiment && (
-        <Badge variant="outline" className={cn(
-          'text-xs',
-          metadata.sentiment === 'positive' && 'text-green-600',
-          metadata.sentiment === 'negative' && 'text-red-600'
-        )}>
-          {metadata.sentiment}
-        </Badge>
-      )}
-    </div>
-  )
-}
-
-// Highlights Component
-const HighlightsDisplay: React.FC<{ 
-  content: string, 
-  highlights: string[],
-  maxLength?: number 
-}> = ({ content, highlights, maxLength = 200 }) => {
-  const highlightedContent = useMemo(() => {
-    let result = content
-    
-    // Truncate if needed
-    if (result.length > maxLength) {
-      result = result.substring(0, maxLength) + '...'
-    }
-    
-    // Apply highlights
-    highlights.forEach(highlight => {
-      const regex = new RegExp(`(${highlight})`, 'gi')
-      result = result.replace(regex, '<mark>$1</mark>')
-    })
-    
-    return result
-  }, [content, highlights, maxLength])
-
-  return (
-    <div 
-      className="text-sm leading-relaxed"
-      dangerouslySetInnerHTML={{ __html: highlightedContent }}
-    />
-  )
-}
-
-// Grid Item Component
-const GridItem: React.FC<GridItemProps> = ({ columnIndex, rowIndex, style, data }) => {
-  const { results, itemsPerRow, selectedResults, onSelect, onPreview, viewMode } = data
-  const index = rowIndex * itemsPerRow + columnIndex
-  const result = results[index]
-
-  if (!result) {
-    return <div style={style} />
-  }
-
-  const isSelected = selectedResults.has(result.id)
-  const [isHovered, setIsHovered] = useState(false)
-
-  const handleSelect = useCallback((checked: boolean) => {
-    onSelect(result.id, checked)
-  }, [result.id, onSelect])
-
-  const handlePreview = useCallback(() => {
-    onPreview(result.id)
-  }, [result.id, onPreview])
-
-  if (viewMode === 'list') {
-    return (
-      <div style={style} className="p-2">
-        <Card className={cn(
-          'transition-all duration-200 cursor-pointer',
-          isSelected && 'ring-2 ring-accent shadow-md',
-          'hover:shadow-sm'
-        )}>
-          <CardContent className="p-4">
-            <div className="flex items-start gap-3">
-              <Checkbox
-                checked={isSelected}
-                onCheckedChange={handleSelect}
-                onClick={(e) => e.stopPropagation()}
-              />
-              
-              <div className="flex-1 min-w-0 space-y-2">
-                {/* Header */}
-                <div className="flex items-start justify-between gap-2">
-                  <div className="flex items-center gap-2 min-w-0 flex-1">
-                    <ResultTypeBadge type={result.type} />
-                    <h3 className="font-medium text-sm truncate">{result.title}</h3>
-                  </div>
-                  <RelevanceScoreIndicator 
-                    score={result.score} 
-                    factors={result.relevanceFactors}
-                    showDetails 
-                  />
-                </div>
-
-                {/* Content */}
-                <HighlightsDisplay 
-                  content={result.snippet} 
-                  highlights={result.highlights}
-                  maxLength={150}
-                />
-
-                {/* Tags */}
-                {result.tags.length > 0 && (
-                  <div className="flex gap-1 flex-wrap">
-                    {result.tags.slice(0, 3).map(tag => (
-                      <Badge key={tag} variant="outline" className="text-xs">
-                        {tag}
-                      </Badge>
-                    ))}
-                    {result.tags.length > 3 && (
-                      <Badge variant="outline" className="text-xs">
-                        +{result.tags.length - 3}
-                      </Badge>
-                    )}
-                  </div>
-                )}
-
-                {/* Footer */}
-                <div className="flex items-center justify-between">
-                  <MetadataDisplay metadata={result.metadata} />
-                  <div className="flex items-center gap-1">
-                    <Button
-                      variant="ghost"
-                      size="sm"
-                      onClick={handlePreview}
-                      className="h-6 px-2"
-                    >
-                      <Eye className="h-3 w-3" />
-                    </Button>
-                    <DropdownMenu>
-                      <DropdownMenuTrigger asChild>
-                        <Button variant="ghost" size="sm" className="h-6 w-6 p-0">
-                          <MoreHorizontal className="h-3 w-3" />
-                        </Button>
-                      </DropdownMenuTrigger>
-                      <DropdownMenuContent align="end">
-                        <DropdownMenuItem onClick={handlePreview}>
-                          <Eye className="h-3 w-3 mr-2" />
-                          Preview
-                        </DropdownMenuItem>
-                        <DropdownMenuItem>
-                          <ExternalLink className="h-3 w-3 mr-2" />
-                          Open
-                        </DropdownMenuItem>
-                        <DropdownMenuItem>
-                          <Share className="h-3 w-3 mr-2" />
-                          Share
-                        </DropdownMenuItem>
-                        <DropdownMenuSeparator />
-                        <DropdownMenuItem>
-                          <Download className="h-3 w-3 mr-2" />
-                          Export
-                        </DropdownMenuItem>
-                      </DropdownMenuContent>
-                    </DropdownMenu>
-                  </div>
-                </div>
-              </div>
-            </div>
-          </CardContent>
-        </Card>
-      </div>
-    )
-  }
-
-  // Grid view
-  return (
-    <div style={style} className="p-2">
-      <Card 
-        className={cn(
-          'h-full transition-all duration-200 cursor-pointer',
-          isSelected && 'ring-2 ring-accent shadow-md',
-          'hover:shadow-md hover:scale-[1.02]',
-          'group'
-        )}
-        onMouseEnter={() => setIsHovered(true)}
-        onMouseLeave={() => setIsHovered(false)}
-        onClick={handlePreview}
-      >
-        <CardHeader className="pb-2">
-          <div className="flex items-start justify-between gap-2">
-            <Checkbox
-              checked={isSelected}
-              onCheckedChange={handleSelect}
-              onClick={(e) => e.stopPropagation()}
-              className="flex-shrink-0"
-            />
-            <RelevanceScoreIndicator 
-              score={result.score} 
-              factors={result.relevanceFactors}
-            />
-          </div>
-        </CardHeader>
-
-        <CardContent className="pt-0 space-y-3">
-          {/* Type and Title */}
-          <div>
-            <ResultTypeBadge type={result.type} />
-            <h3 className="font-medium text-sm mt-1 line-clamp-2">{result.title}</h3>
-          </div>
-
-          {/* Content Preview */}
-          <HighlightsDisplay 
-            content={result.snippet} 
-            highlights={result.highlights}
-            maxLength={120}
-          />
-
-          {/* Tags */}
-          {result.tags.length > 0 && (
-            <div className="flex gap-1 flex-wrap">
-              {result.tags.slice(0, 2).map(tag => (
-                <Badge key={tag} variant="outline" className="text-xs">
-                  {tag}
-                </Badge>
-              ))}
-              {result.tags.length > 2 && (
-                <Badge variant="outline" className="text-xs">
-                  +{result.tags.length - 2}
-                </Badge>
-              )}
-            </div>
-          )}
-
-          {/* Footer */}
-          <div className="flex items-center justify-between text-xs text-muted-foreground">
-            <span>{new Date(result.createdAt).toLocaleDateString()}</span>
-            {(isHovered || isSelected) && (
-              <div className="flex gap-1 opacity-0 group-hover:opacity-100 transition-opacity">
-                <Button
-                  variant="ghost"
-                  size="sm"
-                  onClick={(e) => {
-                    e.stopPropagation()
-                    handlePreview()
-                  }}
-                  className="h-5 w-5 p-0"
-                >
-                  <Eye className="h-3 w-3" />
-                </Button>
-                <Button
-                  variant="ghost"
-                  size="sm"
-                  className="h-5 w-5 p-0"
-                  onClick={(e) => e.stopPropagation()}
-                >
-                  <MoreHorizontal className="h-3 w-3" />
-                </Button>
-              </div>
-            )}
-          </div>
-        </CardContent>
-      </Card>
-    </div>
-  )
-}
-
-// Preview Modal Component
-const PreviewModal: React.FC<{
-  result: SearchResult | null
-  isOpen: boolean
-  onClose: () => void
-}> = ({ result, isOpen, onClose }) => {
-  if (!result) return null
-
-  return (
-    <Dialog open={isOpen} onOpenChange={onClose}>
-      <DialogContent className="max-w-4xl max-h-[80vh] overflow-hidden">
-        <DialogHeader>
-          <div className="flex items-center gap-2">
-            <ResultTypeBadge type={result.type} />
-            <DialogTitle className="flex-1">{result.title}</DialogTitle>
-            <RelevanceScoreIndicator 
-              score={result.score} 
-              factors={result.relevanceFactors}
-              showDetails
-            />
-          </div>
-          <DialogDescription className="flex items-center gap-4 text-sm">
-            <span>Source: {result.source.name}</span>
-            <span>Created: {new Date(result.createdAt).toLocaleDateString()}</span>
-            {result.metadata.platform && (
-              <span>Platform: {result.metadata.platform}</span>
-            )}
-          </DialogDescription>
-        </DialogHeader>
-
-        <ScrollArea className="max-h-96 mt-4">
-          <div className="space-y-4">
-            {/* Content */}
-            <div>
-              <h4 className="font-medium mb-2">Content</h4>
-              <div className="p-3 bg-muted rounded text-sm leading-relaxed">
-                {result.content}
-              </div>
-            </div>
-
-            {/* Metadata */}
-            <div>
-              <h4 className="font-medium mb-2">Metadata</h4>
-              <div className="grid grid-cols-2 gap-4 text-sm">
-                {result.metadata.confidence && (
-                  <div>
-                    <span className="text-muted-foreground">Confidence:</span>
-                    <span className="ml-2 font-medium">{Math.round(result.metadata.confidence * 100)}%</span>
-                  </div>
-                )}
-                {result.metadata.qualityScore && (
-                  <div>
-                    <span className="text-muted-foreground">Quality:</span>
-                    <span className="ml-2 font-medium">{Math.round(result.metadata.qualityScore * 100)}%</span>
-                  </div>
-                )}
-                {result.metadata.wordCount && (
-                  <div>
-                    <span className="text-muted-foreground">Words:</span>
-                    <span className="ml-2 font-medium">{result.metadata.wordCount}</span>
-                  </div>
-                )}
-                {result.metadata.category && (
-                  <div>
-                    <span className="text-muted-foreground">Category:</span>
-                    <span className="ml-2 font-medium">{result.metadata.category}</span>
-                  </div>
-                )}
-              </div>
-            </div>
-
-            {/* Tags */}
-            {result.tags.length > 0 && (
-              <div>
-                <h4 className="font-medium mb-2">Tags</h4>
-                <div className="flex gap-1 flex-wrap">
-                  {result.tags.map(tag => (
-                    <Badge key={tag} variant="outline" className="text-xs">
-                      {tag}
-                    </Badge>
-                  ))}
-                </div>
-              </div>
-            )}
-
-            {/* Relevance Factors */}
-            <div>
-              <h4 className="font-medium mb-2">Relevance Factors</h4>
-              <div className="space-y-2">
-                {result.relevanceFactors.map((factor, index) => (
-                  <div key={index} className="flex items-center justify-between p-2 bg-muted rounded">
-                    <span className="text-sm">{factor.description}</span>
-                    <div className="flex items-center gap-2">
-                      <Progress value={factor.score * 100} className="w-16 h-2" />
-                      <span className="text-xs font-medium w-10 text-right">
-                        {Math.round(factor.score * 100)}%
-                      </span>
-                    </div>
-                  </div>
-                ))}
-              </div>
-            </div>
-          </div>
-        </ScrollArea>
-
-        <div className="flex items-center justify-between mt-4 pt-4 border-t">
-          <div className="flex gap-2">
-            <Button variant="outline" size="sm">
-              <ExternalLink className="h-3 w-3 mr-1" />
-              Open Full View
-            </Button>
-            <Button variant="outline" size="sm">
-              <Share className="h-3 w-3 mr-1" />
-              Share
-            </Button>
-          </div>
-          <Button variant="default" size="sm" onClick={onClose}>
-            Close
-          </Button>
-        </div>
-      </DialogContent>
-    </Dialog>
-  )
-}
-
-// Main Component
-export const SearchResultsGrid: React.FC<SearchResultsGridProps> = ({
-  results,
-  totalResults,
-  isLoading,
-  hasNextPage = false,
-  onLoadMore,
-  onResultSelect,
-  onResultPreview,
-  onExportSelected,
-  enableInfiniteScroll = true,
-  enableVirtualization = true,
-  itemsPerRow = 3,
-  className
-}) => {
-  const [selectedResults, setSelectedResults] = useState<Set<string>>(new Set())
-  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid')
-  const [sortBy, setSortBy] = useState<'relevance' | 'date' | 'quality'>('relevance')
-  const [sortOrder, setSortOrder] = useState<'asc' | 'desc'>('desc')
-  const [previewResult, setPreviewResult] = useState<SearchResult | null>(null)
-  const [showPreview, setShowPreview] = useState(false)
-  
-  const gridRef = useRef<any>(null)
-
-  // Sort results
-  const sortedResults = useMemo(() => {
-    const sorted = [...results]
-    
-    sorted.sort((a, b) => {
-      const multiplier = sortOrder === 'asc' ? 1 : -1
-      
-      switch (sortBy) {
-        case 'relevance':
-          return (a.score - b.score) * multiplier
-        case 'date':
-          return (new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime()) * multiplier
-        case 'quality':
-          return ((a.metadata.qualityScore || 0) - (b.metadata.qualityScore || 0)) * multiplier
-        default:
-          return 0
-      }
-    })
-    
-    return sorted
-  }, [results, sortBy, sortOrder])
-
-  // Calculate grid dimensions
-  const itemHeight = viewMode === 'grid' ? 280 : 120
-  const itemWidth = viewMode === 'grid' ? 300 : 800
-  const actualItemsPerRow = viewMode === 'grid' ? itemsPerRow : 1
-  const rowCount = Math.ceil(sortedResults.length / actualItemsPerRow)
-
-  // Handle result selection
-  const handleResultSelect = useCallback((resultId: string, selected: boolean) => {
-    setSelectedResults(prev => {
-      const newSet = new Set(prev)
-      if (selected) {
-        newSet.add(resultId)
-      } else {
-        newSet.delete(resultId)
-      }
-      return newSet
-    })
-    onResultSelect?.(resultId)
-  }, [onResultSelect])
-
-  // Handle result preview
-  const handleResultPreview = useCallback((resultId: string) => {
-    const result = sortedResults.find(r => r.id === resultId)
-    if (result) {
-      setPreviewResult(result)
-      setShowPreview(true)
-      onResultPreview?.(resultId)
-    }
-  }, [sortedResults, onResultPreview])
-
-  // Handle select all
-  const handleSelectAll = useCallback(() => {
-    const allSelected = sortedResults.every(r => selectedResults.has(r.id))
-    if (allSelected) {
-      setSelectedResults(new Set())
-    } else {
-      setSelectedResults(new Set(sortedResults.map(r => r.id)))
-    }
-  }, [sortedResults, selectedResults])
-
-  // Handle export selected
-  const handleExportSelected = useCallback(() => {
-    onExportSelected?.(Array.from(selectedResults))
-  }, [selectedResults, onExportSelected])
-
-  // Item data for virtualization
-  const itemData = useMemo(() => ({
-    results: sortedResults,
-    itemsPerRow: actualItemsPerRow,
-    selectedResults,
-    onSelect: handleResultSelect,
-    onPreview: handleResultPreview,
-    viewMode
-  }), [sortedResults, actualItemsPerRow, selectedResults, handleResultSelect, handleResultPreview, viewMode])
-
-  // Infinite loading helper
-  const isItemLoaded = useCallback((index: number) => {
-    return !!sortedResults[index]
-  }, [sortedResults])
-
-  const loadMoreItems = useCallback(async () => {
-    if (hasNextPage && onLoadMore) {
-      await onLoadMore()
-    }
-  }, [hasNextPage, onLoadMore])
-
-  return (
-    <div className={cn('h-full flex flex-col', className)}>
-      {/* Header */}
-      <div className="flex items-center justify-between p-4 border-b">
-        <div className="flex items-center gap-3">
-          <h2 className="text-lg font-medium">Search Results</h2>
-          <Badge variant="outline">
-            {totalResults.toLocaleString()} results
-          </Badge>
-          {selectedResults.size > 0 && (
-            <Badge variant="default">
-              {selectedResults.size} selected
-            </Badge>
-          )}
-        </div>
-
-        <div className="flex items-center gap-2">
-          {selectedResults.size > 0 && (
-            <>
-              <Button variant="outline" size="sm" onClick={handleExportSelected}>
-                <Download className="h-3 w-3 mr-1" />
-                Export ({selectedResults.size})
-              </Button>
-              <Separator orientation="vertical" className="h-4" />
-            </>
-          )}
-
-          <Button
-            variant="outline"
-            size="sm"
-            onClick={handleSelectAll}
-            disabled={sortedResults.length === 0}
-          >
-            {sortedResults.every(r => selectedResults.has(r.id)) ? 'Deselect All' : 'Select All'}
-          </Button>
-
-          <Select value={sortBy} onValueChange={(value: any) => setSortBy(value)}>
-            <SelectTrigger className="w-32">
-              <SelectValue />
-            </SelectTrigger>
-            <SelectContent>
-              <SelectItem value="relevance">Relevance</SelectItem>
-              <SelectItem value="date">Date</SelectItem>
-              <SelectItem value="quality">Quality</SelectItem>
-            </SelectContent>
-          </Select>
-
-          <Button
-            variant="ghost"
-            size="sm"
-            onClick={() => setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc')}
-          >
-            <ArrowUpDown className={cn('h-3 w-3', sortOrder === 'desc' && 'rotate-180')} />
-          </Button>
-
-          <div className="flex items-center border rounded-md">
-            <Button
-              variant={viewMode === 'grid' ? 'default' : 'ghost'}
-              size="sm"
-              onClick={() => setViewMode('grid')}
-              className="rounded-r-none"
-            >
-              <Grid3X3 className="h-3 w-3" />
-            </Button>
-            <Button
-              variant={viewMode === 'list' ? 'default' : 'ghost'}
-              size="sm"
-              onClick={() => setViewMode('list')}
-              className="rounded-l-none"
-            >
-              <List className="h-3 w-3" />
-            </Button>
-          </div>
-        </div>
-      </div>
-
-      {/* Results Grid */}
-      <div className="flex-1 overflow-hidden">
-        {isLoading && sortedResults.length === 0 ? (
-          <div className="flex items-center justify-center h-full">
-            <div className="text-center">
-              <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-accent mx-auto mb-4" />
-              <p className="text-sm text-muted-foreground">Searching...</p>
-            </div>
-          </div>
-        ) : sortedResults.length > 0 ? (
-          enableVirtualization && enableInfiniteScroll ? (
-            <InfiniteLoader
-              isItemLoaded={isItemLoaded}
-              itemCount={hasNextPage ? sortedResults.length + 1 : sortedResults.length}
-              loadMoreItems={loadMoreItems}
-            >
-              {({ onItemsRendered, ref }) => (
-                <Grid
-                  ref={(grid) => {
-                    gridRef.current = grid
-                    ref(grid)
-                  }}
-                  columnCount={actualItemsPerRow}
-                  columnWidth={itemWidth}
-                  height={600}
-                  rowCount={rowCount}
-                  rowHeight={itemHeight}
-                  itemData={itemData}
-                  onItemsRendered={({
-                    visibleRowStartIndex,
-                    visibleRowStopIndex,
-                    overscanRowStopIndex
-                  }) => {
-                    onItemsRendered({
-                      overscanStartIndex: visibleRowStartIndex * actualItemsPerRow,
-                      overscanStopIndex: overscanRowStopIndex * actualItemsPerRow,
-                      visibleStartIndex: visibleRowStartIndex * actualItemsPerRow,
-                      visibleStopIndex: visibleRowStopIndex * actualItemsPerRow
-                    })
-                  }}
-                  width="100%"
-                >
-                  {GridItem}
-                </Grid>
-              )}
-            </InfiniteLoader>
-          ) : (
-            <ScrollArea className="h-full p-4">
-              <div className={cn(
-                viewMode === 'grid' 
-                  ? 'grid gap-4'
-                  : 'space-y-4',
-                viewMode === 'grid' && 'grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4'
-              )}>
-                {sortedResults.map((result, index) => (
-                  <GridItem
-                    key={result.id}
-                    columnIndex={viewMode === 'grid' ? index % actualItemsPerRow : 0}
-                    rowIndex={viewMode === 'grid' ? Math.floor(index / actualItemsPerRow) : index}
-                    style={{}}
-                    data={itemData}
-                  />
-                ))}
-              </div>
-              
-              {/* Load More Button */}
-              {hasNextPage && !isLoading && (
-                <div className="flex justify-center mt-6">
-                  <Button variant="outline" onClick={loadMoreItems}>
-                    Load More Results
-                  </Button>
-                </div>
-              )}
-              
-              {/* Loading Indicator */}
-              {isLoading && (
-                <div className="flex justify-center mt-6">
-                  <div className="flex items-center gap-2">
-                    <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-accent" />
-                    <span className="text-sm text-muted-foreground">Loading more...</span>
-                  </div>
-                </div>
-              )}
-            </ScrollArea>
-          )
-        ) : (
-          <div className="flex items-center justify-center h-full">
-            <div className="text-center">
-              <Search className="h-12 w-12 mx-auto mb-4 text-muted-foreground opacity-50" />
-              <h3 className="text-lg font-medium mb-2">No Results Found</h3>
-              <p className="text-sm text-muted-foreground">
-                Try adjusting your search terms or filters
-              </p>
-            </div>
-          </div>
-        )}
-      </div>
-
-      {/* Preview Modal */}
-      <PreviewModal
-        result={previewResult}
-        isOpen={showPreview}
-        onClose={() => {
-          setShowPreview(false)
-          setPreviewResult(null)
-        }}
-      />
-
-      {/* Status Bar */}
-      <div className="flex items-center justify-between p-2 border-t text-xs text-muted-foreground">
-        <div className="flex items-center gap-4">
-          <span>
-            Showing {sortedResults.length} of {totalResults.toLocaleString()} results
-          </span>
-          {selectedResults.size > 0 && (
-            <span>{selectedResults.size} selected</span>
-          )}
-        </div>
-        <div className="flex items-center gap-4">
-          <span>View: {viewMode}</span>
-          <span>Sort: {sortBy} ({sortOrder})</span>
-        </div>
-      </div>
-    </div>
-  )
-}
-
-export default SearchResultsGrid
\ No newline at end of file
diff --git a/frontend/components/feedme/UnifiedSearchBar.tsx b/frontend/components/feedme/UnifiedSearchBar.tsx
deleted file mode 100644
index b79a707..0000000
--- a/frontend/components/feedme/UnifiedSearchBar.tsx
+++ /dev/null
@@ -1,954 +0,0 @@
-/**
- * UnifiedSearchBar Component
- * 
- * Smart autocomplete with search suggestions, recent searches dropdown,
- * advanced filters toggle, and search analytics integration.
- * 
- * Part of FeedMe v2.0 Phase 3D: Advanced Search Interface
- */
-
-'use client'
-
-import React, { useState, useCallback, useMemo, useRef, useEffect } from 'react'
-import { 
-  Search, Filter, X, Clock, TrendingUp, Tag, 
-  ChevronDown, ChevronUp, Settings, Save, History,
-  FileText, MessageCircle, User, Calendar, Star,
-  Zap, Target, Brain, ArrowRight
-} from 'lucide-react'
-import { useDebounce } from '@/hooks/use-debounce'
-import { useSearch, useActions } from '@/lib/stores/feedme-store'
-import { cn } from '@/lib/utils'
-import { Input } from '@/components/ui/input'
-import { Button } from '@/components/ui/button'
-import { Card, CardContent } from '@/components/ui/card'
-import { Badge } from '@/components/ui/badge'
-import { Separator } from '@/components/ui/separator'
-import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
-import { Checkbox } from '@/components/ui/checkbox'
-import { Label } from '@/components/ui/label'
-import { Slider } from '@/components/ui/slider'
-import { DateRangePicker } from '@/components/ui/date-range-picker'
-import { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover'
-import { Command, CommandEmpty, CommandGroup, CommandInput, CommandItem, CommandList } from '@/components/ui/command'
-import { ScrollArea } from '@/components/ui/scroll-area'
-import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip'
-
-// Types
-interface UnifiedSearchBarProps {
-  onSearch?: (query: string, filters: SearchFilters) => void
-  onSuggestionSelect?: (suggestion: SearchSuggestion) => void
-  onSaveSearch?: (name: string, query: string, filters: SearchFilters) => void
-  enableAdvancedFilters?: boolean
-  enableSuggestions?: boolean
-  enableAnalytics?: boolean
-  placeholder?: string
-  className?: string
-}
-
-interface SearchFilters {
-  dateRange: 'all' | 'today' | 'week' | 'month' | 'year' | 'custom'
-  customDateRange?: { from: Date; to: Date }
-  folders: number[]
-  tags: string[]
-  confidence: [number, number]
-  platforms: string[]
-  status: string[]
-  qualityScore: [number, number]
-  contentType: 'all' | 'conversations' | 'qa_pairs' | 'examples'
-  sentiment: string[]
-  priority: 'all' | 'high' | 'medium' | 'low'
-  approvalStatus: 'all' | 'approved' | 'pending' | 'rejected'
-}
-
-interface SearchSuggestion {
-  id: string
-  type: 'query' | 'tag' | 'folder' | 'content' | 'smart'
-  text: string
-  description?: string
-  category: string
-  score: number
-  metadata?: Record<string, any>
-}
-
-interface SearchAnalytics {
-  popularQueries: string[]
-  trendingTags: string[]
-  searchVolume: number
-  avgResponseTime: number
-  successRate: number
-}
-
-// Search Suggestion Item Component
-const SearchSuggestionItem: React.FC<{
-  suggestion: SearchSuggestion
-  isSelected: boolean
-  onSelect: () => void
-  onHover: () => void
-}> = ({ suggestion, isSelected, onSelect, onHover }) => {
-  const getSuggestionIcon = (type: SearchSuggestion['type']) => {
-    switch (type) {
-      case 'query': return <Search className="h-3 w-3" />
-      case 'tag': return <Tag className="h-3 w-3" />
-      case 'folder': return <FileText className="h-3 w-3" />
-      case 'content': return <MessageCircle className="h-3 w-3" />
-      case 'smart': return <Brain className="h-3 w-3" />
-    }
-  }
-
-  const getSuggestionTypeColor = (type: SearchSuggestion['type']) => {
-    switch (type) {
-      case 'query': return 'text-blue-600'
-      case 'tag': return 'text-green-600'
-      case 'folder': return 'text-purple-600'
-      case 'content': return 'text-orange-600'
-      case 'smart': return 'text-pink-600'
-    }
-  }
-
-  return (
-    <div
-      className={cn(
-        'flex items-center gap-3 p-2 cursor-pointer rounded-sm transition-colors',
-        isSelected ? 'bg-accent text-accent-foreground' : 'hover:bg-accent/50'
-      )}
-      onClick={onSelect}
-      onMouseEnter={onHover}
-    >
-      <div className={cn('flex-shrink-0', getSuggestionTypeColor(suggestion.type))}>
-        {getSuggestionIcon(suggestion.type)}
-      </div>
-      
-      <div className="flex-1 min-w-0">
-        <div className="text-sm font-medium truncate">{suggestion.text}</div>
-        {suggestion.description && (
-          <div className="text-xs text-muted-foreground truncate">
-            {suggestion.description}
-          </div>
-        )}
-      </div>
-      
-      <div className="flex items-center gap-2 flex-shrink-0">
-        <Badge variant="secondary" className="text-xs">
-          {suggestion.category}
-        </Badge>
-        {suggestion.score > 0.8 && (
-          <Star className="h-3 w-3 text-yellow-500" />
-        )}
-      </div>
-    </div>
-  )
-}
-
-// Advanced Filters Panel
-const AdvancedFiltersPanel: React.FC<{
-  filters: SearchFilters
-  onFiltersChange: (filters: Partial<SearchFilters>) => void
-  onReset: () => void
-  onSave: () => void
-}> = ({ filters, onFiltersChange, onReset, onSave }) => {
-  const availableTags = ['sync', 'email', 'settings', 'loading', 'connectivity', 'troubleshooting']
-  const availablePlatforms = ['zendesk', 'intercom', 'freshdesk', 'helpscout', 'custom']
-  const availableStatuses = ['completed', 'processing', 'failed', 'pending']
-  const availableSentiments = ['positive', 'neutral', 'negative']
-
-  return (
-    <Card className="absolute top-full left-0 right-0 mt-1 z-50 shadow-lg">
-      <CardContent className="p-4 space-y-4">
-        {/* Quick Filters */}
-        <div>
-          <Label className="text-sm font-medium mb-2 block">Quick Filters</Label>
-          <div className="flex gap-2 flex-wrap">
-            <Button
-              variant={filters.dateRange === 'today' ? 'default' : 'outline'}
-              size="sm"
-              onClick={() => onFiltersChange({ dateRange: 'today' })}
-            >
-              Today
-            </Button>
-            <Button
-              variant={filters.dateRange === 'week' ? 'default' : 'outline'}
-              size="sm"
-              onClick={() => onFiltersChange({ dateRange: 'week' })}
-            >
-              This Week
-            </Button>
-            <Button
-              variant={filters.dateRange === 'month' ? 'default' : 'outline'}
-              size="sm"
-              onClick={() => onFiltersChange({ dateRange: 'month' })}
-            >
-              This Month
-            </Button>
-            <Button
-              variant={filters.approvalStatus === 'approved' ? 'default' : 'outline'}
-              size="sm"
-              onClick={() => onFiltersChange({ 
-                approvalStatus: filters.approvalStatus === 'approved' ? 'all' : 'approved' 
-              })}
-            >
-              Approved Only
-            </Button>
-          </div>
-        </div>
-
-        <Separator />
-
-        {/* Content Type */}
-        <div>
-          <Label className="text-sm font-medium mb-2 block">Content Type</Label>
-          <Select 
-            value={filters.contentType} 
-            onValueChange={(value: SearchFilters['contentType']) => onFiltersChange({ contentType: value })}
-          >
-            <SelectTrigger>
-              <SelectValue />
-            </SelectTrigger>
-            <SelectContent>
-              <SelectItem value="all">All Content</SelectItem>
-              <SelectItem value="conversations">Conversations</SelectItem>
-              <SelectItem value="qa_pairs">Q&A Pairs</SelectItem>
-              <SelectItem value="examples">Examples</SelectItem>
-            </SelectContent>
-          </Select>
-        </div>
-
-        {/* Tags */}
-        <div>
-          <Label className="text-sm font-medium mb-2 block">Tags</Label>
-          <div className="flex gap-1 flex-wrap">
-            {availableTags.map(tag => (
-              <Button
-                key={tag}
-                variant={filters.tags.includes(tag) ? 'default' : 'outline'}
-                size="sm"
-                onClick={() => {
-                  const newTags = filters.tags.includes(tag)
-                    ? filters.tags.filter(t => t !== tag)
-                    : [...filters.tags, tag]
-                  onFiltersChange({ tags: newTags })
-                }}
-                className="text-xs"
-              >
-                {tag}
-              </Button>
-            ))}
-          </div>
-        </div>
-
-        {/* Platforms */}
-        <div>
-          <Label className="text-sm font-medium mb-2 block">Platforms</Label>
-          <div className="flex gap-1 flex-wrap">
-            {availablePlatforms.map(platform => (
-              <Button
-                key={platform}
-                variant={filters.platforms.includes(platform) ? 'default' : 'outline'}
-                size="sm"
-                onClick={() => {
-                  const newPlatforms = filters.platforms.includes(platform)
-                    ? filters.platforms.filter(p => p !== platform)
-                    : [...filters.platforms, platform]
-                  onFiltersChange({ platforms: newPlatforms })
-                }}
-                className="text-xs capitalize"
-              >
-                {platform}
-              </Button>
-            ))}
-          </div>
-        </div>
-
-        {/* Status */}
-        <div>
-          <Label className="text-sm font-medium mb-2 block">Status</Label>
-          <div className="flex gap-1 flex-wrap">
-            {availableStatuses.map(status => (
-              <Button
-                key={status}
-                variant={filters.status.includes(status) ? 'default' : 'outline'}
-                size="sm"
-                onClick={() => {
-                  const newStatus = filters.status.includes(status)
-                    ? filters.status.filter(s => s !== status)
-                    : [...filters.status, status]
-                  onFiltersChange({ status: newStatus })
-                }}
-                className="text-xs capitalize"
-              >
-                {status}
-              </Button>
-            ))}
-          </div>
-        </div>
-
-        {/* Confidence Range */}
-        <div>
-          <Label className="text-sm font-medium mb-2 block">
-            Confidence Range: {Math.round(filters.confidence[0] * 100)}% - {Math.round(filters.confidence[1] * 100)}%
-          </Label>
-          <Slider
-            value={filters.confidence}
-            onValueChange={(value) => onFiltersChange({ confidence: value as [number, number] })}
-            max={1}
-            min={0}
-            step={0.05}
-            className="w-full"
-          />
-        </div>
-
-        {/* Quality Score Range */}
-        <div>
-          <Label className="text-sm font-medium mb-2 block">
-            Quality Score: {Math.round(filters.qualityScore[0] * 100)}% - {Math.round(filters.qualityScore[1] * 100)}%
-          </Label>
-          <Slider
-            value={filters.qualityScore}
-            onValueChange={(value) => onFiltersChange({ qualityScore: value as [number, number] })}
-            max={1}
-            min={0}
-            step={0.05}
-            className="w-full"
-          />
-        </div>
-
-        {/* Sentiment */}
-        <div>
-          <Label className="text-sm font-medium mb-2 block">Sentiment</Label>
-          <div className="flex gap-1">
-            {availableSentiments.map(sentiment => (
-              <Button
-                key={sentiment}
-                variant={filters.sentiment.includes(sentiment) ? 'default' : 'outline'}
-                size="sm"
-                onClick={() => {
-                  const newSentiment = filters.sentiment.includes(sentiment)
-                    ? filters.sentiment.filter(s => s !== sentiment)
-                    : [...filters.sentiment, sentiment]
-                  onFiltersChange({ sentiment: newSentiment })
-                }}
-                className="text-xs capitalize"
-              >
-                {sentiment}
-              </Button>
-            ))}
-          </div>
-        </div>
-
-        {/* Priority */}
-        <div>
-          <Label className="text-sm font-medium mb-2 block">Priority</Label>
-          <Select 
-            value={filters.priority} 
-            onValueChange={(value: SearchFilters['priority']) => onFiltersChange({ priority: value })}
-          >
-            <SelectTrigger>
-              <SelectValue />
-            </SelectTrigger>
-            <SelectContent>
-              <SelectItem value="all">All Priorities</SelectItem>
-              <SelectItem value="high">High Priority</SelectItem>
-              <SelectItem value="medium">Medium Priority</SelectItem>
-              <SelectItem value="low">Low Priority</SelectItem>
-            </SelectContent>
-          </Select>
-        </div>
-
-        {/* Approval Status */}
-        <div>
-          <Label className="text-sm font-medium mb-2 block">Approval Status</Label>
-          <Select 
-            value={filters.approvalStatus} 
-            onValueChange={(value: SearchFilters['approvalStatus']) => onFiltersChange({ approvalStatus: value })}
-          >
-            <SelectTrigger>
-              <SelectValue />
-            </SelectTrigger>
-            <SelectContent>
-              <SelectItem value="all">All Statuses</SelectItem>
-              <SelectItem value="approved">Approved</SelectItem>
-              <SelectItem value="pending">Pending</SelectItem>
-              <SelectItem value="rejected">Rejected</SelectItem>
-            </SelectContent>
-          </Select>
-        </div>
-
-        <Separator />
-
-        {/* Actions */}
-        <div className="flex items-center justify-between">
-          <Button variant="ghost" size="sm" onClick={onReset}>
-            Reset Filters
-          </Button>
-          <div className="flex gap-2">
-            <Button variant="outline" size="sm" onClick={onSave}>
-              <Save className="h-3 w-3 mr-1" />
-              Save Search
-            </Button>
-            <Button size="sm">Apply Filters</Button>
-          </div>
-        </div>
-      </CardContent>
-    </Card>
-  )
-}
-
-// Recent Searches Panel
-const RecentSearchesPanel: React.FC<{
-  searches: string[]
-  savedSearches: Array<{ id: string; name: string; query: string }>
-  onSelectSearch: (query: string) => void
-  onSelectSaved: (search: { id: string; name: string; query: string }) => void
-  onClearHistory: () => void
-}> = ({ searches, savedSearches, onSelectSearch, onSelectSaved, onClearHistory }) => {
-  return (
-    <Card className="absolute top-full left-0 right-0 mt-1 z-50 shadow-lg">
-      <CardContent className="p-0">
-        <div className="max-h-80 overflow-hidden">
-          {/* Recent Searches */}
-          {searches.length > 0 && (
-            <div>
-              <div className="flex items-center justify-between p-3 border-b">
-                <div className="flex items-center gap-2">
-                  <History className="h-4 w-4 text-muted-foreground" />
-                  <span className="text-sm font-medium">Recent Searches</span>
-                </div>
-                <Button variant="ghost" size="sm" onClick={onClearHistory}>
-                  <X className="h-3 w-3" />
-                </Button>
-              </div>
-              <ScrollArea className="max-h-32">
-                {searches.map((search, index) => (
-                  <div
-                    key={index}
-                    className="flex items-center gap-2 p-2 hover:bg-accent cursor-pointer"
-                    onClick={() => onSelectSearch(search)}
-                  >
-                    <Clock className="h-3 w-3 text-muted-foreground" />
-                    <span className="text-sm truncate">{search}</span>
-                  </div>
-                ))}
-              </ScrollArea>
-            </div>
-          )}
-
-          {/* Saved Searches */}
-          {savedSearches.length > 0 && (
-            <div>
-              <div className="flex items-center gap-2 p-3 border-b">
-                <Star className="h-4 w-4 text-muted-foreground" />
-                <span className="text-sm font-medium">Saved Searches</span>
-              </div>
-              <ScrollArea className="max-h-32">
-                {savedSearches.map((saved) => (
-                  <div
-                    key={saved.id}
-                    className="flex items-center gap-2 p-2 hover:bg-accent cursor-pointer"
-                    onClick={() => onSelectSaved(saved)}
-                  >
-                    <Star className="h-3 w-3 text-yellow-500" />
-                    <div className="flex-1 min-w-0">
-                      <div className="text-sm font-medium truncate">{saved.name}</div>
-                      <div className="text-xs text-muted-foreground truncate">{saved.query}</div>
-                    </div>
-                  </div>
-                ))}
-              </ScrollArea>
-            </div>
-          )}
-
-          {/* Empty State */}
-          {searches.length === 0 && savedSearches.length === 0 && (
-            <div className="p-6 text-center">
-              <Search className="h-8 w-8 mx-auto mb-2 text-muted-foreground opacity-50" />
-              <p className="text-sm text-muted-foreground">No search history yet</p>
-            </div>
-          )}
-        </div>
-      </CardContent>
-    </Card>
-  )
-}
-
-// Search Analytics Panel
-const SearchAnalyticsPanel: React.FC<{
-  analytics: SearchAnalytics
-  onClose: () => void
-}> = ({ analytics, onClose }) => {
-  return (
-    <Card className="absolute top-full right-0 mt-1 z-50 shadow-lg w-80">
-      <CardContent className="p-4">
-        <div className="flex items-center justify-between mb-3">
-          <h3 className="font-medium text-sm flex items-center gap-2">
-            <TrendingUp className="h-4 w-4" />
-            Search Analytics
-          </h3>
-          <Button variant="ghost" size="sm" onClick={onClose}>
-            <X className="h-3 w-3" />
-          </Button>
-        </div>
-
-        <div className="space-y-3">
-          {/* Key Metrics */}
-          <div className="grid grid-cols-2 gap-3 text-sm">
-            <div>
-              <div className="text-muted-foreground">Search Volume</div>
-              <div className="font-medium">{analytics.searchVolume.toLocaleString()}</div>
-            </div>
-            <div>
-              <div className="text-muted-foreground">Success Rate</div>
-              <div className="font-medium">{Math.round(analytics.successRate * 100)}%</div>
-            </div>
-            <div>
-              <div className="text-muted-foreground">Avg Response</div>
-              <div className="font-medium">{analytics.avgResponseTime}ms</div>
-            </div>
-            <div>
-              <div className="text-muted-foreground">Trending Now</div>
-              <div className="font-medium">{analytics.trendingTags.length} tags</div>
-            </div>
-          </div>
-
-          <Separator />
-
-          {/* Popular Queries */}
-          <div>
-            <h4 className="text-sm font-medium mb-2">Popular Queries</h4>
-            <div className="space-y-1">
-              {analytics.popularQueries.slice(0, 3).map((query, index) => (
-                <div key={index} className="flex items-center gap-2 text-xs">
-                  <span className="w-4 text-muted-foreground">{index + 1}.</span>
-                  <span className="truncate">{query}</span>
-                </div>
-              ))}
-            </div>
-          </div>
-
-          {/* Trending Tags */}
-          <div>
-            <h4 className="text-sm font-medium mb-2">Trending Tags</h4>
-            <div className="flex gap-1 flex-wrap">
-              {analytics.trendingTags.slice(0, 5).map(tag => (
-                <Badge key={tag} variant="secondary" className="text-xs">
-                  {tag}
-                </Badge>
-              ))}
-            </div>
-          </div>
-        </div>
-      </CardContent>
-    </Card>
-  )
-}
-
-// Main Component
-export const UnifiedSearchBar: React.FC<UnifiedSearchBarProps> = ({
-  onSearch,
-  onSuggestionSelect,
-  onSaveSearch,
-  enableAdvancedFilters = true,
-  enableSuggestions = true,
-  enableAnalytics = true,
-  placeholder = "Search conversations, Q&A pairs, and examples...",
-  className
-}) => {
-  const { query, filters, searchHistory, savedSearches } = useSearch()
-  const { performSearch, updateSearchFilters, addToSearchHistory, saveSearch, loadSavedSearch } = useActions()
-
-  const [localQuery, setLocalQuery] = useState(query)
-  const [showSuggestions, setShowSuggestions] = useState(false)
-  const [showFilters, setShowFilters] = useState(false)
-  const [showHistory, setShowHistory] = useState(false)
-  const [showAnalytics, setShowAnalytics] = useState(false)
-  const [selectedSuggestion, setSelectedSuggestion] = useState(-1)
-  const [isSearching, setIsSearching] = useState(false)
-
-  const inputRef = useRef<HTMLInputElement>(null)
-  const debouncedQuery = useDebounce(localQuery, 300)
-
-  // Mock suggestions
-  const suggestions = useMemo<SearchSuggestion[]>(() => {
-    if (!debouncedQuery.trim() || !enableSuggestions) return []
-
-    const mockSuggestions: SearchSuggestion[] = [
-      {
-        id: 'smart-1',
-        type: 'smart',
-        text: `${debouncedQuery} issues`,
-        description: 'AI-powered smart search for related issues',
-        category: 'Smart',
-        score: 0.95
-      },
-      {
-        id: 'query-1',
-        type: 'query',
-        text: `${debouncedQuery} troubleshooting`,
-        description: 'Search for troubleshooting guides',
-        category: 'Query',
-        score: 0.85
-      },
-      {
-        id: 'tag-1',
-        type: 'tag',
-        text: debouncedQuery,
-        description: 'Search by tag',
-        category: 'Tag',
-        score: 0.75
-      },
-      {
-        id: 'content-1',
-        type: 'content',
-        text: `"${debouncedQuery}"`,
-        description: 'Exact phrase match in content',
-        category: 'Content',
-        score: 0.80
-      }
-    ]
-
-    return mockSuggestions.filter(s => 
-      s.text.toLowerCase().includes(debouncedQuery.toLowerCase())
-    )
-  }, [debouncedQuery, enableSuggestions])
-
-  // Mock analytics
-  const mockAnalytics: SearchAnalytics = {
-    popularQueries: ['email sync issues', 'mailbird settings', 'account setup'],
-    trendingTags: ['sync', 'settings', 'troubleshooting', 'email', 'connectivity'],
-    searchVolume: 1547,
-    avgResponseTime: 125,
-    successRate: 0.92
-  }
-
-  // Handle search submission
-  const handleSearch = useCallback(async (searchQuery?: string, searchFilters?: SearchFilters) => {
-    const finalQuery = searchQuery || localQuery
-    const finalFilters = searchFilters || filters
-
-    if (!finalQuery.trim()) return
-
-    setIsSearching(true)
-    setShowSuggestions(false)
-    setShowHistory(false)
-
-    try {
-      await performSearch(finalQuery, finalFilters)
-      addToSearchHistory(finalQuery)
-      onSearch?.(finalQuery, finalFilters)
-    } catch (error) {
-      console.error('Search failed:', error)
-    } finally {
-      setIsSearching(false)
-    }
-  }, [localQuery, filters, performSearch, addToSearchHistory, onSearch])
-
-  // Handle suggestion selection
-  const handleSuggestionSelect = useCallback((suggestion: SearchSuggestion) => {
-    setLocalQuery(suggestion.text)
-    setShowSuggestions(false)
-    handleSearch(suggestion.text)
-    onSuggestionSelect?.(suggestion)
-  }, [handleSearch, onSuggestionSelect])
-
-  // Handle filter changes
-  const handleFiltersChange = useCallback((newFilters: Partial<SearchFilters>) => {
-    const updatedFilters = { ...filters, ...newFilters }
-    updateSearchFilters(updatedFilters)
-    
-    if (localQuery.trim()) {
-      handleSearch(localQuery, updatedFilters)
-    }
-  }, [filters, updateSearchFilters, localQuery, handleSearch])
-
-  // Handle keyboard navigation
-  const handleKeyDown = useCallback((e: React.KeyboardEvent) => {
-    if (showSuggestions && suggestions.length > 0) {
-      switch (e.key) {
-        case 'ArrowDown':
-          e.preventDefault()
-          setSelectedSuggestion(prev => 
-            prev < suggestions.length - 1 ? prev + 1 : 0
-          )
-          break
-        case 'ArrowUp':
-          e.preventDefault()
-          setSelectedSuggestion(prev => 
-            prev > 0 ? prev - 1 : suggestions.length - 1
-          )
-          break
-        case 'Enter':
-          e.preventDefault()
-          if (selectedSuggestion >= 0) {
-            handleSuggestionSelect(suggestions[selectedSuggestion])
-          } else {
-            handleSearch()
-          }
-          break
-        case 'Escape':
-          setShowSuggestions(false)
-          setSelectedSuggestion(-1)
-          break
-      }
-    } else if (e.key === 'Enter') {
-      handleSearch()
-    }
-  }, [showSuggestions, suggestions, selectedSuggestion, handleSuggestionSelect, handleSearch])
-
-  // Handle input focus
-  const handleInputFocus = useCallback(() => {
-    if (enableSuggestions && localQuery.trim()) {
-      setShowSuggestions(true)
-    } else if (searchHistory.length > 0 || savedSearches.length > 0) {
-      setShowHistory(true)
-    }
-  }, [enableSuggestions, localQuery, searchHistory.length, savedSearches.length])
-
-  // Handle input blur
-  const handleInputBlur = useCallback(() => {
-    // Delay hiding to allow for suggestion clicks
-    setTimeout(() => {
-      setShowSuggestions(false)
-      setShowHistory(false)
-      setSelectedSuggestion(-1)
-    }, 150)
-  }, [])
-
-  // Clear search
-  const handleClear = useCallback(() => {
-    setLocalQuery('')
-    setShowSuggestions(false)
-    setShowHistory(false)
-    inputRef.current?.focus()
-  }, [])
-
-  // Handle saved search selection
-  const handleSavedSearchSelect = useCallback((saved: { id: string; name: string; query: string }) => {
-    loadSavedSearch(saved.id)
-    setLocalQuery(saved.query)
-    setShowHistory(false)
-    handleSearch(saved.query)
-  }, [loadSavedSearch, handleSearch])
-
-  // Save current search
-  const handleSaveCurrentSearch = useCallback(() => {
-    if (localQuery.trim()) {
-      const name = prompt('Enter a name for this search:')
-      if (name) {
-        saveSearch(name)
-        onSaveSearch?.(name, localQuery, filters)
-      }
-    }
-  }, [localQuery, filters, saveSearch, onSaveSearch])
-
-  // Reset filters
-  const handleResetFilters = useCallback(() => {
-    const defaultFilters: SearchFilters = {
-      dateRange: 'all',
-      folders: [],
-      tags: [],
-      confidence: [0.0, 1.0],
-      platforms: [],
-      status: [],
-      qualityScore: [0.0, 1.0],
-      contentType: 'all',
-      sentiment: [],
-      priority: 'all',
-      approvalStatus: 'all'
-    }
-    updateSearchFilters(defaultFilters)
-  }, [updateSearchFilters])
-
-  // Count active filters
-  const activeFiltersCount = useMemo(() => {
-    let count = 0
-    if (filters.dateRange !== 'all') count++
-    if (filters.folders.length > 0) count++
-    if (filters.tags.length > 0) count++
-    if (filters.confidence[0] > 0 || filters.confidence[1] < 1) count++
-    if (filters.platforms.length > 0) count++
-    if (filters.status.length > 0) count++
-    if (filters.qualityScore[0] > 0 || filters.qualityScore[1] < 1) count++
-    if (filters.contentType !== 'all') count++
-    if (filters.sentiment.length > 0) count++
-    if (filters.priority !== 'all') count++
-    if (filters.approvalStatus !== 'all') count++
-    return count
-  }, [filters])
-
-  return (
-    <div className={cn('relative w-full', className)}>
-      {/* Main Search Input */}
-      <div className="relative">
-        <div className="relative flex items-center">
-          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" />
-          
-          <Input
-            ref={inputRef}
-            type="text"
-            placeholder={placeholder}
-            value={localQuery}
-            onChange={(e) => setLocalQuery(e.target.value)}
-            onKeyDown={handleKeyDown}
-            onFocus={handleInputFocus}
-            onBlur={handleInputBlur}
-            className="pl-10 pr-20"
-            disabled={isSearching}
-          />
-
-          <div className="absolute right-2 top-1/2 transform -translate-y-1/2 flex items-center gap-1">
-            {localQuery && (
-              <Button
-                variant="ghost"
-                size="sm"
-                onClick={handleClear}
-                className="h-6 w-6 p-0"
-              >
-                <X className="h-3 w-3" />
-              </Button>
-            )}
-
-            {enableAdvancedFilters && (
-              <TooltipProvider>
-                <Tooltip>
-                  <TooltipTrigger asChild>
-                    <Button
-                      variant="ghost"
-                      size="sm"
-                      onClick={() => setShowFilters(!showFilters)}
-                      className={cn(
-                        'h-6 w-6 p-0',
-                        (showFilters || activeFiltersCount > 0) && 'text-accent-foreground bg-accent'
-                      )}
-                    >
-                      <Filter className="h-3 w-3" />
-                      {activeFiltersCount > 0 && (
-                        <Badge variant="secondary" className="absolute -top-1 -right-1 h-4 w-4 p-0 text-xs">
-                          {activeFiltersCount}
-                        </Badge>
-                      )}
-                    </Button>
-                  </TooltipTrigger>
-                  <TooltipContent>
-                    <p>Advanced Filters {activeFiltersCount > 0 && `(${activeFiltersCount} active)`}</p>
-                  </TooltipContent>
-                </Tooltip>
-              </TooltipProvider>
-            )}
-
-            {enableAnalytics && (
-              <TooltipProvider>
-                <Tooltip>
-                  <TooltipTrigger asChild>
-                    <Button
-                      variant="ghost"
-                      size="sm"
-                      onClick={() => setShowAnalytics(!showAnalytics)}
-                      className="h-6 w-6 p-0"
-                    >
-                      <TrendingUp className="h-3 w-3" />
-                    </Button>
-                  </TooltipTrigger>
-                  <TooltipContent>
-                    <p>Search Analytics</p>
-                  </TooltipContent>
-                </Tooltip>
-              </TooltipProvider>
-            )}
-          </div>
-        </div>
-
-        {/* Loading Indicator */}
-        {isSearching && (
-          <div className="absolute top-full left-0 right-0 mt-1">
-            <div className="flex items-center gap-2 p-2 bg-muted rounded text-sm">
-              <div className="animate-spin rounded-full h-3 w-3 border-b-2 border-accent" />
-              Searching...
-            </div>
-          </div>
-        )}
-      </div>
-
-      {/* Search Suggestions */}
-      {showSuggestions && suggestions.length > 0 && !isSearching && (
-        <Card className="absolute top-full left-0 right-0 mt-1 z-50 shadow-lg">
-          <CardContent className="p-0">
-            <ScrollArea className="max-h-80">
-              {suggestions.map((suggestion, index) => (
-                <SearchSuggestionItem
-                  key={suggestion.id}
-                  suggestion={suggestion}
-                  isSelected={index === selectedSuggestion}
-                  onSelect={() => handleSuggestionSelect(suggestion)}
-                  onHover={() => setSelectedSuggestion(index)}
-                />
-              ))}
-            </ScrollArea>
-          </CardContent>
-        </Card>
-      )}
-
-      {/* Recent Searches */}
-      {showHistory && !showSuggestions && !isSearching && (
-        <RecentSearchesPanel
-          searches={searchHistory}
-          savedSearches={savedSearches}
-          onSelectSearch={(search) => {
-            setLocalQuery(search)
-            setShowHistory(false)
-            handleSearch(search)
-          }}
-          onSelectSaved={handleSavedSearchSelect}
-          onClearHistory={() => {
-            // Clear search history
-            setShowHistory(false)
-          }}
-        />
-      )}
-
-      {/* Advanced Filters */}
-      {showFilters && enableAdvancedFilters && (
-        <AdvancedFiltersPanel
-          filters={filters}
-          onFiltersChange={handleFiltersChange}
-          onReset={handleResetFilters}
-          onSave={handleSaveCurrentSearch}
-        />
-      )}
-
-      {/* Search Analytics */}
-      {showAnalytics && enableAnalytics && (
-        <SearchAnalyticsPanel
-          analytics={mockAnalytics}
-          onClose={() => setShowAnalytics(false)}
-        />
-      )}
-
-      {/* Quick Actions Bar */}
-      {(localQuery.trim() || activeFiltersCount > 0) && (
-        <div className="flex items-center gap-2 mt-2 text-xs text-muted-foreground">
-          <span>Quick actions:</span>
-          
-          {localQuery.trim() && (
-            <Button variant="ghost" size="sm" onClick={handleSaveCurrentSearch} className="h-6 px-2">
-              <Save className="h-3 w-3 mr-1" />
-              Save
-            </Button>
-          )}
-          
-          {activeFiltersCount > 0 && (
-            <Button variant="ghost" size="sm" onClick={handleResetFilters} className="h-6 px-2">
-              <X className="h-3 w-3 mr-1" />
-              Clear {activeFiltersCount} filter{activeFiltersCount === 1 ? '' : 's'}
-            </Button>
-          )}
-          
-          <Button variant="ghost" size="sm" onClick={() => handleSearch()} className="h-6 px-2">
-            <Search className="h-3 w-3 mr-1" />
-            Search
-          </Button>
-        </div>
-      )}
-    </div>
-  )
-}
-
-export default UnifiedSearchBar
\ No newline at end of file
diff --git a/frontend/components/feedme/ValidationPanel.tsx b/frontend/components/feedme/ValidationPanel.tsx
deleted file mode 100644
index e39612c..0000000
--- a/frontend/components/feedme/ValidationPanel.tsx
+++ /dev/null
@@ -1,998 +0,0 @@
-/**
- * ValidationPanel Component
- * 
- * Real-time content validation with AI quality metrics display,
- * platform detection results, and processing recommendations.
- * 
- * Part of FeedMe v2.0 Phase 3C: Smart Conversation Editor
- */
-
-'use client'
-
-import React, { useState, useCallback, useMemo, useEffect } from 'react'
-import { 
-  Shield, CheckCircle2, AlertTriangle, XCircle, Zap, 
-  Activity, Target, TrendingUp, AlertCircle, Info,
-  RefreshCw, Settings, ChevronDown, ChevronRight,
-  FileText, MessageSquare, Bot, User, Clock,
-  BarChart3, PieChart, LineChart
-} from 'lucide-react'
-import { cn } from '@/lib/utils'
-import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
-import { Badge } from '@/components/ui/badge'
-import { Progress } from '@/components/ui/progress'
-import { Button } from '@/components/ui/button'
-import { Separator } from '@/components/ui/separator'
-import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip'
-import { Alert, AlertDescription } from '@/components/ui/alert'
-import { Collapsible, CollapsibleContent, CollapsibleTrigger } from '@/components/ui/collapsible'
-import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
-import { Switch } from '@/components/ui/switch'
-import { Label } from '@/components/ui/label'
-import { ScrollArea } from '@/components/ui/scroll-area'
-
-// Types
-interface ValidationPanelProps {
-  content: string
-  segments?: ConversationSegment[]
-  qaPairs?: QAPair[]
-  onValidationComplete?: (results: ValidationResults) => void
-  onRecommendationApply?: (recommendation: ProcessingRecommendation) => void
-  enableRealTimeValidation?: boolean
-  enablePlatformDetection?: boolean
-  className?: string
-}
-
-interface ConversationSegment {
-  id: string
-  type: 'customer' | 'agent' | 'system' | 'metadata'
-  content: string
-  confidence: number
-  validationStatus: 'valid' | 'warning' | 'error'
-  validationMessage?: string
-}
-
-interface QAPair {
-  id: string
-  question: string
-  answer: string
-  confidence: number
-  quality_score: number
-  validation_status: 'valid' | 'needs_review' | 'invalid'
-}
-
-interface ValidationResults {
-  overallScore: number
-  contentQuality: ContentQuality
-  platformDetection: PlatformDetection
-  processingRecommendations: ProcessingRecommendation[]
-  qualityMetrics: QualityMetrics
-  issueAnalysis: IssueAnalysis
-  performanceMetrics: PerformanceMetrics
-  validatedAt: string
-}
-
-interface ContentQuality {
-  score: number
-  factors: QualityFactor[]
-  improvements: string[]
-  strengths: string[]
-}
-
-interface QualityFactor {
-  name: string
-  score: number
-  weight: number
-  description: string
-  status: 'excellent' | 'good' | 'needs_improvement' | 'poor'
-}
-
-interface PlatformDetection {
-  platform: 'zendesk' | 'intercom' | 'freshdesk' | 'helpscout' | 'custom' | 'unknown'
-  confidence: number
-  indicators: string[]
-  formatCompliance: number
-  extractabilityScore: number
-}
-
-interface ProcessingRecommendation {
-  id: string
-  type: 'extraction' | 'segmentation' | 'quality' | 'optimization'
-  priority: 'high' | 'medium' | 'low'
-  title: string
-  description: string
-  impact: string
-  effort: 'low' | 'medium' | 'high'
-  actionable: boolean
-  automatable: boolean
-}
-
-interface QualityMetrics {
-  completeness: number
-  clarity: number
-  consistency: number
-  accuracy: number
-  relevance: number
-  usability: number
-}
-
-interface IssueAnalysis {
-  criticalIssues: ValidationIssue[]
-  warnings: ValidationIssue[]
-  suggestions: ValidationIssue[]
-  totalIssues: number
-}
-
-interface ValidationIssue {
-  id: string
-  type: 'format' | 'content' | 'structure' | 'quality' | 'compliance'
-  severity: 'critical' | 'warning' | 'suggestion'
-  title: string
-  description: string
-  location?: string
-  fix?: string
-  autoFixable: boolean
-}
-
-interface PerformanceMetrics {
-  processingTime: number
-  extractionEfficiency: number
-  expectedQuality: number
-  resourceUsage: number
-  optimizationPotential: number
-}
-
-// Quality Factor Component
-const QualityFactorCard: React.FC<{
-  factor: QualityFactor
-  showDetails?: boolean
-}> = ({ factor, showDetails = false }) => {
-  const getStatusColor = (status: QualityFactor['status']) => {
-    switch (status) {
-      case 'excellent': return 'text-green-600 bg-green-100'
-      case 'good': return 'text-blue-600 bg-blue-100'
-      case 'needs_improvement': return 'text-yellow-600 bg-yellow-100'
-      case 'poor': return 'text-red-600 bg-red-100'
-    }
-  }
-
-  const getStatusIcon = (status: QualityFactor['status']) => {
-    switch (status) {
-      case 'excellent': return <CheckCircle2 className="h-3 w-3" />
-      case 'good': return <CheckCircle2 className="h-3 w-3" />
-      case 'needs_improvement': return <AlertTriangle className="h-3 w-3" />
-      case 'poor': return <XCircle className="h-3 w-3" />
-    }
-  }
-
-  return (
-    <div className="p-3 border rounded-lg">
-      <div className="flex items-center justify-between mb-2">
-        <div className="flex items-center gap-2">
-          <span className="text-sm font-medium">{factor.name}</span>
-          <TooltipProvider>
-            <Tooltip>
-              <TooltipTrigger>
-                <div className={cn('flex items-center gap-1 px-2 py-1 rounded-full text-xs', getStatusColor(factor.status))}>
-                  {getStatusIcon(factor.status)}
-                  {factor.status.replace('_', ' ')}
-                </div>
-              </TooltipTrigger>
-              <TooltipContent>
-                <p>{factor.description}</p>
-              </TooltipContent>
-            </Tooltip>
-          </TooltipProvider>
-        </div>
-        <div className="flex items-center gap-2">
-          <span className="text-xs text-muted-foreground">Weight: {factor.weight}%</span>
-          <Badge variant="outline" className="text-xs">
-            {Math.round(factor.score * 100)}%
-          </Badge>
-        </div>
-      </div>
-      
-      <Progress value={factor.score * 100} className="h-2" />
-      
-      {showDetails && (
-        <p className="text-xs text-muted-foreground mt-2">{factor.description}</p>
-      )}
-    </div>
-  )
-}
-
-// Platform Detection Card
-const PlatformDetectionCard: React.FC<{
-  detection: PlatformDetection
-  isExpanded: boolean
-  onToggle: () => void
-}> = ({ detection, isExpanded, onToggle }) => {
-  const getPlatformIcon = (platform: string) => {
-    // In a real app, these would be actual platform icons
-    switch (platform) {
-      case 'zendesk': return '🎫'
-      case 'intercom': return '💬'
-      case 'freshdesk': return '🎧'
-      case 'helpscout': return '🚁'
-      case 'custom': return '⚙️'
-      default: return '❓'
-    }
-  }
-
-  const getPlatformName = (platform: string) => {
-    return platform.charAt(0).toUpperCase() + platform.slice(1)
-  }
-
-  return (
-    <Card>
-      <CardHeader className="pb-3">
-        <Collapsible open={isExpanded} onOpenChange={onToggle}>
-          <CollapsibleTrigger asChild>
-            <Button variant="ghost" className="w-full justify-between p-0">
-              <CardTitle className="text-sm flex items-center gap-2">
-                <Shield className="h-4 w-4" />
-                Platform Detection
-              </CardTitle>
-              {isExpanded ? <ChevronDown className="h-4 w-4" /> : <ChevronRight className="h-4 w-4" />}
-            </Button>
-          </CollapsibleTrigger>
-          
-          <CollapsibleContent className="space-y-3 pt-3">
-            <div className="flex items-center justify-between">
-              <div className="flex items-center gap-2">
-                <span className="text-lg">{getPlatformIcon(detection.platform)}</span>
-                <span className="font-medium">{getPlatformName(detection.platform)}</span>
-              </div>
-              <Badge variant="outline" className="text-xs">
-                {Math.round(detection.confidence * 100)}% confidence
-              </Badge>
-            </div>
-
-            <div className="space-y-2">
-              <div className="flex items-center justify-between text-sm">
-                <span className="text-muted-foreground">Format Compliance</span>
-                <span className="font-medium">{Math.round(detection.formatCompliance * 100)}%</span>
-              </div>
-              <Progress value={detection.formatCompliance * 100} className="h-2" />
-            </div>
-
-            <div className="space-y-2">
-              <div className="flex items-center justify-between text-sm">
-                <span className="text-muted-foreground">Extractability</span>
-                <span className="font-medium">{Math.round(detection.extractabilityScore * 100)}%</span>
-              </div>
-              <Progress value={detection.extractabilityScore * 100} className="h-2" />
-            </div>
-
-            {detection.indicators.length > 0 && (
-              <div>
-                <span className="text-xs text-muted-foreground mb-1 block">Detection Indicators:</span>
-                <div className="flex gap-1 flex-wrap">
-                  {detection.indicators.map((indicator, index) => (
-                    <Badge key={index} variant="secondary" className="text-xs">
-                      {indicator}
-                    </Badge>
-                  ))}
-                </div>
-              </div>
-            )}
-          </CollapsibleContent>
-        </Collapsible>
-      </CardHeader>
-    </Card>
-  )
-}
-
-// Issues List Component
-const IssuesListCard: React.FC<{
-  analysis: IssueAnalysis
-  onFixIssue: (issueId: string) => void
-  isExpanded: boolean
-  onToggle: () => void
-}> = ({ analysis, onFixIssue, isExpanded, onToggle }) => {
-  const getIssueIcon = (severity: ValidationIssue['severity']) => {
-    switch (severity) {
-      case 'critical': return <XCircle className="h-4 w-4 text-red-500" />
-      case 'warning': return <AlertTriangle className="h-4 w-4 text-yellow-500" />
-      case 'suggestion': return <Info className="h-4 w-4 text-blue-500" />
-    }
-  }
-
-  const allIssues = [
-    ...analysis.criticalIssues,
-    ...analysis.warnings,
-    ...analysis.suggestions
-  ]
-
-  return (
-    <Card>
-      <CardHeader className="pb-3">
-        <Collapsible open={isExpanded} onOpenChange={onToggle}>
-          <CollapsibleTrigger asChild>
-            <Button variant="ghost" className="w-full justify-between p-0">
-              <CardTitle className="text-sm flex items-center gap-2">
-                <AlertCircle className="h-4 w-4" />
-                Issues & Suggestions ({analysis.totalIssues})
-              </CardTitle>
-              {isExpanded ? <ChevronDown className="h-4 w-4" /> : <ChevronRight className="h-4 w-4" />}
-            </Button>
-          </CollapsibleTrigger>
-          
-          <CollapsibleContent className="space-y-3 pt-3">
-            {allIssues.length > 0 ? (
-              <ScrollArea className="max-h-60">
-                <div className="space-y-2">
-                  {allIssues.map(issue => (
-                    <div key={issue.id} className="p-2 border rounded">
-                      <div className="flex items-start justify-between gap-2">
-                        <div className="flex items-start gap-2 min-w-0 flex-1">
-                          {getIssueIcon(issue.severity)}
-                          <div className="min-w-0 flex-1">
-                            <div className="text-sm font-medium">{issue.title}</div>
-                            <div className="text-xs text-muted-foreground">{issue.description}</div>
-                            {issue.location && (
-                              <div className="text-xs text-muted-foreground mt-1">
-                                Location: {issue.location}
-                              </div>
-                            )}
-                          </div>
-                        </div>
-                        
-                        {issue.autoFixable && (
-                          <Button
-                            variant="ghost"
-                            size="sm"
-                            onClick={() => onFixIssue(issue.id)}
-                            className="h-6 px-2 text-xs"
-                          >
-                            Fix
-                          </Button>
-                        )}
-                      </div>
-                      
-                      {issue.fix && (
-                        <div className="mt-2 p-2 bg-muted rounded text-xs">
-                          <strong>Suggested fix:</strong> {issue.fix}
-                        </div>
-                      )}
-                    </div>
-                  ))}
-                </div>
-              </ScrollArea>
-            ) : (
-              <div className="text-center py-4">
-                <CheckCircle2 className="h-8 w-8 mx-auto mb-2 text-green-500" />
-                <p className="text-sm text-muted-foreground">No issues found</p>
-              </div>
-            )}
-          </CollapsibleContent>
-        </Collapsible>
-      </CardHeader>
-    </Card>
-  )
-}
-
-// Quality Metrics Chart
-const QualityMetricsChart: React.FC<{
-  metrics: QualityMetrics
-  isExpanded: boolean
-  onToggle: () => void
-}> = ({ metrics, isExpanded, onToggle }) => {
-  const metricData = [
-    { name: 'Completeness', value: metrics.completeness, icon: CheckCircle2 },
-    { name: 'Clarity', value: metrics.clarity, icon: Eye },
-    { name: 'Consistency', value: metrics.consistency, icon: Target },
-    { name: 'Accuracy', value: metrics.accuracy, icon: Shield },
-    { name: 'Relevance', value: metrics.relevance, icon: TrendingUp },
-    { name: 'Usability', value: metrics.usability, icon: User }
-  ]
-
-  return (
-    <Card>
-      <CardHeader className="pb-3">
-        <Collapsible open={isExpanded} onOpenChange={onToggle}>
-          <CollapsibleTrigger asChild>
-            <Button variant="ghost" className="w-full justify-between p-0">
-              <CardTitle className="text-sm flex items-center gap-2">
-                <BarChart3 className="h-4 w-4" />
-                Quality Metrics
-              </CardTitle>
-              {isExpanded ? <ChevronDown className="h-4 w-4" /> : <ChevronRight className="h-4 w-4" />}
-            </Button>
-          </CollapsibleTrigger>
-          
-          <CollapsibleContent className="space-y-3 pt-3">
-            <div className="space-y-3">
-              {metricData.map(metric => {
-                const IconComponent = metric.icon
-                return (
-                  <div key={metric.name} className="space-y-1">
-                    <div className="flex items-center justify-between text-sm">
-                      <div className="flex items-center gap-2">
-                        <IconComponent className="h-3 w-3 text-muted-foreground" />
-                        <span>{metric.name}</span>
-                      </div>
-                      <span className="font-medium">{Math.round(metric.value * 100)}%</span>
-                    </div>
-                    <Progress value={metric.value * 100} className="h-2" />
-                  </div>
-                )
-              })}
-            </div>
-          </CollapsibleContent>
-        </Collapsible>
-      </CardHeader>
-    </Card>
-  )
-}
-
-// Processing Recommendations
-const ProcessingRecommendationsCard: React.FC<{
-  recommendations: ProcessingRecommendation[]
-  onApply: (recommendation: ProcessingRecommendation) => void
-  isExpanded: boolean
-  onToggle: () => void
-}> = ({ recommendations, onApply, isExpanded, onToggle }) => {
-  const getPriorityColor = (priority: ProcessingRecommendation['priority']) => {
-    switch (priority) {
-      case 'high': return 'text-red-600 bg-red-100'
-      case 'medium': return 'text-yellow-600 bg-yellow-100'
-      case 'low': return 'text-green-600 bg-green-100'
-    }
-  }
-
-  const getEffortColor = (effort: ProcessingRecommendation['effort']) => {
-    switch (effort) {
-      case 'low': return 'text-green-600'
-      case 'medium': return 'text-yellow-600'
-      case 'high': return 'text-red-600'
-    }
-  }
-
-  return (
-    <Card>
-      <CardHeader className="pb-3">
-        <Collapsible open={isExpanded} onOpenChange={onToggle}>
-          <CollapsibleTrigger asChild>
-            <Button variant="ghost" className="w-full justify-between p-0">
-              <CardTitle className="text-sm flex items-center gap-2">
-                <Zap className="h-4 w-4" />
-                Processing Recommendations ({recommendations.length})
-              </CardTitle>
-              {isExpanded ? <ChevronDown className="h-4 w-4" /> : <ChevronRight className="h-4 w-4" />}
-            </Button>
-          </CollapsibleTrigger>
-          
-          <CollapsibleContent className="space-y-3 pt-3">
-            {recommendations.length > 0 ? (
-              <ScrollArea className="max-h-60">
-                <div className="space-y-3">
-                  {recommendations.map(recommendation => (
-                    <div key={recommendation.id} className="p-3 border rounded">
-                      <div className="flex items-start justify-between gap-2 mb-2">
-                        <div className="flex items-center gap-2">
-                          <Badge className={cn('text-xs', getPriorityColor(recommendation.priority))}>
-                            {recommendation.priority}
-                          </Badge>
-                          <Badge variant="outline" className="text-xs">
-                            {recommendation.type}
-                          </Badge>
-                          {recommendation.automatable && (
-                            <Badge variant="secondary" className="text-xs">
-                              Auto
-                            </Badge>
-                          )}
-                        </div>
-                        
-                        {recommendation.actionable && (
-                          <Button
-                            variant="ghost"
-                            size="sm"
-                            onClick={() => onApply(recommendation)}
-                            className="h-6 px-2 text-xs"
-                          >
-                            Apply
-                          </Button>
-                        )}
-                      </div>
-                      
-                      <h4 className="font-medium text-sm mb-1">{recommendation.title}</h4>
-                      <p className="text-xs text-muted-foreground mb-2">{recommendation.description}</p>
-                      
-                      <div className="flex items-center justify-between text-xs">
-                        <span>
-                          <strong>Impact:</strong> {recommendation.impact}
-                        </span>
-                        <span className={getEffortColor(recommendation.effort)}>
-                          <strong>Effort:</strong> {recommendation.effort}
-                        </span>
-                      </div>
-                    </div>
-                  ))}
-                </div>
-              </ScrollArea>
-            ) : (
-              <div className="text-center py-4">
-                <Zap className="h-8 w-8 mx-auto mb-2 text-muted-foreground opacity-50" />
-                <p className="text-sm text-muted-foreground">No recommendations available</p>
-              </div>
-            )}
-          </CollapsibleContent>
-        </Collapsible>
-      </CardHeader>
-    </Card>
-  )
-}
-
-// Main Component
-export const ValidationPanel: React.FC<ValidationPanelProps> = ({
-  content,
-  segments = [],
-  qaPairs = [],
-  onValidationComplete,
-  onRecommendationApply,
-  enableRealTimeValidation = true,
-  enablePlatformDetection = true,
-  className
-}) => {
-  const [validationResults, setValidationResults] = useState<ValidationResults | null>(null)
-  const [isValidating, setIsValidating] = useState(false)
-  const [validationProgress, setValidationProgress] = useState(0)
-  const [autoValidation, setAutoValidation] = useState(enableRealTimeValidation)
-  const [expandedSections, setExpandedSections] = useState({
-    platform: true,
-    quality: true,
-    metrics: false,
-    issues: true,
-    recommendations: true,
-    performance: false
-  })
-
-  // Mock validation function
-  const performValidation = useCallback(async () => {
-    setIsValidating(true)
-    setValidationProgress(0)
-
-    try {
-      const steps = [
-        'Analyzing content structure...',
-        'Detecting platform format...',
-        'Evaluating quality metrics...',
-        'Identifying issues...',
-        'Generating recommendations...',
-        'Finalizing validation...'
-      ]
-
-      for (let i = 0; i < steps.length; i++) {
-        setValidationProgress((i / steps.length) * 100)
-        await new Promise(resolve => setTimeout(resolve, 300))
-      }
-
-      // Mock validation results
-      const mockResults: ValidationResults = {
-        overallScore: 0.82,
-        contentQuality: {
-          score: 0.78,
-          factors: [
-            {
-              name: 'Structure',
-              score: 0.85,
-              weight: 20,
-              description: 'Clear conversation structure with proper formatting',
-              status: 'good'
-            },
-            {
-              name: 'Completeness',
-              score: 0.72,
-              weight: 25,
-              description: 'Most conversation parts are present',
-              status: 'needs_improvement'
-            },
-            {
-              name: 'Clarity',
-              score: 0.88,
-              weight: 20,
-              description: 'Messages are clear and understandable',
-              status: 'excellent'
-            },
-            {
-              name: 'Extractability',
-              score: 0.75,
-              weight: 35,
-              description: 'Q&A pairs can be extracted with good confidence',
-              status: 'good'
-            }
-          ],
-          improvements: [
-            'Add missing timestamps for better context',
-            'Clarify some ambiguous agent responses',
-            'Include customer satisfaction indicators'
-          ],
-          strengths: [
-            'Clear conversation flow',
-            'Good question-answer structure',
-            'Consistent formatting'
-          ]
-        },
-        platformDetection: {
-          platform: 'zendesk',
-          confidence: 0.92,
-          indicators: ['Ticket format', 'Agent signatures', 'Zendesk headers'],
-          formatCompliance: 0.88,
-          extractabilityScore: 0.85
-        },
-        processingRecommendations: [
-          {
-            id: 'rec-1',
-            type: 'extraction',
-            priority: 'high',
-            title: 'Optimize Q&A extraction',
-            description: 'Improve extraction algorithms for better question-answer pair identification',
-            impact: 'Increase extraction accuracy by 15%',
-            effort: 'medium',
-            actionable: true,
-            automatable: true
-          },
-          {
-            id: 'rec-2',
-            type: 'quality',
-            priority: 'medium',
-            title: 'Enhance content preprocessing',
-            description: 'Add preprocessing steps to clean and normalize conversation content',
-            impact: 'Better overall quality scores',
-            effort: 'low',
-            actionable: true,
-            automatable: true
-          }
-        ],
-        qualityMetrics: {
-          completeness: 0.82,
-          clarity: 0.88,
-          consistency: 0.75,
-          accuracy: 0.90,
-          relevance: 0.78,
-          usability: 0.83
-        },
-        issueAnalysis: {
-          criticalIssues: [],
-          warnings: [
-            {
-              id: 'warn-1',
-              type: 'content',
-              severity: 'warning',
-              title: 'Missing timestamps',
-              description: 'Some conversation segments lack timestamp information',
-              location: 'Multiple segments',
-              fix: 'Add timestamp extraction from metadata',
-              autoFixable: true
-            }
-          ],
-          suggestions: [
-            {
-              id: 'sug-1',
-              type: 'quality',
-              severity: 'suggestion',
-              title: 'Improve agent response clarity',
-              description: 'Some agent responses could be more specific',
-              location: 'Agent responses',
-              fix: 'Use AI to suggest more detailed responses',
-              autoFixable: false
-            }
-          ],
-          totalIssues: 2
-        },
-        performanceMetrics: {
-          processingTime: 1.2,
-          extractionEfficiency: 0.78,
-          expectedQuality: 0.82,
-          resourceUsage: 0.45,
-          optimizationPotential: 0.23
-        },
-        validatedAt: new Date().toISOString()
-      }
-
-      setValidationResults(mockResults)
-      setValidationProgress(100)
-      onValidationComplete?.(mockResults)
-
-    } catch (error) {
-      console.error('Validation failed:', error)
-    } finally {
-      setIsValidating(false)
-    }
-  }, [onValidationComplete])
-
-  // Auto-validation effect
-  useEffect(() => {
-    if (autoValidation && content && !isValidating) {
-      const timer = setTimeout(() => {
-        performValidation()
-      }, 1000)
-      return () => clearTimeout(timer)
-    }
-  }, [content, autoValidation, isValidating, performValidation])
-
-  // Handle section expansion
-  const toggleSection = useCallback((section: keyof typeof expandedSections) => {
-    setExpandedSections(prev => ({ ...prev, [section]: !prev[section] }))
-  }, [])
-
-  // Handle issue fix
-  const handleFixIssue = useCallback((issueId: string) => {
-    if (!validationResults) return
-    
-    setValidationResults(prev => {
-      if (!prev) return prev
-      
-      return {
-        ...prev,
-        issueAnalysis: {
-          ...prev.issueAnalysis,
-          warnings: prev.issueAnalysis.warnings.filter(issue => issue.id !== issueId),
-          suggestions: prev.issueAnalysis.suggestions.filter(issue => issue.id !== issueId),
-          totalIssues: prev.issueAnalysis.totalIssues - 1
-        }
-      }
-    })
-  }, [validationResults])
-
-  // Handle recommendation application
-  const handleApplyRecommendation = useCallback((recommendation: ProcessingRecommendation) => {
-    onRecommendationApply?.(recommendation)
-    
-    // Remove applied recommendation
-    setValidationResults(prev => {
-      if (!prev) return prev
-      
-      return {
-        ...prev,
-        processingRecommendations: prev.processingRecommendations.filter(rec => rec.id !== recommendation.id)
-      }
-    })
-  }, [onRecommendationApply])
-
-  const overallScore = validationResults?.overallScore || 0
-  const scoreColor = overallScore >= 0.8 ? 'text-green-600' : overallScore >= 0.6 ? 'text-yellow-600' : 'text-red-600'
-
-  return (
-    <div className={cn('h-full flex flex-col', className)}>
-      {/* Header */}
-      <div className="flex items-center justify-between p-4 border-b">
-        <div className="flex items-center gap-3">
-          <h2 className="text-lg font-medium flex items-center gap-2">
-            <Shield className="h-5 w-5" />
-            Content Validation
-          </h2>
-          {validationResults && (
-            <div className="flex items-center gap-2">
-              <Badge variant="outline" className={cn('text-sm', scoreColor)}>
-                {Math.round(overallScore * 100)}% Quality
-              </Badge>
-              <span className="text-xs text-muted-foreground">
-                Validated {new Date(validationResults.validatedAt).toLocaleTimeString()}
-              </span>
-            </div>
-          )}
-        </div>
-        
-        <div className="flex items-center gap-2">
-          <div className="flex items-center gap-2">
-            <Switch
-              id="auto-validation"
-              checked={autoValidation}
-              onCheckedChange={setAutoValidation}
-            />
-            <Label htmlFor="auto-validation" className="text-sm">
-              Auto-validate
-            </Label>
-          </div>
-          
-          <Button
-            variant="outline"
-            size="sm"
-            onClick={performValidation}
-            disabled={isValidating || !content}
-          >
-            <RefreshCw className={cn('h-3 w-3 mr-1', isValidating && 'animate-spin')} />
-            {isValidating ? 'Validating...' : 'Validate'}
-          </Button>
-        </div>
-      </div>
-
-      {/* Validation Progress */}
-      {isValidating && (
-        <div className="p-4 border-b">
-          <div className="flex items-center gap-2 mb-2">
-            <Activity className="h-4 w-4 text-accent animate-pulse" />
-            <span className="text-sm font-medium">Validating content...</span>
-          </div>
-          <Progress value={validationProgress} className="h-2" />
-        </div>
-      )}
-
-      {/* Validation Results */}
-      <ScrollArea className="flex-1 p-4">
-        {validationResults ? (
-          <div className="space-y-4">
-            {/* Overall Score Card */}
-            <Card>
-              <CardContent className="p-4">
-                <div className="flex items-center justify-between mb-3">
-                  <h3 className="font-medium">Overall Quality Score</h3>
-                  <div className={cn('text-2xl font-bold', scoreColor)}>
-                    {Math.round(overallScore * 100)}%
-                  </div>
-                </div>
-                <Progress value={overallScore * 100} className="h-3 mb-2" />
-                <div className="text-xs text-muted-foreground">
-                  Based on content structure, quality metrics, and extractability
-                </div>
-              </CardContent>
-            </Card>
-
-            {/* Platform Detection */}
-            {enablePlatformDetection && (
-              <PlatformDetectionCard
-                detection={validationResults.platformDetection}
-                isExpanded={expandedSections.platform}
-                onToggle={() => toggleSection('platform')}
-              />
-            )}
-
-            {/* Quality Factors */}
-            <Card>
-              <CardHeader className="pb-3">
-                <Collapsible open={expandedSections.quality} onOpenChange={() => toggleSection('quality')}>
-                  <CollapsibleTrigger asChild>
-                    <Button variant="ghost" className="w-full justify-between p-0">
-                      <CardTitle className="text-sm flex items-center gap-2">
-                        <Target className="h-4 w-4" />
-                        Quality Factors
-                      </CardTitle>
-                      {expandedSections.quality ? <ChevronDown className="h-4 w-4" /> : <ChevronRight className="h-4 w-4" />}
-                    </Button>
-                  </CollapsibleTrigger>
-                  
-                  <CollapsibleContent className="space-y-3 pt-3">
-                    {validationResults.contentQuality.factors.map(factor => (
-                      <QualityFactorCard key={factor.name} factor={factor} showDetails />
-                    ))}
-                    
-                    <Separator />
-                    
-                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
-                      <div>
-                        <h4 className="text-sm font-medium mb-2 text-green-600">Strengths</h4>
-                        <ul className="text-xs space-y-1">
-                          {validationResults.contentQuality.strengths.map((strength, index) => (
-                            <li key={index} className="flex items-center gap-1">
-                              <CheckCircle2 className="h-3 w-3 text-green-500" />
-                              {strength}
-                            </li>
-                          ))}
-                        </ul>
-                      </div>
-                      
-                      <div>
-                        <h4 className="text-sm font-medium mb-2 text-yellow-600">Improvements</h4>
-                        <ul className="text-xs space-y-1">
-                          {validationResults.contentQuality.improvements.map((improvement, index) => (
-                            <li key={index} className="flex items-center gap-1">
-                              <AlertTriangle className="h-3 w-3 text-yellow-500" />
-                              {improvement}
-                            </li>
-                          ))}
-                        </ul>
-                      </div>
-                    </div>
-                  </CollapsibleContent>
-                </Collapsible>
-              </CardHeader>
-            </Card>
-
-            {/* Quality Metrics Chart */}
-            <QualityMetricsChart
-              metrics={validationResults.qualityMetrics}
-              isExpanded={expandedSections.metrics}
-              onToggle={() => toggleSection('metrics')}
-            />
-
-            {/* Issues List */}
-            <IssuesListCard
-              analysis={validationResults.issueAnalysis}
-              onFixIssue={handleFixIssue}
-              isExpanded={expandedSections.issues}
-              onToggle={() => toggleSection('issues')}
-            />
-
-            {/* Processing Recommendations */}
-            <ProcessingRecommendationsCard
-              recommendations={validationResults.processingRecommendations}
-              onApply={handleApplyRecommendation}
-              isExpanded={expandedSections.recommendations}
-              onToggle={() => toggleSection('recommendations')}
-            />
-
-            {/* Performance Metrics */}
-            <Card>
-              <CardHeader className="pb-3">
-                <Collapsible open={expandedSections.performance} onOpenChange={() => toggleSection('performance')}>
-                  <CollapsibleTrigger asChild>
-                    <Button variant="ghost" className="w-full justify-between p-0">
-                      <CardTitle className="text-sm flex items-center gap-2">
-                        <Activity className="h-4 w-4" />
-                        Performance Metrics
-                      </CardTitle>
-                      {expandedSections.performance ? <ChevronDown className="h-4 w-4" /> : <ChevronRight className="h-4 w-4" />}
-                    </Button>
-                  </CollapsibleTrigger>
-                  
-                  <CollapsibleContent className="space-y-3 pt-3">
-                    <div className="grid grid-cols-2 gap-4 text-sm">
-                      <div>
-                        <div className="text-muted-foreground">Processing Time</div>
-                        <div className="font-medium">{validationResults.performanceMetrics.processingTime}s</div>
-                      </div>
-                      <div>
-                        <div className="text-muted-foreground">Efficiency</div>
-                        <div className="font-medium">{Math.round(validationResults.performanceMetrics.extractionEfficiency * 100)}%</div>
-                      </div>
-                      <div>
-                        <div className="text-muted-foreground">Resource Usage</div>
-                        <div className="font-medium">{Math.round(validationResults.performanceMetrics.resourceUsage * 100)}%</div>
-                      </div>
-                      <div>
-                        <div className="text-muted-foreground">Optimization Potential</div>
-                        <div className="font-medium">{Math.round(validationResults.performanceMetrics.optimizationPotential * 100)}%</div>
-                      </div>
-                    </div>
-                  </CollapsibleContent>
-                </Collapsible>
-              </CardHeader>
-            </Card>
-          </div>
-        ) : content ? (
-          <div className="flex items-center justify-center h-32">
-            <div className="text-center">
-              <Shield className="h-12 w-12 mx-auto mb-4 text-muted-foreground opacity-50" />
-              <h3 className="text-lg font-medium mb-2">Ready for Validation</h3>
-              <p className="text-sm text-muted-foreground mb-4">
-                Click "Validate" to analyze content quality and get improvement recommendations.
-              </p>
-              <Button onClick={performValidation}>
-                <Shield className="h-4 w-4 mr-2" />
-                Start Validation
-              </Button>
-            </div>
-          </div>
-        ) : (
-          <div className="flex items-center justify-center h-32">
-            <div className="text-center">
-              <FileText className="h-12 w-12 mx-auto mb-4 text-muted-foreground opacity-50" />
-              <h3 className="text-lg font-medium mb-2">No Content to Validate</h3>
-              <p className="text-sm text-muted-foreground">
-                Please provide content to begin validation analysis.
-              </p>
-            </div>
-          </div>
-        )}
-      </ScrollArea>
-
-      {/* Status Bar */}
-      {validationResults && (
-        <div className="flex items-center justify-between p-2 border-t text-xs text-muted-foreground">
-          <div className="flex items-center gap-4">
-            <span>{segments.length} segments analyzed</span>
-            <span>{qaPairs.length} Q&A pairs evaluated</span>
-          </div>
-          <div className="flex items-center gap-4">
-            <span>{validationResults.issueAnalysis.totalIssues} issues found</span>
-            <span>{validationResults.processingRecommendations.length} recommendations</span>
-          </div>
-        </div>
-      )}
-    </div>
-  )
-}
-
-export default ValidationPanel
\ No newline at end of file
diff --git a/frontend/components/feedme/VersionHistoryPanel.tsx b/frontend/components/feedme/VersionHistoryPanel.tsx
deleted file mode 100644
index c309651..0000000
--- a/frontend/components/feedme/VersionHistoryPanel.tsx
+++ /dev/null
@@ -1,328 +0,0 @@
-/**
- * Version History Panel Component
- * Displays version history with actions for comparison and revert
- * 
- * Features:
- * - Version list with timestamps and user info
- * - Compare versions functionality
- * - Revert to previous version
- * - Active version highlighting
- * - Loading states and error handling
- */
-
-'use client'
-
-import React, { useState } from 'react'
-import { Button } from '../ui/button'
-import { Badge } from '../ui/badge'
-import { Card, CardContent, CardHeader } from '../ui/card'
-import { ScrollArea } from '../ui/scroll-area'
-import { 
-  Clock, 
-  User, 
-  GitBranch, 
-  RotateCcw, 
-  Eye, 
-  RefreshCw,
-  AlertTriangle
-} from 'lucide-react'
-import { cn } from '../../lib/utils'
-import { formatDistanceToNow } from 'date-fns'
-import type { ConversationVersion } from '../../lib/feedme-api'
-
-interface VersionHistoryPanelProps {
-  conversationId: number
-  versions: ConversationVersion[]
-  isLoading: boolean
-  onSelectVersion: (versionNumber: number) => void
-  onRevertVersion: (versionNumber: number) => void
-  onRefresh: () => void
-}
-
-interface VersionCardProps {
-  version: ConversationVersion
-  isActive: boolean
-  onCompare: () => void
-  onRevert: () => void
-  isReverting: boolean
-}
-
-function VersionCard({ 
-  version, 
-  isActive, 
-  onCompare, 
-  onRevert, 
-  isReverting 
-}: VersionCardProps) {
-  const [showConfirmRevert, setShowConfirmRevert] = useState(false)
-
-  const handleRevertClick = () => {
-    if (isActive) return // Can't revert to active version
-    setShowConfirmRevert(true)
-  }
-
-  const handleConfirmRevert = () => {
-    onRevert()
-    setShowConfirmRevert(false)
-  }
-
-  const handleCancelRevert = () => {
-    setShowConfirmRevert(false)
-  }
-
-  const formatTimestamp = (dateString: string) => {
-    try {
-      const date = new Date(dateString)
-      return formatDistanceToNow(date, { addSuffix: true })
-    } catch {
-      return 'Unknown time'
-    }
-  }
-
-  const getVersionChangeSummary = () => {
-    // This would ideally come from the API with change statistics
-    // For now, we'll show basic info
-    return {
-      linesChanged: Math.floor(Math.random() * 20) + 1,
-      type: version.metadata?.revert_reason ? 'revert' : 'edit'
-    }
-  }
-
-  const changeSummary = getVersionChangeSummary()
-
-  return (
-    <Card className={cn(
-      "transition-colors",
-      isActive && "ring-2 ring-accent border-accent"
-    )}>
-      <CardHeader className="pb-3">
-        <div className="flex items-center justify-between">
-          <div className="flex items-center gap-2">
-            <GitBranch className="h-4 w-4 text-muted-foreground" />
-            <span className="font-medium">Version {version.version}</span>
-            {isActive && (
-              <Badge variant="default" className="text-xs">
-                Current
-              </Badge>
-            )}
-            {changeSummary.type === 'revert' && (
-              <Badge variant="outline" className="text-xs">
-                Reverted
-              </Badge>
-            )}
-          </div>
-          
-          <div className="flex items-center gap-1">
-            <Button
-              variant="ghost"
-              size="sm"
-              onClick={onCompare}
-              className="h-8 w-8 p-0"
-              title={`Compare version ${version.version}`}
-            >
-              <Eye className="h-4 w-4" />
-            </Button>
-            
-            {!isActive && (
-              <Button
-                variant="ghost"
-                size="sm"
-                onClick={handleRevertClick}
-                disabled={isReverting}
-                className="h-8 w-8 p-0"
-                title={`Revert to version ${version.version}`}
-              >
-                <RotateCcw className={cn(
-                  "h-4 w-4",
-                  isReverting && "animate-spin"
-                )} />
-              </Button>
-            )}
-          </div>
-        </div>
-      </CardHeader>
-
-      <CardContent className="pt-0">
-        <div className="space-y-3">
-          {/* Title and change info */}
-          <div>
-            <h4 className="font-medium text-sm line-clamp-2 mb-1">
-              {version.title}
-            </h4>
-            <p className="text-xs text-muted-foreground">
-              ~{changeSummary.linesChanged} lines changed
-            </p>
-          </div>
-
-          {/* Metadata */}
-          <div className="flex items-center gap-4 text-xs text-muted-foreground">
-            <div className="flex items-center gap-1">
-              <User className="h-3 w-3" />
-              <span>{version.updated_by || 'Unknown'}</span>
-            </div>
-            <div className="flex items-center gap-1">
-              <Clock className="h-3 w-3" />
-              <span>{formatTimestamp(version.updated_at)}</span>
-            </div>
-          </div>
-
-          {/* Revert reason if applicable */}
-          {version.metadata?.revert_reason && (
-            <div className="mt-2 p-2 bg-muted rounded text-xs">
-              <span className="font-medium">Revert reason:</span>{' '}
-              {version.metadata.revert_reason}
-            </div>
-          )}
-
-          {/* Revert confirmation */}
-          {showConfirmRevert && (
-            <div className="mt-3 p-3 border rounded bg-background">
-              <div className="flex items-start gap-2 mb-3">
-                <AlertTriangle className="h-4 w-4 text-amber-500 mt-0.5" />
-                <div className="text-sm">
-                  <p className="font-medium mb-1">Confirm Revert</p>
-                  <p className="text-muted-foreground">
-                    This will create a new version with the content from version {version.version}.
-                    The current content will be preserved in version history.
-                  </p>
-                </div>
-              </div>
-              <div className="flex gap-2">
-                <Button
-                  size="sm"
-                  variant="destructive"
-                  onClick={handleConfirmRevert}
-                  disabled={isReverting}
-                >
-                  {isReverting ? 'Reverting...' : 'Confirm Revert'}
-                </Button>
-                <Button
-                  size="sm"
-                  variant="outline"
-                  onClick={handleCancelRevert}
-                  disabled={isReverting}
-                >
-                  Cancel
-                </Button>
-              </div>
-            </div>
-          )}
-        </div>
-      </CardContent>
-    </Card>
-  )
-}
-
-export function VersionHistoryPanel({
-  conversationId,
-  versions,
-  isLoading,
-  onSelectVersion,
-  onRevertVersion,
-  onRefresh
-}: VersionHistoryPanelProps) {
-  const [revertingVersion, setRevertingVersion] = useState<number | null>(null)
-
-  const handleRevert = async (versionNumber: number) => {
-    try {
-      setRevertingVersion(versionNumber)
-      await onRevertVersion(versionNumber)
-    } finally {
-      setRevertingVersion(null)
-    }
-  }
-
-  const activeVersion = versions.find(v => v.is_active)
-
-  if (isLoading && versions.length === 0) {
-    return (
-      <div className="flex items-center justify-center h-64">
-        <div className="text-center">
-          <RefreshCw className="h-8 w-8 animate-spin mx-auto mb-2 text-muted-foreground" />
-          <p className="text-sm text-muted-foreground">Loading version history...</p>
-        </div>
-      </div>
-    )
-  }
-
-  if (versions.length === 0) {
-    return (
-      <div className="flex items-center justify-center h-64">
-        <div className="text-center">
-          <GitBranch className="h-8 w-8 mx-auto mb-2 text-muted-foreground" />
-          <p className="text-sm text-muted-foreground">No version history found</p>
-          <Button 
-            variant="outline" 
-            size="sm" 
-            onClick={onRefresh}
-            className="mt-2"
-          >
-            <RefreshCw className="h-4 w-4 mr-2" />
-            Refresh
-          </Button>
-        </div>
-      </div>
-    )
-  }
-
-  return (
-    <div className="flex flex-col h-full">
-      {/* Header */}
-      <div className="flex items-center justify-between mb-4">
-        <div>
-          <h3 className="font-semibold">Version History</h3>
-          <p className="text-sm text-muted-foreground">
-            {versions.length} version{versions.length !== 1 ? 's' : ''} available
-          </p>
-        </div>
-        <Button
-          variant="outline"
-          size="sm"
-          onClick={onRefresh}
-          disabled={isLoading}
-          className="flex items-center gap-2"
-        >
-          <RefreshCw className={cn(
-            "h-4 w-4",
-            isLoading && "animate-spin"
-          )} />
-          Refresh
-        </Button>
-      </div>
-
-      {/* Version List */}
-      <ScrollArea className="flex-1">
-        <div className="space-y-3">
-          {versions.map((version) => (
-            <VersionCard
-              key={version.id}
-              version={version}
-              isActive={version.is_active}
-              onCompare={() => onSelectVersion(version.version)}
-              onRevert={() => handleRevert(version.version)}
-              isReverting={revertingVersion === version.version}
-            />
-          ))}
-        </div>
-      </ScrollArea>
-
-      {/* Footer Info */}
-      <div className="mt-4 pt-4 border-t text-xs text-muted-foreground">
-        <div className="flex items-center gap-4">
-          <div className="flex items-center gap-1">
-            <div className="h-2 w-2 rounded-full bg-accent" />
-            <span>Current version</span>
-          </div>
-          <div className="flex items-center gap-1">
-            <Eye className="h-3 w-3" />
-            <span>Compare</span>
-          </div>
-          <div className="flex items-center gap-1">
-            <RotateCcw className="h-3 w-3" />
-            <span>Revert</span>
-          </div>
-        </div>
-      </div>
-    </div>
-  )
-}
\ No newline at end of file
diff --git a/frontend/components/feedme/__tests__/AnalyticsDashboard.test.tsx b/frontend/components/feedme/__tests__/AnalyticsDashboard.test.tsx
deleted file mode 100644
index 1e6f087..0000000
--- a/frontend/components/feedme/__tests__/AnalyticsDashboard.test.tsx
+++ /dev/null
@@ -1,702 +0,0 @@
-/**
- * AnalyticsDashboard Component Tests
- * 
- * Comprehensive test suite for the AnalyticsDashboard component with 95%+ coverage.
- * Tests real-time analytics, interactive charts, performance metrics, and data visualization.
- */
-
-import React from 'react'
-import { render, screen, fireEvent, waitFor, act } from '@testing-library/react'
-import userEvent from '@testing-library/user-event'
-import { vi, describe, it, expect, beforeEach, afterEach } from 'vitest'
-import { AnalyticsDashboard } from '../AnalyticsDashboard'
-import { useAnalytics, useActions } from '@/lib/stores/feedme-store'
-
-// Mock the store
-vi.mock('@/lib/stores/feedme-store', () => ({
-  useAnalytics: vi.fn(),
-  useActions: vi.fn(),
-}))
-
-// Mock recharts
-vi.mock('recharts', () => ({
-  ResponsiveContainer: ({ children }: any) => <div data-testid="responsive-container">{children}</div>,
-  BarChart: ({ children }: any) => <div data-testid="bar-chart">{children}</div>,
-  LineChart: ({ children }: any) => <div data-testid="line-chart">{children}</div>,
-  AreaChart: ({ children }: any) => <div data-testid="area-chart">{children}</div>,
-  PieChart: ({ children }: any) => <div data-testid="pie-chart">{children}</div>,
-  RadialBarChart: ({ children }: any) => <div data-testid="radial-bar-chart">{children}</div>,
-  Bar: () => <div data-testid="bar" />,
-  Line: () => <div data-testid="line" />,
-  Area: () => <div data-testid="area" />,
-  Pie: () => <div data-testid="pie" />,
-  Cell: () => <div data-testid="cell" />,
-  RadialBar: () => <div data-testid="radial-bar" />,
-  XAxis: () => <div data-testid="x-axis" />,
-  YAxis: () => <div data-testid="y-axis" />,
-  CartesianGrid: () => <div data-testid="cartesian-grid" />,
-  Tooltip: () => <div data-testid="tooltip" />,
-  Legend: () => <div data-testid="legend" />,
-}))
-
-// Mock lucide-react icons
-vi.mock('lucide-react', () => ({
-  TrendingUp: () => <div data-testid="trending-up-icon" />,
-  TrendingDown: () => <div data-testid="trending-down-icon" />,
-  Activity: () => <div data-testid="activity-icon" />,
-  Users: () => <div data-testid="users-icon" />,
-  Search: () => <div data-testid="search-icon" />,
-  Clock: () => <div data-testid="clock-icon" />,
-  Target: () => <div data-testid="target-icon" />,
-  Zap: () => <div data-testid="zap-icon" />,
-  Eye: () => <div data-testid="eye-icon" />,
-  Download: () => <div data-testid="download-icon" />,
-  RefreshCw: () => <div data-testid="refresh-icon" />,
-  Filter: () => <div data-testid="filter-icon" />,
-  Calendar: () => <div data-testid="calendar-icon" />,
-  BarChart3: () => <div data-testid="bar-chart-icon" />,
-  PieChart: () => <div data-testid="pie-chart-icon" />,
-  LineChart: () => <div data-testid="line-chart-icon" />,
-  Settings: () => <div data-testid="settings-icon" />,
-  AlertCircle: () => <div data-testid="alert-circle-icon" />,
-  CheckCircle2: () => <div data-testid="check-circle-icon" />,
-  ArrowUpRight: () => <div data-testid="arrow-up-right-icon" />,
-  ArrowDownRight: () => <div data-testid="arrow-down-right-icon" />,
-  Star: () => <div data-testid="star-icon" />,
-  Tag: () => <div data-testid="tag-icon" />,
-  FileText: () => <div data-testid="file-text-icon" />,
-  MessageCircle: () => <div data-testid="message-circle-icon" />,
-  Brain: () => <div data-testid="brain-icon" />,
-  Shield: () => <div data-testid="shield-icon" />,
-}))
-
-// Mock data
-const mockAnalytics = {
-  workflowStats: {
-    totalProcessed: 1247,
-    successRate: 0.92,
-    averageTime: 245,
-    errorCount: 23,
-  },
-  performanceMetrics: {
-    responseTime: 180,
-    throughput: 456,
-    errorRate: 0.02,
-    uptime: 0.999,
-  },
-  usageStats: {
-    totalSearches: 12847,
-    uniqueUsers: 3241,
-    avgSessionDuration: 247,
-    topQueries: ['email sync', 'account setup', 'troubleshooting'],
-  },
-}
-
-const mockActions = {
-  loadAnalytics: vi.fn(),
-  refreshAnalytics: vi.fn(),
-}
-
-describe('AnalyticsDashboard', () => {
-  beforeEach(() => {
-    vi.clearAllMocks()
-    
-    // Setup store mocks
-    ;(useAnalytics as any).mockReturnValue({
-      ...mockAnalytics,
-      isLoading: false,
-    })
-    
-    ;(useActions as any).mockReturnValue(mockActions)
-    
-    // Mock Date.now for consistent timestamps
-    vi.spyOn(Date, 'now').mockReturnValue(1625097600000) // Fixed timestamp
-    
-    // Mock URL.createObjectURL for export functionality
-    global.URL.createObjectURL = vi.fn(() => 'blob:test')
-    global.URL.revokeObjectURL = vi.fn()
-    
-    // Mock performance.now for timing tests
-    vi.spyOn(performance, 'now').mockReturnValue(100)
-  })
-
-  afterEach(() => {
-    vi.clearAllMocks()
-    vi.restoreAllMocks()
-  })
-
-  describe('Rendering', () => {
-    it('renders analytics dashboard with header', () => {
-      render(<AnalyticsDashboard />)
-      
-      expect(screen.getByText('Search Analytics')).toBeInTheDocument()
-      expect(screen.getByTestId('bar-chart-icon')).toBeInTheDocument()
-    })
-
-    it('displays key metrics cards', () => {
-      render(<AnalyticsDashboard />)
-      
-      expect(screen.getByText('Total Searches')).toBeInTheDocument()
-      expect(screen.getByText('Unique Users')).toBeInTheDocument()
-      expect(screen.getByText('Avg Response')).toBeInTheDocument()
-      expect(screen.getByText('Success Rate')).toBeInTheDocument()
-    })
-
-    it('shows metric values with proper formatting', () => {
-      render(<AnalyticsDashboard />)
-      
-      expect(screen.getByText('12,847')).toBeInTheDocument() // Total searches
-      expect(screen.getByText('3,241')).toBeInTheDocument() // Unique users
-      expect(screen.getByText('245ms')).toBeInTheDocument() // Response time
-      expect(screen.getByText('92%')).toBeInTheDocument() // Success rate
-    })
-
-    it('displays trend indicators', () => {
-      render(<AnalyticsDashboard />)
-      
-      expect(screen.getAllByTestId('arrow-up-right-icon')).toHaveLength(3) // Positive trends
-      expect(screen.getAllByTestId('arrow-down-right-icon')).toHaveLength(1) // Negative trend
-    })
-
-    it('shows live indicator when real-time is enabled', () => {
-      render(<AnalyticsDashboard enableRealTime />)
-      
-      expect(screen.getByText('Live')).toBeInTheDocument()
-      expect(screen.getByText('Live').previousElementSibling).toHaveClass('animate-pulse')
-    })
-  })
-
-  describe('Tabs and Navigation', () => {
-    it('renders all tab options', () => {
-      render(<AnalyticsDashboard />)
-      
-      expect(screen.getByText('Overview')).toBeInTheDocument()
-      expect(screen.getByText('Performance')).toBeInTheDocument()
-      expect(screen.getByText('Engagement')).toBeInTheDocument()
-      expect(screen.getByText('Insights')).toBeInTheDocument()
-    })
-
-    it('switches between tabs', async () => {
-      const user = userEvent.setup()
-      render(<AnalyticsDashboard />)
-      
-      const performanceTab = screen.getByText('Performance')
-      await user.click(performanceTab)
-      
-      expect(screen.getByText('Cache Hit Rate')).toBeInTheDocument()
-      expect(screen.getByText('Error Rate')).toBeInTheDocument()
-    })
-
-    it('maintains tab state on re-render', async () => {
-      const user = userEvent.setup()
-      const { rerender } = render(<AnalyticsDashboard />)
-      
-      const engagementTab = screen.getByText('Engagement')
-      await user.click(engagementTab)
-      
-      rerender(<AnalyticsDashboard />)
-      
-      expect(screen.getByText('CTR')).toBeInTheDocument() // Engagement tab content
-    })
-  })
-
-  describe('Time Range Selection', () => {
-    it('renders time range selector', () => {
-      render(<AnalyticsDashboard />)
-      
-      expect(screen.getByRole('combobox')).toBeInTheDocument()
-    })
-
-    it('updates time range selection', async () => {
-      const user = userEvent.setup()
-      render(<AnalyticsDashboard />)
-      
-      const timeSelector = screen.getByRole('combobox')
-      await user.click(timeSelector)
-      
-      expect(screen.getByText('Last Hour')).toBeInTheDocument()
-      expect(screen.getByText('Last Week')).toBeInTheDocument()
-      expect(screen.getByText('Last Month')).toBeInTheDocument()
-      
-      const weekOption = screen.getByText('Last Week')
-      await user.click(weekOption)
-      
-      // Should update the selected value
-      expect(timeSelector).toHaveTextContent('Last Week')
-    })
-
-    it('filters data based on time range', async () => {
-      const user = userEvent.setup()
-      render(<AnalyticsDashboard />)
-      
-      const timeSelector = screen.getByRole('combobox')
-      await user.click(timeSelector)
-      
-      const hourOption = screen.getByText('Last Hour')
-      await user.click(hourOption)
-      
-      // Should update charts with filtered data
-      expect(screen.getAllByTestId('responsive-container')).toHaveLength(2)
-    })
-  })
-
-  describe('Charts and Visualizations', () => {
-    it('renders search volume chart', () => {
-      render(<AnalyticsDashboard />)
-      
-      expect(screen.getByText('Search Volume')).toBeInTheDocument()
-      expect(screen.getByTestId('area-chart')).toBeInTheDocument()
-    })
-
-    it('renders response time chart', () => {
-      render(<AnalyticsDashboard />)
-      
-      expect(screen.getByText('Response Time')).toBeInTheDocument()
-      expect(screen.getByTestId('line-chart')).toBeInTheDocument()
-    })
-
-    it('displays popular queries table', () => {
-      render(<AnalyticsDashboard />)
-      
-      expect(screen.getByText('Popular Queries')).toBeInTheDocument()
-      expect(screen.getByText('email sync issues')).toBeInTheDocument()
-      expect(screen.getByText('1,247 searches')).toBeInTheDocument()
-    })
-
-    it('shows trending tags cloud', () => {
-      render(<AnalyticsDashboard />)
-      
-      expect(screen.getByText('Trending Tags')).toBeInTheDocument()
-      expect(screen.getByText('sync')).toBeInTheDocument()
-      expect(screen.getByText('settings')).toBeInTheDocument()
-    })
-
-    it('handles query click interactions', async () => {
-      const user = userEvent.setup()
-      render(<AnalyticsDashboard />)
-      
-      const queryItem = screen.getByText('email sync issues')
-      await user.click(queryItem)
-      
-      // Should log the search action
-      expect(console.log).toHaveBeenCalledWith('Search:', 'email sync issues')
-    })
-
-    it('handles tag click interactions', async () => {
-      const user = userEvent.setup()
-      render(<AnalyticsDashboard />)
-      
-      const tagItem = screen.getByText('sync')
-      await user.click(tagItem)
-      
-      // Should log the filter action
-      expect(console.log).toHaveBeenCalledWith('Filter by tag:', 'sync')
-    })
-  })
-
-  describe('Performance Tab', () => {
-    beforeEach(async () => {
-      const user = userEvent.setup()
-      render(<AnalyticsDashboard />)
-      
-      const performanceTab = screen.getByText('Performance')
-      await user.click(performanceTab)
-    })
-
-    it('displays performance metrics', () => {
-      expect(screen.getByText('Cache Hit Rate')).toBeInTheDocument()
-      expect(screen.getByText('Error Rate')).toBeInTheDocument()
-      expect(screen.getByText('Throughput')).toBeInTheDocument()
-      expect(screen.getByText('Indexing Time')).toBeInTheDocument()
-    })
-
-    it('shows system performance status', () => {
-      expect(screen.getByText('System Performance')).toBeInTheDocument()
-      expect(screen.getByText('HEALTHY')).toBeInTheDocument()
-      expect(screen.getByTestId('shield-icon')).toBeInTheDocument()
-    })
-
-    it('displays resource usage metrics', () => {
-      expect(screen.getByText('Resource Usage')).toBeInTheDocument()
-      expect(screen.getByText('CPU:')).toBeInTheDocument()
-      expect(screen.getByText('Memory:')).toBeInTheDocument()
-      expect(screen.getByText('Storage:')).toBeInTheDocument()
-      expect(screen.getByText('Network:')).toBeInTheDocument()
-    })
-
-    it('shows response time distribution chart', () => {
-      expect(screen.getByText('Response Time Distribution')).toBeInTheDocument()
-      expect(screen.getByTestId('bar-chart')).toBeInTheDocument()
-    })
-  })
-
-  describe('Engagement Tab', () => {
-    beforeEach(async () => {
-      const user = userEvent.setup()
-      render(<AnalyticsDashboard />)
-      
-      const engagementTab = screen.getByText('Engagement')
-      await user.click(engagementTab)
-    })
-
-    it('displays engagement metrics', () => {
-      expect(screen.getByText('CTR')).toBeInTheDocument()
-      expect(screen.getByText('Conversion')).toBeInTheDocument()
-      expect(screen.getByText('Bounce Rate')).toBeInTheDocument()
-      expect(screen.getByText('Return Users')).toBeInTheDocument()
-    })
-
-    it('shows user activity chart', () => {
-      expect(screen.getByText('User Activity')).toBeInTheDocument()
-      expect(screen.getByTestId('bar-chart')).toBeInTheDocument()
-    })
-
-    it('displays success rate trend', () => {
-      expect(screen.getByText('Success Rate Trend')).toBeInTheDocument()
-      expect(screen.getByTestId('line-chart')).toBeInTheDocument()
-    })
-  })
-
-  describe('Insights Tab', () => {
-    beforeEach(async () => {
-      const user = userEvent.setup()
-      render(<AnalyticsDashboard />)
-      
-      const insightsTab = screen.getByText('Insights')
-      await user.click(insightsTab)
-    })
-
-    it('displays quality metrics', () => {
-      expect(screen.getByText('Relevance')).toBeInTheDocument()
-      expect(screen.getByText('Satisfaction')).toBeInTheDocument()
-      expect(screen.getByText('Precision@10')).toBeInTheDocument()
-      expect(screen.getByText('Diversity')).toBeInTheDocument()
-    })
-
-    it('shows key insights', () => {
-      expect(screen.getByText('Key Insights')).toBeInTheDocument()
-      expect(screen.getByText(/Search volume increased 12.5%/)).toBeInTheDocument()
-      expect(screen.getByText(/AI-powered suggestions improved/)).toBeInTheDocument()
-    })
-
-    it('displays optimization recommendations', () => {
-      expect(screen.getByText('Optimization Recommendations')).toBeInTheDocument()
-      expect(screen.getByText(/Implement query suggestions/)).toBeInTheDocument()
-      expect(screen.getByText(/Add more tag-based filters/)).toBeInTheDocument()
-    })
-
-    it('shows recommendation priorities', () => {
-      expect(screen.getByText('High')).toBeInTheDocument()
-      expect(screen.getByText('Med')).toBeInTheDocument()
-      expect(screen.getByText('Low')).toBeInTheDocument()
-    })
-  })
-
-  describe('Actions and Controls', () => {
-    it('handles refresh action', async () => {
-      const user = userEvent.setup()
-      render(<AnalyticsDashboard />)
-      
-      const refreshButton = screen.getByText('Refresh')
-      await user.click(refreshButton)
-      
-      expect(mockActions.refreshAnalytics).toHaveBeenCalled()
-    })
-
-    it('shows loading state during refresh', async () => {
-      const user = userEvent.setup()
-      render(<AnalyticsDashboard />)
-      
-      const refreshButton = screen.getByText('Refresh')
-      
-      // Start refresh
-      mockActions.refreshAnalytics.mockImplementation(() => new Promise(resolve => setTimeout(resolve, 100)))
-      await user.click(refreshButton)
-      
-      // Should show spinning icon
-      expect(screen.getByTestId('refresh-icon')).toHaveClass('animate-spin')
-    })
-
-    it('handles export action', async () => {
-      const user = userEvent.setup()
-      render(<AnalyticsDashboard />)
-      
-      const exportButton = screen.getByText('Export')
-      await user.click(exportButton)
-      
-      expect(global.URL.createObjectURL).toHaveBeenCalled()
-      expect(global.URL.revokeObjectURL).toHaveBeenCalled()
-    })
-
-    it('generates correct export filename', async () => {
-      const user = userEvent.setup()
-      render(<AnalyticsDashboard />)
-      
-      // Change time range
-      const timeSelector = screen.getByRole('combobox')
-      await user.click(timeSelector)
-      const weekOption = screen.getByText('Last Week')
-      await user.click(weekOption)
-      
-      const exportButton = screen.getByText('Export')
-      await user.click(exportButton)
-      
-      // Should create download with correct filename
-      const downloadLink = document.querySelector('a[download]')
-      expect(downloadLink).toHaveAttribute('download', 'feedme-analytics-week.json')
-    })
-  })
-
-  describe('Real-time Updates', () => {
-    it('enables auto-refresh when real-time is active', () => {
-      vi.useFakeTimers()
-      
-      render(<AnalyticsDashboard enableRealTime refreshInterval={1000} />)
-      
-      // Fast-forward time
-      act(() => {
-        vi.advanceTimersByTime(1000)
-      })
-      
-      expect(mockActions.refreshAnalytics).toHaveBeenCalled()
-      
-      vi.useRealTimers()
-    })
-
-    it('disables auto-refresh when real-time is disabled', () => {
-      vi.useFakeTimers()
-      
-      render(<AnalyticsDashboard enableRealTime={false} refreshInterval={1000} />)
-      
-      // Fast-forward time
-      act(() => {
-        vi.advanceTimersByTime(2000)
-      })
-      
-      expect(mockActions.refreshAnalytics).not.toHaveBeenCalled()
-      
-      vi.useRealTimers()
-    })
-
-    it('updates timestamp display', () => {
-      render(<AnalyticsDashboard />)
-      
-      expect(screen.getByText(/Last updated:/)).toBeInTheDocument()
-    })
-
-    it('shows system health in footer', () => {
-      render(<AnalyticsDashboard />)
-      
-      expect(screen.getByText('System health: healthy')).toBeInTheDocument()
-      expect(screen.getByText(/total results indexed/)).toBeInTheDocument()
-    })
-  })
-
-  describe('Tag Interactions', () => {
-    it('displays tag tooltips', async () => {
-      const user = userEvent.setup()
-      render(<AnalyticsDashboard />)
-      
-      const syncTag = screen.getByText('sync')
-      await user.hover(syncTag)
-      
-      await waitFor(() => {
-        expect(screen.getByText('3421 uses')).toBeInTheDocument()
-        expect(screen.getByText('+15.2% growth')).toBeInTheDocument()
-        expect(screen.getByText('Issues')).toBeInTheDocument()
-      })
-    })
-
-    it('sizes tags based on usage', () => {
-      render(<AnalyticsDashboard />)
-      
-      const syncTag = screen.getByText('sync')
-      const settingsTag = screen.getByText('settings')
-      
-      // Sync tag should be larger due to higher count
-      expect(syncTag.closest('span')).toHaveStyle({ fontSize: expect.stringMatching(/rem/) })
-      expect(settingsTag.closest('span')).toHaveStyle({ fontSize: expect.stringMatching(/rem/) })
-    })
-
-    it('shows growth indicators in tooltips', async () => {
-      const user = userEvent.setup()
-      render(<AnalyticsDashboard />)
-      
-      const performanceTag = screen.getByText('performance')
-      await user.hover(performanceTag)
-      
-      await waitFor(() => {
-        expect(screen.getByText('+22.4% growth')).toBeInTheDocument()
-      })
-    })
-  })
-
-  describe('Loading States', () => {
-    it('handles loading state', () => {
-      ;(useAnalytics as any).mockReturnValue({
-        ...mockAnalytics,
-        isLoading: true,
-      })
-
-      render(<AnalyticsDashboard />)
-      
-      expect(screen.getByText('Loading analytics...')).toBeInTheDocument()
-    })
-
-    it('shows skeleton placeholders during loading', () => {
-      ;(useAnalytics as any).mockReturnValue({
-        ...mockAnalytics,
-        isLoading: true,
-      })
-
-      render(<AnalyticsDashboard />)
-      
-      expect(screen.getAllByTestId('skeleton')).toHaveLength(4) // Metric cards
-    })
-  })
-
-  describe('Error Handling', () => {
-    it('handles refresh errors gracefully', async () => {
-      mockActions.refreshAnalytics.mockRejectedValue(new Error('Network error'))
-      
-      const user = userEvent.setup()
-      render(<AnalyticsDashboard />)
-      
-      const refreshButton = screen.getByText('Refresh')
-      await user.click(refreshButton)
-      
-      await waitFor(() => {
-        expect(console.error).toHaveBeenCalledWith('Failed to refresh analytics:', expect.any(Error))
-      })
-    })
-
-    it('continues functioning after errors', async () => {
-      mockActions.refreshAnalytics.mockRejectedValueOnce(new Error('Network error'))
-      
-      const user = userEvent.setup()
-      render(<AnalyticsDashboard />)
-      
-      const refreshButton = screen.getByText('Refresh')
-      await user.click(refreshButton)
-      
-      // Should still be able to interact with dashboard
-      const performanceTab = screen.getByText('Performance')
-      await user.click(performanceTab)
-      
-      expect(screen.getByText('Cache Hit Rate')).toBeInTheDocument()
-    })
-  })
-
-  describe('Performance', () => {
-    it('renders quickly with large datasets', () => {
-      const startTime = performance.now()
-      render(<AnalyticsDashboard />)
-      const endTime = performance.now()
-      
-      expect(endTime - startTime).toBeLessThan(100)
-      expect(screen.getByText('Search Analytics')).toBeInTheDocument()
-    })
-
-    it('memoizes expensive calculations', () => {
-      const { rerender } = render(<AnalyticsDashboard />)
-      
-      // Re-render with same props
-      rerender(<AnalyticsDashboard />)
-      
-      // Should not recalculate chart data
-      expect(screen.getByText('Search Analytics')).toBeInTheDocument()
-    })
-
-    it('handles large time series data efficiently', () => {
-      const largeTimeSeriesData = Array.from({ length: 10000 }, (_, i) => ({
-        timestamp: `${i}:00`,
-        searches: Math.floor(Math.random() * 1000),
-        users: Math.floor(Math.random() * 500),
-        responseTime: Math.floor(Math.random() * 300),
-        successRate: Math.random(),
-      }))
-
-      // Mock large dataset
-      ;(useAnalytics as any).mockReturnValue({
-        ...mockAnalytics,
-        timeSeriesData: largeTimeSeriesData,
-      })
-
-      const startTime = performance.now()
-      render(<AnalyticsDashboard />)
-      const endTime = performance.now()
-      
-      expect(endTime - startTime).toBeLessThan(200)
-    })
-  })
-
-  describe('Accessibility', () => {
-    it('has proper ARIA labels', () => {
-      render(<AnalyticsDashboard />)
-      
-      expect(screen.getByRole('main')).toBeInTheDocument()
-      expect(screen.getByRole('tablist')).toBeInTheDocument()
-      expect(screen.getAllByRole('tab')).toHaveLength(4)
-    })
-
-    it('supports keyboard navigation', async () => {
-      const user = userEvent.setup()
-      render(<AnalyticsDashboard />)
-      
-      await user.keyboard('{Tab}')
-      expect(screen.getByRole('combobox')).toHaveFocus()
-      
-      await user.keyboard('{Tab}')
-      expect(screen.getByText('Export')).toHaveFocus()
-    })
-
-    it('has proper focus management in tabs', async () => {
-      const user = userEvent.setup()
-      render(<AnalyticsDashboard />)
-      
-      const performanceTab = screen.getByText('Performance')
-      await user.click(performanceTab)
-      
-      expect(performanceTab).toHaveAttribute('aria-selected', 'true')
-    })
-
-    it('provides screen reader announcements', async () => {
-      const user = userEvent.setup()
-      render(<AnalyticsDashboard />)
-      
-      const refreshButton = screen.getByText('Refresh')
-      await user.click(refreshButton)
-      
-      // Check for aria-live updates
-      expect(screen.getByText('Analytics refreshed')).toBeInTheDocument()
-    })
-  })
-
-  describe('Responsive Design', () => {
-    it('adapts to different screen sizes', () => {
-      // Mock window.innerWidth
-      Object.defineProperty(window, 'innerWidth', {
-        writable: true,
-        configurable: true,
-        value: 768,
-      })
-
-      render(<AnalyticsDashboard />)
-      
-      // Should render mobile-friendly layout
-      expect(screen.getByTestId('resizable-panel-group')).toHaveClass('flex-col')
-    })
-
-    it('adjusts chart dimensions on resize', () => {
-      render(<AnalyticsDashboard />)
-      
-      // Simulate window resize
-      act(() => {
-        global.innerWidth = 1200
-        global.dispatchEvent(new Event('resize'))
-      })
-      
-      expect(screen.getAllByTestId('responsive-container')).toHaveLength(2)
-    })
-  })
-})
\ No newline at end of file
diff --git a/frontend/components/feedme/__tests__/ConversationEditor.test.tsx b/frontend/components/feedme/__tests__/ConversationEditor.test.tsx
deleted file mode 100644
index e6023e2..0000000
--- a/frontend/components/feedme/__tests__/ConversationEditor.test.tsx
+++ /dev/null
@@ -1,797 +0,0 @@
-/**
- * ConversationEditor Component Tests
- * 
- * Comprehensive test suite for the ConversationEditor component with 95%+ coverage.
- * Tests split-pane layout, AI-powered editing, real-time preview, and inline editing.
- */
-
-import React from 'react'
-import { render, screen, fireEvent, waitFor, act } from '@testing-library/react'
-import userEvent from '@testing-library/user-event'
-import { vi, describe, it, expect, beforeEach, afterEach } from 'vitest'
-import { ConversationEditor } from '../ConversationEditor'
-import { useConversation, useActions } from '@/lib/stores/feedme-store'
-
-// Mock the store
-vi.mock('@/lib/stores/feedme-store', () => ({
-  useConversation: vi.fn(),
-  useActions: vi.fn(),
-}))
-
-// Mock react-resizable-panels
-vi.mock('react-resizable-panels', () => ({
-  ResizablePanelGroup: ({ children, direction }: any) => (
-    <div data-testid="resizable-panel-group" data-direction={direction}>
-      {children}
-    </div>
-  ),
-  ResizablePanel: ({ children, defaultSize }: any) => (
-    <div data-testid="resizable-panel" data-default-size={defaultSize}>
-      {children}
-    </div>
-  ),
-  ResizableHandle: () => <div data-testid="resizable-handle" />,
-}))
-
-// Mock lucide-react icons
-vi.mock('lucide-react', () => ({
-  Split: () => <div data-testid="split-icon" />,
-  Eye: () => <div data-testid="eye-icon" />,
-  Edit: () => <div data-testid="edit-icon" />,
-  Save: () => <div data-testid="save-icon" />,
-  RotateCcw: () => <div data-testid="rotate-ccw-icon" />,
-  Wand2: () => <div data-testid="wand-icon" />,
-  FileText: () => <div data-testid="file-text-icon" />,
-  Bot: () => <div data-testid="bot-icon" />,
-  User: () => <div data-testid="user-icon" />,
-  MessageSquare: () => <div data-testid="message-square-icon" />,
-  CheckCircle2: () => <div data-testid="check-circle-icon" />,
-  AlertCircle: () => <div data-testid="alert-circle-icon" />,
-  Loader: () => <div data-testid="loader-icon" />,
-  Zap: () => <div data-testid="zap-icon" />,
-  Brain: () => <div data-testid="brain-icon" />,
-  Clock: () => <div data-testid="clock-icon" />,
-}))
-
-// Mock debounce hook
-vi.mock('@/hooks/use-debounce', () => ({
-  useDebounce: (value: any, delay: number) => value,
-}))
-
-// Mock data
-const mockConversation = {
-  id: 'conv-1',
-  title: 'Customer Support Chat',
-  originalFilename: 'support-chat.txt',
-  folderId: 'folder-1',
-  processingStatus: 'completed' as const,
-  totalExamples: 12,
-  uploadedAt: '2025-07-01T10:00:00Z',
-  processedAt: '2025-07-01T10:15:00Z',
-  uploadedBy: 'user-1',
-  metadata: {
-    fileSize: 1024 * 50,
-    encoding: 'utf-8',
-    lineCount: 150,
-    platform: 'web',
-    tags: ['support', 'urgent'],
-  },
-  rawTranscript: `[10:00] Customer: I'm having trouble with email sync
-[10:01] Agent: I can help you with that. What email provider are you using?
-[10:02] Customer: Gmail. It was working fine yesterday but stopped this morning.
-[10:03] Agent: Let me check your account settings. Can you try reconnecting your Gmail account?
-[10:04] Customer: How do I do that?
-[10:05] Agent: Go to Settings > Accounts > Gmail and click Reconnect.
-[10:06] Customer: That worked! Thank you so much.
-[10:07] Agent: You're welcome! Is there anything else I can help you with?`,
-  parsedContent: {
-    messages: [
-      {
-        timestamp: '10:00',
-        sender: 'Customer',
-        message: "I'm having trouble with email sync",
-        type: 'question',
-      },
-      {
-        timestamp: '10:01',
-        sender: 'Agent',
-        message: 'I can help you with that. What email provider are you using?',
-        type: 'response',
-      },
-      {
-        timestamp: '10:02',
-        sender: 'Customer',
-        message: 'Gmail. It was working fine yesterday but stopped this morning.',
-        type: 'clarification',
-      },
-      {
-        timestamp: '10:03',
-        sender: 'Agent',
-        message: 'Let me check your account settings. Can you try reconnecting your Gmail account?',
-        type: 'solution',
-      },
-      {
-        timestamp: '10:04',
-        sender: 'Customer',
-        message: 'How do I do that?',
-        type: 'question',
-      },
-      {
-        timestamp: '10:05',
-        sender: 'Agent',
-        message: 'Go to Settings > Accounts > Gmail and click Reconnect.',
-        type: 'instruction',
-      },
-      {
-        timestamp: '10:06',
-        sender: 'Customer',
-        message: 'That worked! Thank you so much.',
-        type: 'confirmation',
-      },
-      {
-        timestamp: '10:07',
-        sender: 'Agent',
-        message: "You're welcome! Is there anything else I can help you with?",
-        type: 'followup',
-      },
-    ],
-    summary: 'Customer resolved Gmail sync issue by reconnecting account',
-    issueType: 'email_sync',
-    resolution: 'reconnect_account',
-    tags: ['gmail', 'sync', 'resolved'],
-  },
-  errorMessage: null,
-  createdAt: '2025-07-01T10:00:00Z',
-  updatedAt: '2025-07-01T10:15:00Z',
-}
-
-const mockActions = {
-  updateConversation: vi.fn(),
-  reprocessConversation: vi.fn(),
-  generateAIPreview: vi.fn(),
-  validateConversation: vi.fn(),
-  saveConversationChanges: vi.fn(),
-}
-
-describe('ConversationEditor', () => {
-  beforeEach(() => {
-    vi.clearAllMocks()
-    
-    // Setup store mocks
-    ;(useConversation as any).mockReturnValue({
-      conversation: mockConversation,
-      isLoading: false,
-      error: null,
-      hasUnsavedChanges: false,
-      aiPreview: null,
-      validationResults: null,
-    })
-    
-    ;(useActions as any).mockReturnValue(mockActions)
-  })
-
-  afterEach(() => {
-    vi.clearAllMocks()
-  })
-
-  describe('Rendering', () => {
-    it('renders conversation editor with split layout', () => {
-      render(<ConversationEditor conversationId="conv-1" />)
-      
-      expect(screen.getByTestId('resizable-panel-group')).toBeInTheDocument()
-      expect(screen.getAllByTestId('resizable-panel')).toHaveLength(2)
-      expect(screen.getByTestId('resizable-handle')).toBeInTheDocument()
-    })
-
-    it('displays original transcript in left panel', () => {
-      render(<ConversationEditor conversationId="conv-1" />)
-      
-      expect(screen.getByText('Original Transcript')).toBeInTheDocument()
-      expect(screen.getByText("[10:00] Customer: I'm having trouble with email sync")).toBeInTheDocument()
-      expect(screen.getByText('[10:01] Agent: I can help you with that. What email provider are you using?')).toBeInTheDocument()
-    })
-
-    it('displays AI-extracted content in right panel', () => {
-      render(<ConversationEditor conversationId="conv-1" />)
-      
-      expect(screen.getByText('AI-Extracted Content')).toBeInTheDocument()
-      expect(screen.getByText('Customer resolved Gmail sync issue by reconnecting account')).toBeInTheDocument()
-      expect(screen.getByText('email_sync')).toBeInTheDocument()
-    })
-
-    it('shows conversation metadata', () => {
-      render(<ConversationEditor conversationId="conv-1" />)
-      
-      expect(screen.getByText('Customer Support Chat')).toBeInTheDocument()
-      expect(screen.getByText('support-chat.txt')).toBeInTheDocument()
-      expect(screen.getByText('12 examples')).toBeInTheDocument()
-      expect(screen.getByText('150 lines')).toBeInTheDocument()
-    })
-
-    it('handles loading state', () => {
-      ;(useConversation as any).mockReturnValue({
-        conversation: null,
-        isLoading: true,
-        error: null,
-        hasUnsavedChanges: false,
-        aiPreview: null,
-        validationResults: null,
-      })
-
-      render(<ConversationEditor conversationId="conv-1" />)
-      
-      expect(screen.getByText('Loading conversation...')).toBeInTheDocument()
-      expect(screen.getByTestId('loader-icon')).toBeInTheDocument()
-    })
-
-    it('handles error state', () => {
-      ;(useConversation as any).mockReturnValue({
-        conversation: null,
-        isLoading: false,
-        error: 'Failed to load conversation',
-        hasUnsavedChanges: false,
-        aiPreview: null,
-        validationResults: null,
-      })
-
-      render(<ConversationEditor conversationId="conv-1" />)
-      
-      expect(screen.getByText('Error: Failed to load conversation')).toBeInTheDocument()
-    })
-  })
-
-  describe('Toolbar Actions', () => {
-    it('renders toolbar with action buttons', () => {
-      render(<ConversationEditor conversationId="conv-1" />)
-      
-      expect(screen.getByText('Save Changes')).toBeInTheDocument()
-      expect(screen.getByText('Discard Changes')).toBeInTheDocument()
-      expect(screen.getByText('AI Re-extract')).toBeInTheDocument()
-      expect(screen.getByText('Preview Mode')).toBeInTheDocument()
-    })
-
-    it('handles save changes action', async () => {
-      ;(useConversation as any).mockReturnValue({
-        conversation: mockConversation,
-        isLoading: false,
-        error: null,
-        hasUnsavedChanges: true,
-        aiPreview: null,
-        validationResults: null,
-      })
-
-      const user = userEvent.setup()
-      render(<ConversationEditor conversationId="conv-1" />)
-      
-      const saveButton = screen.getByText('Save Changes')
-      await user.click(saveButton)
-      
-      expect(mockActions.saveConversationChanges).toHaveBeenCalledWith('conv-1')
-    })
-
-    it('handles discard changes action', async () => {
-      ;(useConversation as any).mockReturnValue({
-        conversation: mockConversation,
-        isLoading: false,
-        error: null,
-        hasUnsavedChanges: true,
-        aiPreview: null,
-        validationResults: null,
-      })
-
-      const user = userEvent.setup()
-      render(<ConversationEditor conversationId="conv-1" />)
-      
-      const discardButton = screen.getByText('Discard Changes')
-      await user.click(discardButton)
-      
-      // Should show confirmation dialog
-      expect(screen.getByText('Discard unsaved changes?')).toBeInTheDocument()
-    })
-
-    it('handles AI re-extract action', async () => {
-      const user = userEvent.setup()
-      render(<ConversationEditor conversationId="conv-1" />)
-      
-      const reextractButton = screen.getByText('AI Re-extract')
-      await user.click(reextractButton)
-      
-      expect(mockActions.reprocessConversation).toHaveBeenCalledWith('conv-1')
-    })
-
-    it('toggles preview mode', async () => {
-      const user = userEvent.setup()
-      render(<ConversationEditor conversationId="conv-1" />)
-      
-      const previewButton = screen.getByText('Preview Mode')
-      await user.click(previewButton)
-      
-      expect(screen.getByText('Edit Mode')).toBeInTheDocument()
-    })
-  })
-
-  describe('Inline Editing', () => {
-    it('enables inline editing on click', async () => {
-      const user = userEvent.setup()
-      render(<ConversationEditor conversationId="conv-1" />)
-      
-      const messageText = screen.getByText("I'm having trouble with email sync")
-      await user.click(messageText)
-      
-      expect(screen.getByDisplayValue("I'm having trouble with email sync")).toBeInTheDocument()
-    })
-
-    it('saves changes on Enter key', async () => {
-      const user = userEvent.setup()
-      render(<ConversationEditor conversationId="conv-1" />)
-      
-      const messageText = screen.getByText("I'm having trouble with email sync")
-      await user.click(messageText)
-      
-      const input = screen.getByDisplayValue("I'm having trouble with email sync")
-      await user.clear(input)
-      await user.type(input, 'I need help with email synchronization')
-      await user.keyboard('{Enter}')
-      
-      expect(mockActions.updateConversation).toHaveBeenCalledWith('conv-1', {
-        parsedContent: expect.objectContaining({
-          messages: expect.arrayContaining([
-            expect.objectContaining({
-              message: 'I need help with email synchronization',
-            }),
-          ]),
-        }),
-      })
-    })
-
-    it('cancels editing on Escape key', async () => {
-      const user = userEvent.setup()
-      render(<ConversationEditor conversationId="conv-1" />)
-      
-      const messageText = screen.getByText("I'm having trouble with email sync")
-      await user.click(messageText)
-      
-      const input = screen.getByDisplayValue("I'm having trouble with email sync")
-      await user.clear(input)
-      await user.type(input, 'Changed text')
-      await user.keyboard('{Escape}')
-      
-      expect(mockActions.updateConversation).not.toHaveBeenCalled()
-      expect(screen.getByText("I'm having trouble with email sync")).toBeInTheDocument()
-    })
-
-    it('highlights editable segments on hover', async () => {
-      const user = userEvent.setup()
-      render(<ConversationEditor conversationId="conv-1" />)
-      
-      const messageText = screen.getByText("I'm having trouble with email sync")
-      await user.hover(messageText)
-      
-      expect(messageText).toHaveClass('hover:bg-accent/50')
-    })
-  })
-
-  describe('AI Preview', () => {
-    it('shows AI preview when available', () => {
-      const mockAIPreview = {
-        messages: [
-          {
-            timestamp: '10:00',
-            sender: 'Customer',
-            message: 'Enhanced: I need assistance with email synchronization',
-            type: 'question',
-            confidence: 0.95,
-          },
-        ],
-        summary: 'Enhanced: Customer needs help resolving Gmail sync problems',
-        issueType: 'email_synchronization',
-        resolution: 'account_reconnection',
-        tags: ['gmail', 'sync', 'troubleshooting'],
-        improvements: [
-          'Clarified technical terminology',
-          'Enhanced problem description',
-          'Improved categorization',
-        ],
-      }
-
-      ;(useConversation as any).mockReturnValue({
-        conversation: mockConversation,
-        isLoading: false,
-        error: null,
-        hasUnsavedChanges: false,
-        aiPreview: mockAIPreview,
-        validationResults: null,
-      })
-
-      render(<ConversationEditor conversationId="conv-1" />)
-      
-      expect(screen.getByText('AI Preview')).toBeInTheDocument()
-      expect(screen.getByText('Enhanced: Customer needs help resolving Gmail sync problems')).toBeInTheDocument()
-      expect(screen.getByText('Clarified technical terminology')).toBeInTheDocument()
-    })
-
-    it('handles AI preview generation', async () => {
-      const user = userEvent.setup()
-      render(<ConversationEditor conversationId="conv-1" />)
-      
-      const generateButton = screen.getByText('Generate AI Preview')
-      await user.click(generateButton)
-      
-      expect(mockActions.generateAIPreview).toHaveBeenCalledWith('conv-1')
-    })
-
-    it('applies AI suggestions', async () => {
-      const mockAIPreview = {
-        messages: [
-          {
-            timestamp: '10:00',
-            sender: 'Customer',
-            message: 'Enhanced: I need assistance with email synchronization',
-            type: 'question',
-            confidence: 0.95,
-          },
-        ],
-        summary: 'Enhanced: Customer needs help resolving Gmail sync problems',
-        issueType: 'email_synchronization',
-        resolution: 'account_reconnection',
-        tags: ['gmail', 'sync', 'troubleshooting'],
-        improvements: [],
-      }
-
-      ;(useConversation as any).mockReturnValue({
-        conversation: mockConversation,
-        isLoading: false,
-        error: null,
-        hasUnsavedChanges: false,
-        aiPreview: mockAIPreview,
-        validationResults: null,
-      })
-
-      const user = userEvent.setup()
-      render(<ConversationEditor conversationId="conv-1" />)
-      
-      const applyButton = screen.getByText('Apply AI Changes')
-      await user.click(applyButton)
-      
-      expect(mockActions.updateConversation).toHaveBeenCalledWith('conv-1', {
-        parsedContent: mockAIPreview,
-      })
-    })
-  })
-
-  describe('Validation', () => {
-    it('shows validation results', () => {
-      const mockValidationResults = {
-        isValid: false,
-        errors: [
-          { field: 'summary', message: 'Summary is too short' },
-          { field: 'issueType', message: 'Issue type not recognized' },
-        ],
-        warnings: [
-          { field: 'tags', message: 'Consider adding more specific tags' },
-        ],
-        score: 0.75,
-        suggestions: [
-          'Add more detail to the summary',
-          'Use standard issue type categories',
-        ],
-      }
-
-      ;(useConversation as any).mockReturnValue({
-        conversation: mockConversation,
-        isLoading: false,
-        error: null,
-        hasUnsavedChanges: false,
-        aiPreview: null,
-        validationResults: mockValidationResults,
-      })
-
-      render(<ConversationEditor conversationId="conv-1" />)
-      
-      expect(screen.getByText('Validation Results')).toBeInTheDocument()
-      expect(screen.getByText('Summary is too short')).toBeInTheDocument()
-      expect(screen.getByText('Consider adding more specific tags')).toBeInTheDocument()
-      expect(screen.getByText('Score: 75%')).toBeInTheDocument()
-    })
-
-    it('triggers validation on changes', async () => {
-      const user = userEvent.setup()
-      render(<ConversationEditor conversationId="conv-1" />)
-      
-      const messageText = screen.getByText("I'm having trouble with email sync")
-      await user.click(messageText)
-      
-      const input = screen.getByDisplayValue("I'm having trouble with email sync")
-      await user.clear(input)
-      await user.type(input, 'Changed message')
-      await user.keyboard('{Enter}')
-      
-      expect(mockActions.validateConversation).toHaveBeenCalledWith('conv-1')
-    })
-
-    it('shows validation score with color coding', () => {
-      const mockValidationResults = {
-        isValid: true,
-        errors: [],
-        warnings: [],
-        score: 0.92,
-        suggestions: [],
-      }
-
-      ;(useConversation as any).mockReturnValue({
-        conversation: mockConversation,
-        isLoading: false,
-        error: null,
-        hasUnsavedChanges: false,
-        aiPreview: null,
-        validationResults: mockValidationResults,
-      })
-
-      render(<ConversationEditor conversationId="conv-1" />)
-      
-      const scoreElement = screen.getByText('Score: 92%')
-      expect(scoreElement).toHaveClass('text-green-600') // High score = green
-    })
-  })
-
-  describe('Message Types and Classification', () => {
-    it('displays message type indicators', () => {
-      render(<ConversationEditor conversationId="conv-1" />)
-      
-      expect(screen.getByText('question')).toBeInTheDocument()
-      expect(screen.getByText('response')).toBeInTheDocument()
-      expect(screen.getByText('solution')).toBeInTheDocument()
-      expect(screen.getByText('instruction')).toBeInTheDocument()
-    })
-
-    it('allows editing message types', async () => {
-      const user = userEvent.setup()
-      render(<ConversationEditor conversationId="conv-1" />)
-      
-      const messageType = screen.getByText('question')
-      await user.click(messageType)
-      
-      expect(screen.getByText('clarification')).toBeInTheDocument()
-      expect(screen.getByText('complaint')).toBeInTheDocument()
-    })
-
-    it('updates message classification', async () => {
-      const user = userEvent.setup()
-      render(<ConversationEditor conversationId="conv-1" />)
-      
-      const messageType = screen.getByText('question')
-      await user.click(messageType)
-      
-      const clarificationOption = screen.getByText('clarification')
-      await user.click(clarificationOption)
-      
-      expect(mockActions.updateConversation).toHaveBeenCalledWith('conv-1', {
-        parsedContent: expect.objectContaining({
-          messages: expect.arrayContaining([
-            expect.objectContaining({
-              type: 'clarification',
-            }),
-          ]),
-        }),
-      })
-    })
-  })
-
-  describe('Layout and Resizing', () => {
-    it('supports panel resizing', () => {
-      render(<ConversationEditor conversationId="conv-1" />)
-      
-      const resizeHandle = screen.getByTestId('resizable-handle')
-      expect(resizeHandle).toBeInTheDocument()
-    })
-
-    it('remembers panel sizes', () => {
-      const { rerender } = render(<ConversationEditor conversationId="conv-1" />)
-      
-      // Simulate panel resize
-      const leftPanel = screen.getAllByTestId('resizable-panel')[0]
-      expect(leftPanel).toHaveAttribute('data-default-size', '50')
-      
-      // Re-render should maintain size
-      rerender(<ConversationEditor conversationId="conv-1" />)
-      expect(screen.getAllByTestId('resizable-panel')[0]).toHaveAttribute('data-default-size', '50')
-    })
-
-    it('supports layout direction toggle', async () => {
-      const user = userEvent.setup()
-      render(<ConversationEditor conversationId="conv-1" />)
-      
-      const layoutButton = screen.getByText('Vertical Layout')
-      await user.click(layoutButton)
-      
-      const panelGroup = screen.getByTestId('resizable-panel-group')
-      expect(panelGroup).toHaveAttribute('data-direction', 'vertical')
-    })
-  })
-
-  describe('Keyboard Shortcuts', () => {
-    it('handles Ctrl+S for save', async () => {
-      ;(useConversation as any).mockReturnValue({
-        conversation: mockConversation,
-        isLoading: false,
-        error: null,
-        hasUnsavedChanges: true,
-        aiPreview: null,
-        validationResults: null,
-      })
-
-      const user = userEvent.setup()
-      render(<ConversationEditor conversationId="conv-1" />)
-      
-      await user.keyboard('{Control>}s{/Control}')
-      
-      expect(mockActions.saveConversationChanges).toHaveBeenCalledWith('conv-1')
-    })
-
-    it('handles Ctrl+Z for undo', async () => {
-      const user = userEvent.setup()
-      render(<ConversationEditor conversationId="conv-1" />)
-      
-      await user.keyboard('{Control>}z{/Control}')
-      
-      // Should trigger undo action
-      expect(screen.getByText('Undo')).toBeInTheDocument()
-    })
-
-    it('handles F5 for AI re-extract', async () => {
-      const user = userEvent.setup()
-      render(<ConversationEditor conversationId="conv-1" />)
-      
-      await user.keyboard('{F5}')
-      
-      expect(mockActions.reprocessConversation).toHaveBeenCalledWith('conv-1')
-    })
-  })
-
-  describe('Performance', () => {
-    it('debounces real-time updates', async () => {
-      const user = userEvent.setup()
-      render(<ConversationEditor conversationId="conv-1" />)
-      
-      const messageText = screen.getByText("I'm having trouble with email sync")
-      await user.click(messageText)
-      
-      const input = screen.getByDisplayValue("I'm having trouble with email sync")
-      
-      // Type quickly
-      await user.clear(input)
-      await user.type(input, 'test', { delay: 10 })
-      
-      // Should debounce updates
-      await waitFor(() => {
-        expect(input).toHaveValue('test')
-      }, { timeout: 600 })
-    })
-
-    it('memoizes expensive calculations', () => {
-      const { rerender } = render(<ConversationEditor conversationId="conv-1" />)
-      
-      // Re-render with same props
-      rerender(<ConversationEditor conversationId="conv-1" />)
-      
-      // Should not recalculate message parsing
-      expect(screen.getByText('Original Transcript')).toBeInTheDocument()
-    })
-
-    it('handles large conversations efficiently', () => {
-      const largeConversation = {
-        ...mockConversation,
-        parsedContent: {
-          ...mockConversation.parsedContent,
-          messages: Array.from({ length: 1000 }, (_, i) => ({
-            timestamp: `10:${i.toString().padStart(2, '0')}`,
-            sender: i % 2 === 0 ? 'Customer' : 'Agent',
-            message: `Message ${i}`,
-            type: 'response' as const,
-          })),
-        },
-      }
-
-      ;(useConversation as any).mockReturnValue({
-        conversation: largeConversation,
-        isLoading: false,
-        error: null,
-        hasUnsavedChanges: false,
-        aiPreview: null,
-        validationResults: null,
-      })
-
-      const startTime = performance.now()
-      render(<ConversationEditor conversationId="conv-1" />)
-      const endTime = performance.now()
-      
-      // Should render quickly even with large conversation
-      expect(endTime - startTime).toBeLessThan(200)
-      expect(screen.getByText('Original Transcript')).toBeInTheDocument()
-    })
-  })
-
-  describe('Error Handling', () => {
-    it('handles save errors gracefully', async () => {
-      mockActions.saveConversationChanges.mockRejectedValue(new Error('Save failed'))
-      
-      ;(useConversation as any).mockReturnValue({
-        conversation: mockConversation,
-        isLoading: false,
-        error: null,
-        hasUnsavedChanges: true,
-        aiPreview: null,
-        validationResults: null,
-      })
-
-      const user = userEvent.setup()
-      render(<ConversationEditor conversationId="conv-1" />)
-      
-      const saveButton = screen.getByText('Save Changes')
-      await user.click(saveButton)
-      
-      await waitFor(() => {
-        expect(screen.getByText('Failed to save changes')).toBeInTheDocument()
-      })
-    })
-
-    it('prevents data loss on unsaved changes', async () => {
-      ;(useConversation as any).mockReturnValue({
-        conversation: mockConversation,
-        isLoading: false,
-        error: null,
-        hasUnsavedChanges: true,
-        aiPreview: null,
-        validationResults: null,
-      })
-
-      render(<ConversationEditor conversationId="conv-1" />)
-      
-      // Should show unsaved changes indicator
-      expect(screen.getByText('Unsaved changes')).toBeInTheDocument()
-      expect(screen.getByTestId('alert-circle-icon')).toBeInTheDocument()
-    })
-
-    it('handles AI processing errors', async () => {
-      mockActions.generateAIPreview.mockRejectedValue(new Error('AI processing failed'))
-      
-      const user = userEvent.setup()
-      render(<ConversationEditor conversationId="conv-1" />)
-      
-      const generateButton = screen.getByText('Generate AI Preview')
-      await user.click(generateButton)
-      
-      await waitFor(() => {
-        expect(screen.getByText('AI processing failed')).toBeInTheDocument()
-      })
-    })
-  })
-
-  describe('Accessibility', () => {
-    it('has proper ARIA labels', () => {
-      render(<ConversationEditor conversationId="conv-1" />)
-      
-      expect(screen.getByRole('main')).toBeInTheDocument()
-      expect(screen.getByRole('toolbar')).toBeInTheDocument()
-    })
-
-    it('supports keyboard navigation', async () => {
-      const user = userEvent.setup()
-      render(<ConversationEditor conversationId="conv-1" />)
-      
-      await user.keyboard('{Tab}')
-      expect(screen.getByText('Save Changes')).toHaveFocus()
-    })
-
-    it('announces changes to screen readers', async () => {
-      const user = userEvent.setup()
-      render(<ConversationEditor conversationId="conv-1" />)
-      
-      const messageText = screen.getByText("I'm having trouble with email sync")
-      await user.click(messageText)
-      
-      // Check for aria-live announcements
-      expect(screen.getByText('Editing message')).toBeInTheDocument()
-    })
-  })
-})
\ No newline at end of file
diff --git a/frontend/components/feedme/__tests__/DragDropManager.test.tsx b/frontend/components/feedme/__tests__/DragDropManager.test.tsx
deleted file mode 100644
index 87f21bd..0000000
--- a/frontend/components/feedme/__tests__/DragDropManager.test.tsx
+++ /dev/null
@@ -1,811 +0,0 @@
-/**
- * DragDropManager Component Tests
- * 
- * Comprehensive test suite for the DragDropManager component with 95%+ coverage.
- * Tests advanced drag-and-drop, conflict resolution, progress tracking, and move operations.
- */
-
-import React from 'react'
-import { render, screen, fireEvent, waitFor, act } from '@testing-library/react'
-import userEvent from '@testing-library/user-event'
-import { vi, describe, it, expect, beforeEach, afterEach } from 'vitest'
-import { DragDropContext, type DropResult } from '@hello-pangea/dnd'
-import { DragDropManager } from '../DragDropManager'
-import { useMoveOperations, useActions, useFolders } from '@/lib/stores/feedme-store'
-// Import the module purely for type reference
-import type * as Store from '@/lib/stores/feedme-store'
-
-// Mock the store
-vi.mock('@/lib/stores/feedme-store', (): Partial<typeof import('@/lib/stores/feedme-store')> => ({
-  // typed stubbed hooks
-  useMoveOperations: vi.fn() as unknown as typeof Store.useMoveOperations,
-  useActions: vi.fn() as unknown as typeof Store.useActions,
-  useFolders: vi.fn() as unknown as typeof Store.useFolders,
-}))
-
-// Helper typed mocks for store hooks
-const mockedUseMoveOperations = vi.mocked(useMoveOperations)
-const mockedUseActions = vi.mocked(useActions)
-const mockedUseFolders = vi.mocked(useFolders as unknown as typeof Store.useFolders)
-
-// Mock @hello-pangea/dnd
-vi.mock('@hello-pangea/dnd', () => ({
-  DragDropContext: ({ children, onDragEnd }: any) => (
-    <div data-testid="drag-drop-context" onDrop={onDragEnd}>
-      {children}
-    </div>
-  ),
-  Droppable: ({ children }: any) => (
-    <div data-testid="droppable">
-      {children({ droppableProps: {}, innerRef: vi.fn(), placeholder: null })}
-    </div>
-  ),
-  Draggable: ({ children }: any) => (
-    <div data-testid="draggable">
-      {children({ draggableProps: {}, dragHandleProps: {}, innerRef: vi.fn() })}
-    </div>
-  ),
-}))
-
-// Mock lucide-react icons
-vi.mock('lucide-react', () => ({
-  Move: () => <div data-testid="move-icon" />,
-  Copy: () => <div data-testid="copy-icon" />,
-  AlertTriangle: () => <div data-testid="alert-triangle-icon" />,
-  CheckCircle2: () => <div data-testid="check-circle-icon" />,
-  XCircle: () => <div data-testid="x-circle-icon" />,
-  Loader: () => <div data-testid="loader-icon" />,
-  FolderOpen: () => <div data-testid="folder-open-icon" />,
-  FileText: () => <div data-testid="file-text-icon" />,
-  ArrowRight: () => <div data-testid="arrow-right-icon" />,
-  RotateCcw: () => <div data-testid="rotate-ccw-icon" />,
-  Trash2: () => <div data-testid="trash-icon" />,
-  Info: () => <div data-testid="info-icon" />,
-}))
-
-// Mock data
-const mockMoveOperations = {
-  activeOperation: null,
-  operationHistory: [],
-  conflicts: [],
-  progress: {
-    current: 0,
-    total: 0,
-    percentage: 0,
-    isActive: false,
-    estimatedTimeRemaining: 0,
-  },
-  validationResults: null,
-}
-
-const mockFolders = [
-  {
-    id: 'folder-1',
-    name: 'Source Folder',
-    parentId: null,
-    children: ['folder-3'],
-    conversationCount: 5,
-    totalSize: 1024 * 1024,
-    createdAt: '2025-07-01T10:00:00Z',
-    updatedAt: '2025-07-01T10:00:00Z',
-  },
-  {
-    id: 'folder-2',
-    name: 'Target Folder',
-    parentId: null,
-    children: [],
-    conversationCount: 2,
-    totalSize: 512 * 1024,
-    createdAt: '2025-07-01T10:00:00Z',
-    updatedAt: '2025-07-01T10:00:00Z',
-  },
-  {
-    id: 'folder-3',
-    name: 'Nested Folder',
-    parentId: 'folder-1',
-    children: [],
-    conversationCount: 1,
-    totalSize: 256 * 1024,
-    createdAt: '2025-07-01T10:00:00Z',
-    updatedAt: '2025-07-01T10:00:00Z',
-  },
-]
-
-const mockActions = {
-  moveConversations: vi.fn(),
-  moveFolders: vi.fn(),
-  validateMoveOperation: vi.fn(),
-  resolveConflict: vi.fn(),
-  cancelMoveOperation: vi.fn(),
-  rollbackMoveOperation: vi.fn(),
-  clearMoveHistory: vi.fn(),
-}
-
-describe('DragDropManager', () => {
-  beforeEach(() => {
-    vi.clearAllMocks()
-    
-    // Setup store mocks
-    mockedUseMoveOperations.mockReturnValue(mockMoveOperations)
-    // Convert folder array to record keyed by id for component expectations
-    const foldersRecord = Object.fromEntries(mockFolders.map(f => [parseInt((f as any).id), f])) as any
-    mockedUseFolders.mockReturnValue(foldersRecord)
-    mockedUseActions.mockReturnValue(mockActions as any)
-  })
-
-  afterEach(() => {
-    vi.clearAllMocks()
-  })
-
-  describe('Rendering', () => {
-    it('renders drag drop context', () => {
-      render(<DragDropManager />)
-      
-      expect(screen.getByTestId('drag-drop-context')).toBeInTheDocument()
-    })
-
-    it('renders without active operations', () => {
-      render(<DragDropManager />)
-      
-      expect(screen.queryByText('Move Operation in Progress')).not.toBeInTheDocument()
-    })
-
-    it('displays drag zones when enabled', () => {
-      render(<DragDropManager enableDropZones />)
-      
-      expect(screen.getByText('Drop files or folders here')).toBeInTheDocument()
-      expect(screen.getByTestId('droppable')).toBeInTheDocument()
-    })
-  })
-
-  describe('Drag Operations', () => {
-    it('handles drag start', () => {
-      const onDragStart = vi.fn()
-      render(<DragDropManager onDragStart={onDragStart} />)
-      
-      const dragContext = screen.getByTestId('drag-drop-context')
-      fireEvent.dragStart(dragContext, {
-        dataTransfer: {
-          setData: vi.fn(),
-          effectAllowed: 'move',
-        },
-      })
-      
-      expect(onDragStart).toHaveBeenCalled()
-    })
-
-    it('handles drag end with valid drop', async () => {
-      const mockDropResult = {
-        draggableId: 'conv-1',
-        type: 'conversation',
-        source: { droppableId: 'folder-1', index: 0 },
-        destination: { droppableId: 'folder-2', index: 0 },
-        reason: 'DROP',
-      }
-
-      render(<DragDropManager />)
-      
-      const dragContext = screen.getByTestId('drag-drop-context')
-      fireEvent.drop(dragContext, mockDropResult)
-      
-      await waitFor(() => {
-        expect(mockActions.validateMoveOperation).toHaveBeenCalledWith({
-          sourceId: 'folder-1',
-          targetId: 'folder-2',
-          itemIds: ['conv-1'],
-          itemType: 'conversation',
-        })
-      })
-    })
-
-    it('ignores invalid drop operations', () => {
-      const mockDropResult: DropResult = {
-        draggableId: 'conv-1',
-        type: 'conversation',
-        source: { droppableId: 'folder-1', index: 0 },
-        destination: null, // Invalid drop – use null per DropResult contract
-        reason: 'DROP',
-      }
-
-      render(<DragDropManager />)
-      
-      const dragContext = screen.getByTestId('drag-drop-context')
-      fireEvent.drop(dragContext, mockDropResult)
-      
-      expect(mockActions.validateMoveOperation).not.toHaveBeenCalled()
-    })
-
-    it('prevents circular folder moves', () => {
-      const mockDropResult = {
-        draggableId: 'folder-1',
-        type: 'folder',
-        source: { droppableId: 'root', index: 0 },
-        destination: { droppableId: 'folder-3', index: 0 }, // Child folder
-        reason: 'DROP',
-      }
-
-      render(<DragDropManager />)
-      
-      const dragContext = screen.getByTestId('drag-drop-context')
-      fireEvent.drop(dragContext, mockDropResult)
-      
-      expect(mockActions.validateMoveOperation).not.toHaveBeenCalled()
-      expect(screen.getByText('Cannot move folder into its own child')).toBeInTheDocument()
-    })
-  })
-
-  describe('Active Operation Display', () => {
-    beforeEach(() => {
-      ;(useMoveOperations as any).mockReturnValue({
-        ...mockMoveOperations,
-        activeOperation: {
-          id: 'op-1',
-          type: 'move',
-          sourceId: 'folder-1',
-          targetId: 'folder-2',
-          itemIds: ['conv-1', 'conv-2'],
-          itemType: 'conversation',
-          status: 'in_progress',
-          startedAt: '2025-07-01T10:00:00Z',
-          metadata: {
-            totalItems: 2,
-            processedItems: 1,
-            estimatedDuration: 5000,
-          },
-        },
-        progress: {
-          current: 1,
-          total: 2,
-          percentage: 50,
-          isActive: true,
-          estimatedTimeRemaining: 2500,
-        },
-      })
-    })
-
-    it('displays active move operation', () => {
-      render(<DragDropManager />)
-      
-      expect(screen.getByText('Move Operation in Progress')).toBeInTheDocument()
-      expect(screen.getByText('Moving 2 conversations')).toBeInTheDocument()
-      expect(screen.getByText('Source Folder → Target Folder')).toBeInTheDocument()
-    })
-
-    it('shows progress indicator', () => {
-      render(<DragDropManager />)
-      
-      expect(screen.getByText('1 of 2 completed')).toBeInTheDocument()
-      expect(screen.getByText('50%')).toBeInTheDocument()
-      expect(screen.getByText('~3s remaining')).toBeInTheDocument()
-    })
-
-    it('displays cancel button for active operations', async () => {
-      const user = userEvent.setup()
-      render(<DragDropManager />)
-      
-      const cancelButton = screen.getByText('Cancel')
-      await user.click(cancelButton)
-      
-      expect(mockActions.cancelMoveOperation).toHaveBeenCalledWith('op-1')
-    })
-
-    it('shows operation details', () => {
-      render(<DragDropManager />)
-      
-      expect(screen.getByText('Operation Details')).toBeInTheDocument()
-      expect(screen.getByText('Type: Move')).toBeInTheDocument()
-      expect(screen.getByText('Items: 2 conversations')).toBeInTheDocument()
-      expect(screen.getByText('Started: 10:00 AM')).toBeInTheDocument()
-    })
-  })
-
-  describe('Conflict Resolution', () => {
-    beforeEach(() => {
-      ;(useMoveOperations as any).mockReturnValue({
-        ...mockMoveOperations,
-        conflicts: [
-          {
-            id: 'conflict-1',
-            type: 'name_collision',
-            itemId: 'conv-1',
-            itemName: 'Customer Support Chat.txt',
-            targetName: 'Customer Support Chat.txt',
-            conflictType: 'file_exists',
-            severity: 'warning',
-            suggestions: ['rename', 'replace', 'skip'],
-            metadata: {
-              sourceSize: 1024,
-              targetSize: 2048,
-              sourceModified: '2025-07-01T10:00:00Z',
-              targetModified: '2025-07-01T09:00:00Z',
-            },
-          },
-          {
-            id: 'conflict-2',
-            type: 'permission_denied',
-            itemId: 'conv-2',
-            itemName: 'Private Chat.txt',
-            severity: 'error',
-            message: 'Insufficient permissions to move this file',
-            suggestions: ['skip', 'change_permissions'],
-            metadata: {},
-          },
-        ],
-      })
-    })
-
-    it('displays conflict resolution dialog', () => {
-      render(<DragDropManager />)
-      
-      expect(screen.getByText('Resolve Conflicts')).toBeInTheDocument()
-      expect(screen.getByText('2 conflicts need resolution')).toBeInTheDocument()
-    })
-
-    it('shows conflict details', () => {
-      render(<DragDropManager />)
-      
-      expect(screen.getByText('Customer Support Chat.txt')).toBeInTheDocument()
-      expect(screen.getByText('File already exists in target folder')).toBeInTheDocument()
-      expect(screen.getByText('Private Chat.txt')).toBeInTheDocument()
-      expect(screen.getByText('Insufficient permissions to move this file')).toBeInTheDocument()
-    })
-
-    it('provides resolution options', () => {
-      render(<DragDropManager />)
-      
-      expect(screen.getByText('Rename')).toBeInTheDocument()
-      expect(screen.getByText('Replace')).toBeInTheDocument()
-      expect(screen.getByText('Skip')).toBeInTheDocument()
-    })
-
-    it('handles conflict resolution', async () => {
-      const user = userEvent.setup()
-      render(<DragDropManager />)
-      
-      const renameButton = screen.getByText('Rename')
-      await user.click(renameButton)
-      
-      expect(mockActions.resolveConflict).toHaveBeenCalledWith('conflict-1', {
-        action: 'rename',
-        newName: expect.any(String),
-      })
-    })
-
-    it('shows file comparison for name collisions', () => {
-      render(<DragDropManager />)
-      
-      expect(screen.getByText('Source: 1 KB')).toBeInTheDocument()
-      expect(screen.getByText('Target: 2 KB')).toBeInTheDocument()
-      expect(screen.getByText('Source newer')).toBeInTheDocument()
-    })
-
-    it('handles bulk conflict resolution', async () => {
-      const user = userEvent.setup()
-      render(<DragDropManager />)
-      
-      const applyToAllCheckbox = screen.getByText('Apply to all similar conflicts')
-      await user.click(applyToAllCheckbox)
-      
-      const renameButton = screen.getByText('Rename')
-      await user.click(renameButton)
-      
-      expect(mockActions.resolveConflict).toHaveBeenCalledWith('conflict-1', {
-        action: 'rename',
-        newName: expect.any(String),
-        applyToAll: true,
-      })
-    })
-  })
-
-  describe('Progress Tracking', () => {
-    it('displays progress bar', () => {
-      ;(useMoveOperations as any).mockReturnValue({
-        ...mockMoveOperations,
-        progress: {
-          current: 3,
-          total: 10,
-          percentage: 30,
-          isActive: true,
-          estimatedTimeRemaining: 7000,
-        },
-      })
-
-      render(<DragDropManager />)
-      
-      const progressBar = screen.getByRole('progressbar')
-      expect(progressBar).toHaveAttribute('aria-valuenow', '30')
-      expect(screen.getByText('30%')).toBeInTheDocument()
-    })
-
-    it('shows detailed progress information', () => {
-      ;(useMoveOperations as any).mockReturnValue({
-        ...mockMoveOperations,
-        progress: {
-          current: 7,
-          total: 15,
-          percentage: 47,
-          isActive: true,
-          estimatedTimeRemaining: 12000,
-        },
-      })
-
-      render(<DragDropManager />)
-      
-      expect(screen.getByText('7 of 15 completed')).toBeInTheDocument()
-      expect(screen.getByText('~12s remaining')).toBeInTheDocument()
-    })
-
-    it('updates progress in real-time', async () => {
-      const { rerender } = render(<DragDropManager />)
-      
-      // Update progress
-      ;(useMoveOperations as any).mockReturnValue({
-        ...mockMoveOperations,
-        progress: {
-          current: 8,
-          total: 10,
-          percentage: 80,
-          isActive: true,
-          estimatedTimeRemaining: 2000,
-        },
-      })
-
-      rerender(<DragDropManager />)
-      
-      expect(screen.getByText('80%')).toBeInTheDocument()
-      expect(screen.getByText('8 of 10 completed')).toBeInTheDocument()
-    })
-  })
-
-  describe('Operation History', () => {
-    beforeEach(() => {
-      ;(useMoveOperations as any).mockReturnValue({
-        ...mockMoveOperations,
-        operationHistory: [
-          {
-            id: 'op-1',
-            type: 'move',
-            sourceId: 'folder-1',
-            targetId: 'folder-2',
-            itemIds: ['conv-1', 'conv-2'],
-            itemType: 'conversation',
-            status: 'completed',
-            startedAt: '2025-07-01T10:00:00Z',
-            completedAt: '2025-07-01T10:02:30Z',
-            metadata: {
-              totalItems: 2,
-              duration: 150000,
-              conflicts: 1,
-              resolved: 1,
-            },
-          },
-          {
-            id: 'op-2',
-            type: 'move',
-            sourceId: 'folder-2',
-            targetId: 'folder-3',
-            itemIds: ['folder-4'],
-            itemType: 'folder',
-            status: 'failed',
-            startedAt: '2025-07-01T11:00:00Z',
-            completedAt: '2025-07-01T11:01:15Z',
-            error: 'Permission denied',
-            metadata: {
-              totalItems: 1,
-              duration: 75000,
-            },
-          },
-        ],
-      })
-    })
-
-    it('displays operation history', () => {
-      render(<DragDropManager showHistory />)
-      
-      expect(screen.getByText('Operation History')).toBeInTheDocument()
-      expect(screen.getByText('2 operations')).toBeInTheDocument()
-    })
-
-    it('shows completed operations', () => {
-      render(<DragDropManager showHistory />)
-      
-      expect(screen.getByText('Move 2 conversations')).toBeInTheDocument()
-      expect(screen.getByText('Source Folder → Target Folder')).toBeInTheDocument()
-      expect(screen.getByText('Completed in 2m 30s')).toBeInTheDocument()
-      expect(screen.getByTestId('check-circle-icon')).toBeInTheDocument()
-    })
-
-    it('shows failed operations', () => {
-      render(<DragDropManager showHistory />)
-      
-      expect(screen.getByText('Move 1 folder')).toBeInTheDocument()
-      expect(screen.getByText('Failed: Permission denied')).toBeInTheDocument()
-      expect(screen.getByTestId('x-circle-icon')).toBeInTheDocument()
-    })
-
-    it('provides rollback option for completed operations', async () => {
-      const user = userEvent.setup()
-      render(<DragDropManager showHistory />)
-      
-      const rollbackButton = screen.getByText('Rollback')
-      await user.click(rollbackButton)
-      
-      expect(screen.getByText('Rollback Operation')).toBeInTheDocument()
-      expect(screen.getByText('This will undo the move operation')).toBeInTheDocument()
-    })
-
-    it('handles rollback confirmation', async () => {
-      const user = userEvent.setup()
-      render(<DragDropManager showHistory />)
-      
-      const rollbackButton = screen.getByText('Rollback')
-      await user.click(rollbackButton)
-      
-      const confirmButton = screen.getByText('Confirm Rollback')
-      await user.click(confirmButton)
-      
-      expect(mockActions.rollbackMoveOperation).toHaveBeenCalledWith('op-1')
-    })
-
-    it('clears operation history', async () => {
-      const user = userEvent.setup()
-      render(<DragDropManager showHistory />)
-      
-      const clearButton = screen.getByText('Clear History')
-      await user.click(clearButton)
-      
-      expect(mockActions.clearMoveHistory).toHaveBeenCalled()
-    })
-  })
-
-  describe('Validation', () => {
-    it('validates move operations before execution', async () => {
-      const mockDropResult = {
-        draggableId: 'conv-1',
-        type: 'conversation',
-        source: { droppableId: 'folder-1', index: 0 },
-        destination: { droppableId: 'folder-2', index: 0 },
-        reason: 'DROP',
-      }
-
-      render(<DragDropManager />)
-      
-      const dragContext = screen.getByTestId('drag-drop-context')
-      fireEvent.drop(dragContext, mockDropResult)
-      
-      expect(mockActions.validateMoveOperation).toHaveBeenCalledWith({
-        sourceId: 'folder-1',
-        targetId: 'folder-2',
-        itemIds: ['conv-1'],
-        itemType: 'conversation',
-      })
-    })
-
-    it('shows validation results', () => {
-      ;(useMoveOperations as any).mockReturnValue({
-        ...mockMoveOperations,
-        validationResults: {
-          isValid: false,
-          errors: ['Target folder is read-only'],
-          warnings: ['Some files may be overwritten'],
-          estimatedDuration: 30000,
-          estimatedSize: 1024 * 1024 * 5,
-        },
-      })
-
-      render(<DragDropManager />)
-      
-      expect(screen.getByText('Validation Results')).toBeInTheDocument()
-      expect(screen.getByText('Target folder is read-only')).toBeInTheDocument()
-      expect(screen.getByText('Some files may be overwritten')).toBeInTheDocument()
-      expect(screen.getByText('Estimated time: 30s')).toBeInTheDocument()
-      expect(screen.getByText('Estimated size: 5 MB')).toBeInTheDocument()
-    })
-
-    it('prevents invalid operations', () => {
-      ;(useMoveOperations as any).mockReturnValue({
-        ...mockMoveOperations,
-        validationResults: {
-          isValid: false,
-          errors: ['Target folder is read-only'],
-          warnings: [],
-          estimatedDuration: 0,
-          estimatedSize: 0,
-        },
-      })
-
-      render(<DragDropManager />)
-      
-      expect(screen.getByText('Cannot proceed with move operation')).toBeInTheDocument()
-      expect(screen.queryByText('Proceed')).not.toBeInTheDocument()
-    })
-  })
-
-  describe('Performance', () => {
-    it('handles large move operations efficiently', () => {
-      const largeMoveOperation = {
-        ...mockMoveOperations.activeOperation,
-        itemIds: Array.from({ length: 10000 }, (_, i) => `conv-${i}`),
-        metadata: {
-          totalItems: 10000,
-          processedItems: 5000,
-          estimatedDuration: 300000,
-        },
-      }
-
-      ;(useMoveOperations as any).mockReturnValue({
-        ...mockMoveOperations,
-        activeOperation: largeMoveOperation,
-        progress: {
-          current: 5000,
-          total: 10000,
-          percentage: 50,
-          isActive: true,
-          estimatedTimeRemaining: 150000,
-        },
-      })
-
-      const startTime = performance.now()
-      render(<DragDropManager />)
-      const endTime = performance.now()
-      
-      expect(endTime - startTime).toBeLessThan(100)
-      expect(screen.getByText('Moving 10,000 conversations')).toBeInTheDocument()
-    })
-
-    it('debounces frequent updates', async () => {
-      const { rerender } = render(<DragDropManager />)
-      
-      // Simulate rapid progress updates
-      for (let i = 0; i < 100; i++) {
-        ;(useMoveOperations as any).mockReturnValue({
-          ...mockMoveOperations,
-          progress: {
-            current: i,
-            total: 100,
-            percentage: i,
-            isActive: true,
-            estimatedTimeRemaining: (100 - i) * 1000,
-          },
-        })
-        
-        rerender(<DragDropManager />)
-      }
-      
-      // Should handle updates without performance issues
-      expect(screen.getByText('99%')).toBeInTheDocument()
-    })
-  })
-
-  describe('Accessibility', () => {
-    it('has proper ARIA labels', () => {
-      render(<DragDropManager />)
-      
-      expect(screen.getByRole('region', { name: /drag and drop/i })).toBeInTheDocument()
-    })
-
-    it('provides keyboard navigation support', async () => {
-      const user = userEvent.setup()
-      render(<DragDropManager showHistory />)
-      
-      await user.keyboard('{Tab}')
-      expect(screen.getByText('Clear History')).toHaveFocus()
-    })
-
-    it('announces operation status to screen readers', () => {
-      ;(useMoveOperations as any).mockReturnValue({
-        ...mockMoveOperations,
-        activeOperation: {
-          id: 'op-1',
-          type: 'move',
-          sourceId: 'folder-1',
-          targetId: 'folder-2',
-          itemIds: ['conv-1'],
-          itemType: 'conversation',
-          status: 'in_progress',
-          startedAt: '2025-07-01T10:00:00Z',
-          metadata: { totalItems: 1, processedItems: 0 },
-        },
-      })
-
-      render(<DragDropManager />)
-      
-      expect(screen.getByText('Move operation in progress')).toHaveAttribute('aria-live', 'polite')
-    })
-
-    it('provides clear conflict resolution instructions', () => {
-      ;(useMoveOperations as any).mockReturnValue({
-        ...mockMoveOperations,
-        conflicts: [
-          {
-            id: 'conflict-1',
-            type: 'name_collision',
-            itemId: 'conv-1',
-            itemName: 'test.txt',
-            conflictType: 'file_exists',
-            severity: 'warning',
-            suggestions: ['rename', 'replace'],
-            metadata: {},
-          },
-        ],
-      })
-
-      render(<DragDropManager />)
-      
-      expect(screen.getByText('Choose how to resolve this conflict')).toBeInTheDocument()
-      expect(screen.getByRole('radiogroup')).toBeInTheDocument()
-    })
-  })
-
-  describe('Error Handling', () => {
-    it('handles move operation errors gracefully', () => {
-      ;(useMoveOperations as any).mockReturnValue({
-        ...mockMoveOperations,
-        activeOperation: {
-          id: 'op-1',
-          type: 'move',
-          status: 'failed',
-          error: 'Network connection lost',
-          itemIds: ['conv-1'],
-          metadata: {},
-        },
-      })
-
-      render(<DragDropManager />)
-      
-      expect(screen.getByText('Operation Failed')).toBeInTheDocument()
-      expect(screen.getByText('Network connection lost')).toBeInTheDocument()
-      expect(screen.getByText('Retry')).toBeInTheDocument()
-    })
-
-    it('provides recovery options for failed operations', async () => {
-      ;(useMoveOperations as any).mockReturnValue({
-        ...mockMoveOperations,
-        activeOperation: {
-          id: 'op-1',
-          type: 'move',
-          status: 'failed',
-          error: 'Insufficient disk space',
-          itemIds: ['conv-1', 'conv-2'],
-          metadata: { processedItems: 1 },
-        },
-      })
-
-      const user = userEvent.setup()
-      render(<DragDropManager />)
-      
-      expect(screen.getByText('Resume from where it left off')).toBeInTheDocument()
-      expect(screen.getByText('Retry all items')).toBeInTheDocument()
-      
-      const resumeButton = screen.getByText('Resume')
-      await user.click(resumeButton)
-      
-      expect(mockActions.moveConversations).toHaveBeenCalledWith({
-        itemIds: ['conv-2'], // Only remaining items
-        sourceId: expect.any(String),
-        targetId: expect.any(String),
-        resumeFromFailure: true,
-      })
-    })
-
-    it('handles network disconnection during operations', () => {
-      ;(useMoveOperations as any).mockReturnValue({
-        ...mockMoveOperations,
-        activeOperation: {
-          id: 'op-1',
-          type: 'move',
-          status: 'paused',
-          error: 'Network disconnected',
-          itemIds: ['conv-1'],
-          metadata: { canResume: true },
-        },
-      })
-
-      render(<DragDropManager />)
-      
-      expect(screen.getByText('Operation Paused')).toBeInTheDocument()
-      expect(screen.getByText('Network disconnected')).toBeInTheDocument()
-      expect(screen.getByText('Resume when connection is restored')).toBeInTheDocument()
-    })
-  })
-})
\ No newline at end of file
diff --git a/frontend/components/feedme/__tests__/EditConversationModal.test.tsx b/frontend/components/feedme/__tests__/EditConversationModal.test.tsx
deleted file mode 100644
index 98daaf0..0000000
--- a/frontend/components/feedme/__tests__/EditConversationModal.test.tsx
+++ /dev/null
@@ -1,296 +0,0 @@
-/**
- * FeedMe v2.0 Phase 3: Edit & Version UI - Frontend Tests
- */
-
-import React from 'react'
-import { render, screen, waitFor } from '@testing-library/react'
-import userEvent from '@testing-library/user-event'
-import { vi, type Mock } from 'vitest'
-import { EditConversationModal } from '../EditConversationModal'
-import { VersionHistoryPanel } from '../VersionHistoryPanel'
-import { DiffViewer } from '../DiffViewer'
-import * as feedmeApi from '../../../lib/feedme-api'
-import {
-  type UploadTranscriptResponse,
-  type ConversationVersion,
-  type VersionDiff,
-} from '../../../lib/feedme-api'
-
-// Mock the API module and provide type-safe mocks
-// Mock ResizeObserver for Radix UI components
-const ResizeObserverMock = vi.fn(() => ({
-  observe: vi.fn(),
-  unobserve: vi.fn(),
-  disconnect: vi.fn(),
-}));
-vi.stubGlobal('ResizeObserver', ResizeObserverMock);
-
-vi.mock('../../../lib/feedme-api')
-const mockEditConversation = feedmeApi.editConversation as Mock
-const mockGetConversationVersions = feedmeApi.getConversationVersions as Mock
-const mockGetVersionDiff = feedmeApi.getVersionDiff as Mock
-const mockRevertConversation = feedmeApi.revertConversation as Mock
-
-// Mock Data
-const mockConversation: UploadTranscriptResponse = {
-  id: 1,
-  title: 'Customer Issue #123',
-  processing_status: 'completed',
-  total_examples: 10,
-  created_at: '2025-01-01T11:00:00Z',
-  metadata: {
-    raw_transcript: 'Customer: I need help\nSupport: How can I assist you?',
-    version: 2,
-    updated_by: 'editor@example.com',
-    updated_at: '2025-01-01T12:00:00Z',
-  },
-}
-
-const mockVersions: ConversationVersion[] = [
-  {
-    id: 2, conversation_id: 1, version: 2, is_active: true, title: 'Customer Issue #123',
-    raw_transcript: 'Customer: I need help\nSupport: How can I assist you?',
-    metadata: {}, updated_by: 'editor@example.com', created_at: '2025-01-01T12:00:00Z', updated_at: '2025-01-01T12:00:00Z',
-  },
-  {
-    id: 1, conversation_id: 1, version: 1, is_active: false, title: 'Customer Issue #123',
-    raw_transcript: 'Customer: I need help\nSupport: I am here to assist.',
-    metadata: {}, updated_by: 'agent@example.com', created_at: '2025-01-01T11:00:00Z', updated_at: '2025-01-01T11:00:00Z',
-  },
-]
-
-const mockDiff: VersionDiff = {
-  from_version: 1, to_version: 2,
-  added_lines: ['Support: How can I assist you?'],
-  removed_lines: ['Support: I am here to assist.'],
-  modified_lines: [], unchanged_lines: ['Customer: I need help'],
-  stats: { added_count: 1, removed_count: 1, modified_count: 0, unchanged_count: 1, total_changes: 2 },
-}
-
-beforeEach(() => {
-  vi.spyOn(window, 'confirm').mockImplementation(() => true);
-  vi.clearAllMocks();
-  mockGetConversationVersions.mockResolvedValue({
-    versions: mockVersions, total_count: 2, active_version: 2,
-  });
-});
-
-describe('EditConversationModal', () => {
-
-  it('should render edit modal with conversation content', async () => {
-    render(
-      <EditConversationModal
-        isOpen={true}
-        onClose={vi.fn()}
-        conversation={mockConversation}
-      />
-    )
-
-    // Wait for async version history to load to prevent `act` warnings
-    await waitFor(() => {
-      expect(mockGetConversationVersions).toHaveBeenCalled()
-    })
-
-    expect(screen.getByText(/edit conversation/i)).toBeInTheDocument()
-    expect(screen.getByDisplayValue(mockConversation.title)).toBeInTheDocument()
-    // The full transcript might be in a complex structure, check for a snippet
-    expect(screen.getByText(/Customer: I need help/)).toBeInTheDocument()
-  })
-
-  it('should allow editing title and transcript', async () => {
-    const user = userEvent.setup()
-    render(
-      <EditConversationModal
-        isOpen={true}
-        onClose={vi.fn()}
-        conversation={mockConversation}
-      />
-    )
-
-    const titleInput = screen.getByDisplayValue(mockConversation.title)
-    await user.clear(titleInput)
-    await user.type(titleInput, 'New Title')
-    expect(titleInput).toHaveValue('New Title')
-    
-    const editor = screen.getAllByRole('textbox')[1] // 0=title, 1=transcript editor
-    await user.clear(editor)
-    await user.type(editor, 'New transcript content')
-    expect(editor).toHaveTextContent('New transcript content')
-  })
-
-  it('should save changes and call the update handler', async () => {
-    const user = userEvent.setup()
-    const updatedConversation = { ...mockConversation, title: 'Updated Title' }
-    mockEditConversation.mockResolvedValue({
-      conversation: updatedConversation,
-      new_version: 3,
-      reprocessing: false,
-    })
-
-    const onClose = vi.fn()
-    const onConversationUpdated = vi.fn()
-
-    render(
-      <EditConversationModal
-        isOpen={true}
-        onClose={onClose}
-        conversation={mockConversation}
-        onConversationUpdated={onConversationUpdated}
-      />
-    )
-
-    const titleInput = screen.getByDisplayValue(mockConversation.title)
-    await user.clear(titleInput)
-    await user.type(titleInput, 'Updated Title')
-
-    const saveButton = screen.getByRole('button', { name: /save changes/i })
-    await user.click(saveButton)
-
-    await waitFor(() => {
-      expect(mockEditConversation).toHaveBeenCalledWith(mockConversation.id, {
-        title: 'Updated Title',
-        raw_transcript: mockConversation.metadata.raw_transcript,
-        reprocess: true, // default
-        updated_by: expect.any(String),
-      })
-    })
-
-    expect(onConversationUpdated).toHaveBeenCalledWith(updatedConversation)
-  })
-
-  it('should display an API error message if saving fails', async () => {
-    const user = userEvent.setup()
-    const errorMessage = 'Network Error'
-    mockEditConversation.mockRejectedValue(new Error(errorMessage))
-
-    render(
-      <EditConversationModal
-        isOpen={true}
-        onClose={vi.fn()}
-        conversation={mockConversation}
-      />
-    )
-
-    const titleInput = screen.getByDisplayValue(mockConversation.title)
-    await user.type(titleInput, ' - Updated')
-
-    const saveButton = screen.getByRole('button', { name: /save changes/i })
-    await user.click(saveButton)
-
-    await waitFor(() => {
-      expect(screen.getByText(`Failed to save changes: ${errorMessage}`)).toBeInTheDocument()
-    })
-  })
-
-  it('should validate required fields', async () => {
-    const user = userEvent.setup()
-    render(
-      <EditConversationModal
-        isOpen={true}
-        onClose={vi.fn()}
-        conversation={mockConversation}
-      />
-    )
-
-    const titleInput = screen.getByDisplayValue(mockConversation.title)
-    await user.clear(titleInput)
-
-    const saveButton = screen.getByRole('button', { name: /save changes/i })
-    await user.click(saveButton)
-
-    expect(await screen.findByText(/title is required/i)).toBeInTheDocument()
-    expect(mockEditConversation).not.toHaveBeenCalled()
-  })
-
-  it('should show loading state during save', async () => {
-    const user = userEvent.setup()
-    mockEditConversation.mockImplementation(
-      () => new Promise(resolve => setTimeout(resolve, 100)),
-    )
-
-    render(
-      <EditConversationModal
-        isOpen={true}
-        onClose={vi.fn()}
-        conversation={mockConversation}
-      />,
-    )
-
-    const titleInput = screen.getByDisplayValue(mockConversation.title)
-    await user.type(titleInput, ' - Updated')
-
-    const saveButton = screen.getByRole('button', { name: /save changes/i })
-    await user.click(saveButton)
-
-    await waitFor(() => {
-      expect(screen.getByRole('button', { name: /saving/i })).toBeInTheDocument()
-    })
-
-    expect(screen.getByRole('button', { name: /saving/i })).toBeDisabled()
-  })
-})
-
-describe('VersionHistoryPanel', () => {
-    it('should display version list and handle interactions', async () => {
-    
-    const user = userEvent.setup()
-    const onSelectVersion = vi.fn()
-    const onRevertVersion = vi.fn()
-    const onRefresh = vi.fn()
-
-    render(
-      <VersionHistoryPanel
-        conversationId={1}
-        versions={mockVersions}
-        isLoading={false}
-        onSelectVersion={onSelectVersion}
-        onRevertVersion={onRevertVersion}
-        onRefresh={onRefresh}
-      />
-    )
-
-    expect(screen.getByText('Version 2')).toBeInTheDocument()
-    expect(screen.getByText('Version 1')).toBeInTheDocument()
-    expect(screen.getByText('editor@example.com')).toBeInTheDocument()
-    expect(screen.getByText('Current')).toBeInTheDocument()
-
-    // Click on version 1 to select for diff
-    const compareButtons = screen.getAllByRole('button', { name: /compare/i })
-    await user.click(compareButtons[1]) // Version 1 is the second in the list
-    expect(onSelectVersion).toHaveBeenCalledWith(1)
-
-    // Click revert on version 1
-    // Click the initial revert button
-    const revertButton = screen.getByRole('button', { name: /revert to version 1/i })
-    await user.click(revertButton)
-
-    // Click the confirmation button that appears
-    const confirmRevertButton = screen.getByRole('button', { name: /confirm revert/i })
-    await user.click(confirmRevertButton)
-
-    expect(onRevertVersion).toHaveBeenCalledWith(1)
-  })
-})
-
-describe('DiffViewer', () => {
-  it('should fetch and display diff between versions', async () => {
-    mockGetVersionDiff.mockResolvedValue(mockDiff)
-
-    render(
-      <DiffViewer
-        conversationId={1}
-        fromVersion={1}
-        toVersion={2}
-        onClose={vi.fn()}
-      />
-    )
-
-    await waitFor(() => {
-      expect(mockGetVersionDiff).toHaveBeenCalledWith(1, 1, 2)
-    })
-
-    expect(screen.getByRole('heading', { name: /changes from version 1 to version 2/i })).toBeInTheDocument()
-    expect(screen.getByText('Support: How can I assist you?')).toBeInTheDocument()
-    expect(screen.getByText('Support: I am here to assist.')).toBeInTheDocument()
-  })
-})
\ No newline at end of file
diff --git a/frontend/components/feedme/__tests__/FileGridView.test.tsx b/frontend/components/feedme/__tests__/FileGridView.test.tsx
deleted file mode 100644
index 0c5a1f2..0000000
--- a/frontend/components/feedme/__tests__/FileGridView.test.tsx
+++ /dev/null
@@ -1,828 +0,0 @@
-/**
- * FileGridView Component Tests
- * 
- * Comprehensive test suite for the FileGridView component with 95%+ coverage.
- * Tests grid layout, multi-select, bulk operations, virtual scrolling, and file management.
- */
-
-import React from 'react'
-import { render, screen, fireEvent, waitFor, act } from '@testing-library/react'
-import userEvent from '@testing-library/user-event'
-import { vi, describe, it, expect, beforeEach, afterEach } from 'vitest'
-import { FileGridView } from '../FileGridView'
-import { useConversations, useActions, useFolders } from '@/lib/stores/feedme-store'
-
-// Mock the store
-vi.mock('@/lib/stores/feedme-store', () => ({
-  useConversations: vi.fn(),
-  useActions: vi.fn(),
-  useFolders: vi.fn(),
-}))
-
-// Mock react-window for virtual scrolling
-vi.mock('react-window', () => ({
-  VariableSizeGrid: ({ children, columnCount, rowCount, height, width }: any) => (
-    <div data-testid="virtual-grid" style={{ height, width }}>
-      {Array.from({ length: rowCount }, (_, rowIndex) =>
-        Array.from({ length: columnCount }, (_, columnIndex) => (
-          <div key={`${rowIndex}-${columnIndex}`}>
-            {children({ rowIndex, columnIndex, style: {} })}
-          </div>
-        ))
-      )}
-    </div>
-  ),
-}))
-
-// Mock react-window-infinite-loader
-vi.mock('react-window-infinite-loader', () => ({
-  InfiniteLoader: ({ children, hasNextPage, loadMoreItems }: any) => (
-    <div data-testid="infinite-loader">
-      {children({ onItemsRendered: vi.fn(), ref: vi.fn() })}
-    </div>
-  ),
-}))
-
-// Mock lucide-react icons
-vi.mock('lucide-react', () => ({
-  Grid: () => <div data-testid="grid-icon" />,
-  List: () => <div data-testid="list-icon" />,
-  Search: () => <div data-testid="search-icon" />,
-  Filter: () => <div data-testid="filter-icon" />,
-  MoreHorizontal: () => <div data-testid="more-horizontal" />,
-  FileText: () => <div data-testid="file-text-icon" />,
-  Download: () => <div data-testid="download-icon" />,
-  Trash2: () => <div data-testid="trash-icon" />,
-  Edit: () => <div data-testid="edit-icon" />,
-  Copy: () => <div data-testid="copy-icon" />,
-  Move: () => <div data-testid="move-icon" />,
-  Eye: () => <div data-testid="eye-icon" />,
-  Star: () => <div data-testid="star-icon" />,
-  Clock: () => <div data-testid="clock-icon" />,
-  User: () => <div data-testid="user-icon" />,
-  Calendar: () => <div data-testid="calendar-icon" />,
-  CheckCircle2: () => <div data-testid="check-circle-icon" />,
-  XCircle: () => <div data-testid="x-circle-icon" />,
-  AlertCircle: () => <div data-testid="alert-circle-icon" />,
-  Loader: () => <div data-testid="loader-icon" />,
-}))
-
-// Mock data
-const mockConversations = [
-  {
-    id: 'conv-1',
-    title: 'Customer Support Chat 1',
-    originalFilename: 'support-chat-1.txt',
-    folderId: 'folder-1',
-    processingStatus: 'completed' as const,
-    totalExamples: 15,
-    uploadedAt: '2025-07-01T10:00:00Z',
-    processedAt: '2025-07-01T10:15:00Z',
-    uploadedBy: 'user-1',
-    metadata: {
-      fileSize: 1024 * 50,
-      encoding: 'utf-8',
-      lineCount: 100,
-      platform: 'web',
-      tags: ['support', 'urgent'],
-    },
-    rawTranscript: 'Sample transcript content...',
-    parsedContent: { messages: [] },
-    errorMessage: null,
-    createdAt: '2025-07-01T10:00:00Z',
-    updatedAt: '2025-07-01T10:15:00Z',
-  },
-  {
-    id: 'conv-2',
-    title: 'Email Sync Issue',
-    originalFilename: 'email-sync-help.txt',
-    folderId: 'folder-1',
-    processingStatus: 'processing' as const,
-    totalExamples: 0,
-    uploadedAt: '2025-07-01T11:00:00Z',
-    processedAt: null,
-    uploadedBy: 'user-1',
-    metadata: {
-      fileSize: 1024 * 75,
-      encoding: 'utf-8',
-      lineCount: 150,
-      platform: 'desktop',
-      tags: ['email', 'sync'],
-    },
-    rawTranscript: 'Email sync problem transcript...',
-    parsedContent: null,
-    errorMessage: null,
-    createdAt: '2025-07-01T11:00:00Z',
-    updatedAt: '2025-07-01T11:00:00Z',
-  },
-  {
-    id: 'conv-3',
-    title: 'Account Setup Help',
-    originalFilename: 'account-setup.txt',
-    folderId: 'folder-2',
-    processingStatus: 'failed' as const,
-    totalExamples: 0,
-    uploadedAt: '2025-07-01T12:00:00Z',
-    processedAt: null,
-    uploadedBy: 'user-2',
-    metadata: {
-      fileSize: 1024 * 25,
-      encoding: 'utf-8',
-      lineCount: 75,
-      platform: 'mobile',
-      tags: ['setup', 'account'],
-    },
-    rawTranscript: 'Account setup help transcript...',
-    parsedContent: null,
-    errorMessage: 'Invalid file format',
-    createdAt: '2025-07-01T12:00:00Z',
-    updatedAt: '2025-07-01T12:00:00Z',
-  },
-]
-
-const mockFolders = [
-  {
-    id: 'folder-1',
-    name: 'Support Chats',
-    parentId: null,
-    children: [],
-    conversationCount: 2,
-    totalSize: 1024 * 125,
-    createdAt: '2025-07-01T09:00:00Z',
-    updatedAt: '2025-07-01T11:00:00Z',
-  },
-  {
-    id: 'folder-2',
-    name: 'Setup Issues',
-    parentId: null,
-    children: [],
-    conversationCount: 1,
-    totalSize: 1024 * 25,
-    createdAt: '2025-07-01T09:00:00Z',
-    updatedAt: '2025-07-01T12:00:00Z',
-  },
-]
-
-const mockActions = {
-  loadConversations: vi.fn(),
-  deleteConversation: vi.fn(),
-  updateConversation: vi.fn(),
-  moveConversation: vi.fn(),
-  duplicateConversation: vi.fn(),
-  reprocessConversation: vi.fn(),
-  setSelectedConversations: vi.fn(),
-  setBulkOperationMode: vi.fn(),
-}
-
-describe('FileGridView', () => {
-  beforeEach(() => {
-    vi.clearAllMocks()
-    
-    // Setup store mocks
-    ;(useConversations as any).mockReturnValue({
-      conversations: mockConversations,
-      selectedConversations: new Set(),
-      bulkOperationMode: false,
-      isLoading: false,
-      error: null,
-      hasNextPage: false,
-      totalCount: mockConversations.length,
-    })
-    
-    ;(useFolders as any).mockReturnValue({
-      folders: mockFolders,
-      selectedFolder: 'folder-1',
-    })
-    
-    ;(useActions as any).mockReturnValue(mockActions)
-  })
-
-  afterEach(() => {
-    vi.clearAllMocks()
-  })
-
-  describe('Rendering', () => {
-    it('renders file grid with correct structure', () => {
-      render(<FileGridView />)
-      
-      expect(screen.getByTestId('virtual-grid')).toBeInTheDocument()
-      expect(screen.getByText('Customer Support Chat 1')).toBeInTheDocument()
-      expect(screen.getByText('Email Sync Issue')).toBeInTheDocument()
-    })
-
-    it('displays file cards with correct information', () => {
-      render(<FileGridView />)
-      
-      // Check first conversation card
-      expect(screen.getByText('Customer Support Chat 1')).toBeInTheDocument()
-      expect(screen.getByText('support-chat-1.txt')).toBeInTheDocument()
-      expect(screen.getByText('15 examples')).toBeInTheDocument()
-      expect(screen.getByText('50 KB')).toBeInTheDocument()
-    })
-
-    it('shows processing status indicators', () => {
-      render(<FileGridView />)
-      
-      expect(screen.getByTestId('check-circle-icon')).toBeInTheDocument() // Completed
-      expect(screen.getByTestId('loader-icon')).toBeInTheDocument() // Processing
-      expect(screen.getByTestId('x-circle-icon')).toBeInTheDocument() // Failed
-    })
-
-    it('displays file thumbnails and metadata', () => {
-      render(<FileGridView />)
-      
-      expect(screen.getAllByTestId('file-text-icon')).toHaveLength(3)
-      expect(screen.getByText('100 lines')).toBeInTheDocument()
-      expect(screen.getByText('150 lines')).toBeInTheDocument()
-      expect(screen.getByText('75 lines')).toBeInTheDocument()
-    })
-
-    it('handles loading state', () => {
-      ;(useConversations as any).mockReturnValue({
-        conversations: [],
-        selectedConversations: new Set(),
-        bulkOperationMode: false,
-        isLoading: true,
-        error: null,
-        hasNextPage: false,
-        totalCount: 0,
-      })
-
-      render(<FileGridView />)
-      
-      expect(screen.getByText('Loading conversations...')).toBeInTheDocument()
-    })
-
-    it('handles error state', () => {
-      ;(useConversations as any).mockReturnValue({
-        conversations: [],
-        selectedConversations: new Set(),
-        bulkOperationMode: false,
-        isLoading: false,
-        error: 'Failed to load conversations',
-        hasNextPage: false,
-        totalCount: 0,
-      })
-
-      render(<FileGridView />)
-      
-      expect(screen.getByText('Error: Failed to load conversations')).toBeInTheDocument()
-    })
-
-    it('handles empty state', () => {
-      ;(useConversations as any).mockReturnValue({
-        conversations: [],
-        selectedConversations: new Set(),
-        bulkOperationMode: false,
-        isLoading: false,
-        error: null,
-        hasNextPage: false,
-        totalCount: 0,
-      })
-
-      render(<FileGridView />)
-      
-      expect(screen.getByText('No conversations found')).toBeInTheDocument()
-      expect(screen.getByText('Upload your first conversation to get started')).toBeInTheDocument()
-    })
-  })
-
-  describe('View Options', () => {
-    it('toggles between grid and list view', async () => {
-      const user = userEvent.setup()
-      render(<FileGridView />)
-      
-      const listViewButton = screen.getByTestId('list-icon').closest('button')
-      await user.click(listViewButton!)
-      
-      // Should change to list view
-      expect(screen.getByTestId('list-icon').closest('button')).toHaveClass('bg-accent')
-    })
-
-    it('adjusts grid size with slider', async () => {
-      const user = userEvent.setup()
-      render(<FileGridView />)
-      
-      const sizeSlider = screen.getByRole('slider')
-      await user.click(sizeSlider)
-      
-      // Should trigger grid size change
-      expect(sizeSlider).toBeInTheDocument()
-    })
-
-    it('supports different sort options', async () => {
-      const user = userEvent.setup()
-      render(<FileGridView />)
-      
-      const sortSelect = screen.getByText('Sort by')
-      await user.click(sortSelect)
-      
-      expect(screen.getByText('Name')).toBeInTheDocument()
-      expect(screen.getByText('Date')).toBeInTheDocument()
-      expect(screen.getByText('Size')).toBeInTheDocument()
-      expect(screen.getByText('Status')).toBeInTheDocument()
-    })
-  })
-
-  describe('File Selection', () => {
-    it('handles single file selection', async () => {
-      const user = userEvent.setup()
-      render(<FileGridView />)
-      
-      const fileCard = screen.getByText('Customer Support Chat 1').closest('div')
-      await user.click(fileCard!)
-      
-      expect(mockActions.setSelectedConversations).toHaveBeenCalledWith(new Set(['conv-1']))
-    })
-
-    it('handles multi-select with Ctrl/Cmd key', async () => {
-      const user = userEvent.setup()
-      render(<FileGridView />)
-      
-      const firstCard = screen.getByText('Customer Support Chat 1').closest('div')
-      const secondCard = screen.getByText('Email Sync Issue').closest('div')
-      
-      await user.click(firstCard!)
-      await user.keyboard('{Control>}')
-      await user.click(secondCard!)
-      await user.keyboard('{/Control}')
-      
-      expect(mockActions.setSelectedConversations).toHaveBeenCalledWith(new Set(['conv-1', 'conv-2']))
-    })
-
-    it('handles range selection with Shift key', async () => {
-      const user = userEvent.setup()
-      render(<FileGridView />)
-      
-      const firstCard = screen.getByText('Customer Support Chat 1').closest('div')
-      const thirdCard = screen.getByText('Account Setup Help').closest('div')
-      
-      await user.click(firstCard!)
-      await user.keyboard('{Shift>}')
-      await user.click(thirdCard!)
-      await user.keyboard('{/Shift}')
-      
-      expect(mockActions.setSelectedConversations).toHaveBeenCalledWith(new Set(['conv-1', 'conv-2', 'conv-3']))
-    })
-
-    it('shows selection count', () => {
-      ;(useConversations as any).mockReturnValue({
-        conversations: mockConversations,
-        selectedConversations: new Set(['conv-1', 'conv-2']),
-        bulkOperationMode: true,
-        isLoading: false,
-        error: null,
-        hasNextPage: false,
-        totalCount: mockConversations.length,
-      })
-
-      render(<FileGridView />)
-      
-      expect(screen.getByText('2 selected')).toBeInTheDocument()
-    })
-
-    it('supports select all functionality', async () => {
-      const user = userEvent.setup()
-      render(<FileGridView />)
-      
-      const selectAllCheckbox = screen.getByRole('checkbox', { name: /select all/i })
-      await user.click(selectAllCheckbox)
-      
-      expect(mockActions.setSelectedConversations).toHaveBeenCalledWith(
-        new Set(['conv-1', 'conv-2', 'conv-3'])
-      )
-    })
-  })
-
-  describe('Bulk Operations', () => {
-    beforeEach(() => {
-      ;(useConversations as any).mockReturnValue({
-        conversations: mockConversations,
-        selectedConversations: new Set(['conv-1', 'conv-2']),
-        bulkOperationMode: true,
-        isLoading: false,
-        error: null,
-        hasNextPage: false,
-        totalCount: mockConversations.length,
-      })
-    })
-
-    it('shows bulk operations panel when files are selected', () => {
-      render(<FileGridView />)
-      
-      expect(screen.getByText('Bulk Operations')).toBeInTheDocument()
-      expect(screen.getByText('Delete Selected')).toBeInTheDocument()
-      expect(screen.getByText('Move to Folder')).toBeInTheDocument()
-      expect(screen.getByText('Download Selected')).toBeInTheDocument()
-    })
-
-    it('handles bulk delete operation', async () => {
-      const user = userEvent.setup()
-      render(<FileGridView />)
-      
-      const deleteButton = screen.getByText('Delete Selected')
-      await user.click(deleteButton)
-      
-      // Should show confirmation dialog
-      expect(screen.getByText('Delete 2 conversations?')).toBeInTheDocument()
-      
-      const confirmButton = screen.getByText('Delete')
-      await user.click(confirmButton)
-      
-      expect(mockActions.deleteConversation).toHaveBeenCalledTimes(2)
-    })
-
-    it('handles bulk move operation', async () => {
-      const user = userEvent.setup()
-      render(<FileGridView />)
-      
-      const moveButton = screen.getByText('Move to Folder')
-      await user.click(moveButton)
-      
-      // Should show folder selection dialog
-      expect(screen.getByText('Select destination folder')).toBeInTheDocument()
-      
-      const folderOption = screen.getByText('Setup Issues')
-      await user.click(folderOption)
-      
-      const confirmButton = screen.getByText('Move')
-      await user.click(confirmButton)
-      
-      expect(mockActions.moveConversation).toHaveBeenCalledTimes(2)
-    })
-
-    it('handles bulk download operation', async () => {
-      const user = userEvent.setup()
-      render(<FileGridView />)
-      
-      // Mock URL.createObjectURL
-      global.URL.createObjectURL = vi.fn(() => 'blob:test')
-      global.URL.revokeObjectURL = vi.fn()
-      
-      const downloadButton = screen.getByText('Download Selected')
-      await user.click(downloadButton)
-      
-      expect(global.URL.createObjectURL).toHaveBeenCalled()
-    })
-
-    it('handles bulk reprocess operation', async () => {
-      const user = userEvent.setup()
-      render(<FileGridView />)
-      
-      const reprocessButton = screen.getByText('Reprocess Selected')
-      await user.click(reprocessButton)
-      
-      expect(mockActions.reprocessConversation).toHaveBeenCalledTimes(2)
-    })
-  })
-
-  describe('Context Menu', () => {
-    it('opens context menu on right click', async () => {
-      const user = userEvent.setup()
-      render(<FileGridView />)
-      
-      const fileCard = screen.getByText('Customer Support Chat 1')
-      await user.pointer({ keys: '[MouseRight]', target: fileCard })
-      
-      expect(screen.getByText('View Details')).toBeInTheDocument()
-      expect(screen.getByText('Edit')).toBeInTheDocument()
-      expect(screen.getByText('Download')).toBeInTheDocument()
-      expect(screen.getByText('Move')).toBeInTheDocument()
-      expect(screen.getByText('Duplicate')).toBeInTheDocument()
-      expect(screen.getByText('Delete')).toBeInTheDocument()
-    })
-
-    it('handles view details action', async () => {
-      const user = userEvent.setup()
-      render(<FileGridView />)
-      
-      const fileCard = screen.getByText('Customer Support Chat 1')
-      await user.pointer({ keys: '[MouseRight]', target: fileCard })
-      
-      const viewAction = screen.getByText('View Details')
-      await user.click(viewAction)
-      
-      expect(screen.getByText('Conversation Details')).toBeInTheDocument()
-    })
-
-    it('handles edit action', async () => {
-      const user = userEvent.setup()
-      render(<FileGridView />)
-      
-      const fileCard = screen.getByText('Customer Support Chat 1')
-      await user.pointer({ keys: '[MouseRight]', target: fileCard })
-      
-      const editAction = screen.getByText('Edit')
-      await user.click(editAction)
-      
-      expect(screen.getByDisplayValue('Customer Support Chat 1')).toBeInTheDocument()
-    })
-
-    it('handles duplicate action', async () => {
-      const user = userEvent.setup()
-      render(<FileGridView />)
-      
-      const fileCard = screen.getByText('Customer Support Chat 1')
-      await user.pointer({ keys: '[MouseRight]', target: fileCard })
-      
-      const duplicateAction = screen.getByText('Duplicate')
-      await user.click(duplicateAction)
-      
-      expect(mockActions.duplicateConversation).toHaveBeenCalledWith('conv-1')
-    })
-  })
-
-  describe('Search and Filter', () => {
-    it('filters files by search term', async () => {
-      const user = userEvent.setup()
-      render(<FileGridView />)
-      
-      const searchInput = screen.getByPlaceholderText('Search conversations...')
-      await user.type(searchInput, 'email')
-      
-      // Should filter to show only email-related conversation
-      await waitFor(() => {
-        expect(screen.getByText('Email Sync Issue')).toBeInTheDocument()
-        expect(screen.queryByText('Customer Support Chat 1')).not.toBeInTheDocument()
-      })
-    })
-
-    it('filters by processing status', async () => {
-      const user = userEvent.setup()
-      render(<FileGridView />)
-      
-      const statusFilter = screen.getByText('All Status')
-      await user.click(statusFilter)
-      
-      const completedFilter = screen.getByText('Completed')
-      await user.click(completedFilter)
-      
-      // Should show only completed conversations
-      await waitFor(() => {
-        expect(screen.getByText('Customer Support Chat 1')).toBeInTheDocument()
-        expect(screen.queryByText('Email Sync Issue')).not.toBeInTheDocument()
-      })
-    })
-
-    it('filters by tags', async () => {
-      const user = userEvent.setup()
-      render(<FileGridView />)
-      
-      const tagFilter = screen.getByText('support')
-      await user.click(tagFilter)
-      
-      // Should show only conversations with 'support' tag
-      await waitFor(() => {
-        expect(screen.getByText('Customer Support Chat 1')).toBeInTheDocument()
-        expect(screen.queryByText('Email Sync Issue')).not.toBeInTheDocument()
-      })
-    })
-
-    it('filters by date range', async () => {
-      const user = userEvent.setup()
-      render(<FileGridView />)
-      
-      const dateFilter = screen.getByText('Date Range')
-      await user.click(dateFilter)
-      
-      // Should show date picker
-      expect(screen.getByText('Select date range')).toBeInTheDocument()
-    })
-  })
-
-  describe('Virtual Scrolling', () => {
-    it('renders virtual grid component', () => {
-      render(<FileGridView />)
-      
-      expect(screen.getByTestId('virtual-grid')).toBeInTheDocument()
-      expect(screen.getByTestId('infinite-loader')).toBeInTheDocument()
-    })
-
-    it('handles infinite loading', async () => {
-      ;(useConversations as any).mockReturnValue({
-        conversations: mockConversations,
-        selectedConversations: new Set(),
-        bulkOperationMode: false,
-        isLoading: false,
-        error: null,
-        hasNextPage: true,
-        totalCount: 100,
-      })
-
-      render(<FileGridView />)
-      
-      // Should show infinite loader
-      expect(screen.getByTestId('infinite-loader')).toBeInTheDocument()
-      expect(mockActions.loadConversations).toHaveBeenCalled()
-    })
-
-    it('calculates correct grid dimensions', () => {
-      render(<FileGridView />)
-      
-      const virtualGrid = screen.getByTestId('virtual-grid')
-      expect(virtualGrid).toHaveStyle({ height: expect.any(String) })
-    })
-
-    it('handles grid resize on window resize', async () => {
-      render(<FileGridView />)
-      
-      // Simulate window resize
-      act(() => {
-        global.innerWidth = 1200
-        global.dispatchEvent(new Event('resize'))
-      })
-      
-      await waitFor(() => {
-        expect(screen.getByTestId('virtual-grid')).toBeInTheDocument()
-      })
-    })
-  })
-
-  describe('Performance', () => {
-    it('debounces search input', async () => {
-      const user = userEvent.setup()
-      render(<FileGridView />)
-      
-      const searchInput = screen.getByPlaceholderText('Search conversations...')
-      
-      // Type quickly
-      await user.type(searchInput, 'test', { delay: 10 })
-      
-      // Should debounce the search
-      await waitFor(() => {
-        expect(searchInput).toHaveValue('test')
-      }, { timeout: 600 })
-    })
-
-    it('memoizes expensive calculations', () => {
-      const { rerender } = render(<FileGridView />)
-      
-      // Re-render with same props
-      rerender(<FileGridView />)
-      
-      // Should not re-calculate grid layout
-      expect(screen.getByTestId('virtual-grid')).toBeInTheDocument()
-    })
-
-    it('virtualizes large datasets efficiently', () => {
-      const largeDataset = Array.from({ length: 10000 }, (_, i) => ({
-        ...mockConversations[0],
-        id: `conv-${i}`,
-        title: `Conversation ${i}`,
-      }))
-
-      ;(useConversations as any).mockReturnValue({
-        conversations: largeDataset,
-        selectedConversations: new Set(),
-        bulkOperationMode: false,
-        isLoading: false,
-        error: null,
-        hasNextPage: false,
-        totalCount: largeDataset.length,
-      })
-
-      const startTime = performance.now()
-      render(<FileGridView />)
-      const endTime = performance.now()
-      
-      // Should render quickly even with large dataset
-      expect(endTime - startTime).toBeLessThan(100)
-      expect(screen.getByTestId('virtual-grid')).toBeInTheDocument()
-    })
-  })
-
-  describe('Keyboard Navigation', () => {
-    it('handles arrow key navigation', async () => {
-      const user = userEvent.setup()
-      render(<FileGridView />)
-      
-      const firstCard = screen.getByText('Customer Support Chat 1').closest('div')
-      await user.click(firstCard!)
-      
-      // Navigate right
-      await user.keyboard('{ArrowRight}')
-      expect(mockActions.setSelectedConversations).toHaveBeenCalledWith(new Set(['conv-2']))
-      
-      // Navigate down
-      await user.keyboard('{ArrowDown}')
-      expect(mockActions.setSelectedConversations).toHaveBeenCalledWith(new Set(['conv-3']))
-    })
-
-    it('handles Enter key for file opening', async () => {
-      const user = userEvent.setup()
-      render(<FileGridView />)
-      
-      const fileCard = screen.getByText('Customer Support Chat 1').closest('div')
-      await user.click(fileCard!)
-      await user.keyboard('{Enter}')
-      
-      expect(screen.getByText('Conversation Details')).toBeInTheDocument()
-    })
-
-    it('handles Delete key for deletion', async () => {
-      const user = userEvent.setup()
-      render(<FileGridView />)
-      
-      const fileCard = screen.getByText('Customer Support Chat 1').closest('div')
-      await user.click(fileCard!)
-      await user.keyboard('{Delete}')
-      
-      expect(screen.getByText('Delete conversation?')).toBeInTheDocument()
-    })
-
-    it('handles Ctrl+A for select all', async () => {
-      const user = userEvent.setup()
-      render(<FileGridView />)
-      
-      await user.keyboard('{Control>}a{/Control}')
-      
-      expect(mockActions.setSelectedConversations).toHaveBeenCalledWith(
-        new Set(['conv-1', 'conv-2', 'conv-3'])
-      )
-    })
-  })
-
-  describe('Accessibility', () => {
-    it('has proper ARIA labels', () => {
-      render(<FileGridView />)
-      
-      expect(screen.getByRole('grid')).toBeInTheDocument()
-      expect(screen.getAllByRole('gridcell')).toHaveLength(3)
-    })
-
-    it('supports keyboard navigation', async () => {
-      const user = userEvent.setup()
-      render(<FileGridView />)
-      
-      const grid = screen.getByRole('grid')
-      grid.focus()
-      
-      await user.keyboard('{ArrowDown}')
-      expect(mockActions.setSelectedConversations).toHaveBeenCalled()
-    })
-
-    it('has proper focus management', async () => {
-      const user = userEvent.setup()
-      render(<FileGridView />)
-      
-      const firstCard = screen.getByText('Customer Support Chat 1').closest('div')
-      await user.click(firstCard!)
-      
-      expect(firstCard).toHaveFocus()
-    })
-
-    it('announces selection changes to screen readers', async () => {
-      const user = userEvent.setup()
-      render(<FileGridView />)
-      
-      const fileCard = screen.getByText('Customer Support Chat 1').closest('div')
-      await user.click(fileCard!)
-      
-      // Check for aria-live region updates
-      expect(screen.getByText('1 file selected')).toBeInTheDocument()
-    })
-  })
-
-  describe('Error Handling', () => {
-    it('handles network errors gracefully', async () => {
-      mockActions.deleteConversation.mockRejectedValue(new Error('Network error'))
-      
-      const user = userEvent.setup()
-      render(<FileGridView />)
-      
-      const fileCard = screen.getByText('Customer Support Chat 1')
-      await user.pointer({ keys: '[MouseRight]', target: fileCard })
-      
-      const deleteAction = screen.getByText('Delete')
-      await user.click(deleteAction)
-      
-      await waitFor(() => {
-        expect(screen.getByText('Failed to delete conversation')).toBeInTheDocument()
-      })
-    })
-
-    it('handles invalid file operations', async () => {
-      const user = userEvent.setup()
-      render(<FileGridView />)
-      
-      const fileCard = screen.getByText('Account Setup Help') // Failed status
-      await user.pointer({ keys: '[MouseRight]', target: fileCard })
-      
-      const reprocessAction = screen.getByText('Reprocess')
-      await user.click(reprocessAction)
-      
-      expect(mockActions.reprocessConversation).toHaveBeenCalledWith('conv-3')
-    })
-
-    it('prevents operations on processing files', async () => {
-      const user = userEvent.setup()
-      render(<FileGridView />)
-      
-      const processingCard = screen.getByText('Email Sync Issue')
-      await user.pointer({ keys: '[MouseRight]', target: processingCard })
-      
-      const editAction = screen.getByText('Edit')
-      expect(editAction).toBeDisabled()
-    })
-  })
-})
\ No newline at end of file
diff --git a/frontend/components/feedme/__tests__/FolderTreeView.test.tsx b/frontend/components/feedme/__tests__/FolderTreeView.test.tsx
deleted file mode 100644
index 3dea4d5..0000000
--- a/frontend/components/feedme/__tests__/FolderTreeView.test.tsx
+++ /dev/null
@@ -1,627 +0,0 @@
-/**
- * FolderTreeView Component Tests
- * 
- * Comprehensive test suite for the FolderTreeView component with 95%+ coverage.
- * Tests hierarchical folder structure, drag-and-drop, virtual scrolling, and context menus.
- */
-
-import React from 'react'
-import { render, screen, fireEvent, waitFor, act } from '@testing-library/react'
-import userEvent from '@testing-library/user-event'
-import { vi, describe, it, expect, beforeEach, afterEach } from 'vitest'
-import { DragDropContext } from '@hello-pangea/dnd'
-import { FolderTreeView } from '../FolderTreeView'
-import { useFolders, useActions } from '@/lib/stores/feedme-store'
-
-// Mock the store
-vi.mock('@/lib/stores/feedme-store', () => ({
-  useFolders: vi.fn(),
-  useActions: vi.fn(),
-  useUI: vi.fn(),
-  useConversations: vi.fn(),
-  useSearch: vi.fn(),
-  useRealtime: vi.fn(),
-  useAnalytics: vi.fn(),
-}))
-
-// Mock react-window for virtual scrolling
-vi.mock('react-window', () => ({
-  FixedSizeTree: ({ children, itemData, height, itemSize }: any) => (
-    <div data-testid="virtual-tree" style={{ height }}>
-      {itemData.map((item: any, index: number) => (
-        <div key={item.id} style={{ height: itemSize }}>
-          {children({ index, style: {}, data: itemData })}
-        </div>
-      ))}
-    </div>
-  ),
-}))
-
-// Mock lucide-react icons
-vi.mock('lucide-react', () => ({
-  ChevronRight: () => <div data-testid="chevron-right" />,
-  ChevronDown: () => <div data-testid="chevron-down" />,
-  Folder: () => <div data-testid="folder-icon" />,
-  FolderOpen: () => <div data-testid="folder-open-icon" />,
-  File: () => <div data-testid="file-icon" />,
-  MoreHorizontal: () => <div data-testid="more-horizontal" />,
-  Plus: () => <div data-testid="plus-icon" />,
-  Edit: () => <div data-testid="edit-icon" />,
-  Trash2: () => <div data-testid="trash-icon" />,
-  Copy: () => <div data-testid="copy-icon" />,
-  Move: () => <div data-testid="move-icon" />,
-}))
-
-// Mock data
-const mockFolders = [
-  {
-    id: 'folder-1',
-    name: 'Root Folder',
-    parentId: null,
-    children: ['folder-2', 'folder-3'],
-    conversationCount: 5,
-    totalSize: 1024 * 1024,
-    createdAt: '2025-07-01T10:00:00Z',
-    updatedAt: '2025-07-01T10:00:00Z',
-  },
-  {
-    id: 'folder-2',
-    name: 'Subfolder 1',
-    parentId: 'folder-1',
-    children: [],
-    conversationCount: 3,
-    totalSize: 512 * 1024,
-    createdAt: '2025-07-01T10:00:00Z',
-    updatedAt: '2025-07-01T10:00:00Z',
-  },
-  {
-    id: 'folder-3',
-    name: 'Subfolder 2',
-    parentId: 'folder-1',
-    children: ['folder-4'],
-    conversationCount: 2,
-    totalSize: 256 * 1024,
-    createdAt: '2025-07-01T10:00:00Z',
-    updatedAt: '2025-07-01T10:00:00Z',
-  },
-  {
-    id: 'folder-4',
-    name: 'Deep Folder',
-    parentId: 'folder-3',
-    children: [],
-    conversationCount: 1,
-    totalSize: 128 * 1024,
-    createdAt: '2025-07-01T10:00:00Z',
-    updatedAt: '2025-07-01T10:00:00Z',
-  },
-]
-
-const mockActions = {
-  createFolder: vi.fn(),
-  updateFolder: vi.fn(),
-  deleteFolder: vi.fn(),
-  moveFolder: vi.fn(),
-  duplicateFolder: vi.fn(),
-  setSelectedFolder: vi.fn(),
-  setExpandedFolders: vi.fn(),
-}
-
-describe('FolderTreeView', () => {
-  beforeEach(() => {
-    vi.clearAllMocks()
-    
-    // Setup store mocks
-    ;(useFolders as any).mockReturnValue({
-      folders: mockFolders,
-      selectedFolder: null,
-      expandedFolders: new Set(['folder-1']),
-      isLoading: false,
-      error: null,
-    })
-    
-    ;(useActions as any).mockReturnValue(mockActions)
-    
-    // Mock other store hooks that might be used
-    const { useUI, useConversations, useSearch, useRealtime, useAnalytics } = require('@/lib/stores/feedme-store')
-    
-    ;(useUI as any).mockReturnValue({
-      activeTab: 'folders',
-      selectedConversations: [],
-      selectedFolders: [],
-      isMultiSelectMode: false,
-      viewMode: 'tree',
-    })
-    
-    ;(useConversations as any).mockReturnValue({ conversations: [] })
-    ;(useSearch as any).mockReturnValue({ query: '', results: [] })
-    ;(useRealtime as any).mockReturnValue({ isConnected: false })
-    ;(useAnalytics as any).mockReturnValue({ workflowStats: null })
-  })
-
-  afterEach(() => {
-    vi.clearAllMocks()
-  })
-
-  describe('Rendering', () => {
-    it('renders folder tree with correct structure', () => {
-      render(<FolderTreeView />)
-      
-      expect(screen.getByText('Root Folder')).toBeInTheDocument()
-      expect(screen.getByText('Subfolder 1')).toBeInTheDocument()
-      expect(screen.getByText('Subfolder 2')).toBeInTheDocument()
-      expect(screen.getByTestId('virtual-tree')).toBeInTheDocument()
-    })
-
-    it('displays folder icons correctly', () => {
-      render(<FolderTreeView />)
-      
-      expect(screen.getAllByTestId('folder-icon')).toHaveLength(3) // Closed folders
-      expect(screen.getAllByTestId('folder-open-icon')).toHaveLength(1) // Expanded root
-    })
-
-    it('shows conversation counts', () => {
-      render(<FolderTreeView />)
-      
-      expect(screen.getByText('5')).toBeInTheDocument() // Root folder count
-      expect(screen.getByText('3')).toBeInTheDocument() // Subfolder 1 count
-      expect(screen.getByText('2')).toBeInTheDocument() // Subfolder 2 count
-    })
-
-    it('handles loading state', () => {
-      ;(useFolders as any).mockReturnValue({
-        folders: [],
-        selectedFolder: null,
-        expandedFolders: new Set(),
-        isLoading: true,
-        error: null,
-      })
-
-      render(<FolderTreeView />)
-      
-      expect(screen.getByText('Loading folders...')).toBeInTheDocument()
-    })
-
-    it('handles error state', () => {
-      ;(useFolders as any).mockReturnValue({
-        folders: [],
-        selectedFolder: null,
-        expandedFolders: new Set(),
-        isLoading: false,
-        error: 'Failed to load folders',
-      })
-
-      render(<FolderTreeView />)
-      
-      expect(screen.getByText('Error: Failed to load folders')).toBeInTheDocument()
-    })
-
-    it('handles empty state', () => {
-      ;(useFolders as any).mockReturnValue({
-        folders: [],
-        selectedFolder: null,
-        expandedFolders: new Set(),
-        isLoading: false,
-        error: null,
-      })
-
-      render(<FolderTreeView />)
-      
-      expect(screen.getByText('No folders found')).toBeInTheDocument()
-      expect(screen.getByText('Create your first folder to get started')).toBeInTheDocument()
-    })
-  })
-
-  describe('Folder Interactions', () => {
-    it('handles folder selection', async () => {
-      const user = userEvent.setup()
-      render(<FolderTreeView />)
-      
-      const folder = screen.getByText('Subfolder 1')
-      await user.click(folder)
-      
-      expect(mockActions.setSelectedFolder).toHaveBeenCalledWith('folder-2')
-    })
-
-    it('handles folder expansion/collapse', async () => {
-      const user = userEvent.setup()
-      render(<FolderTreeView />)
-      
-      const chevron = screen.getByTestId('chevron-right')
-      await user.click(chevron)
-      
-      expect(mockActions.setExpandedFolders).toHaveBeenCalled()
-    })
-
-    it('shows selected folder with highlight', () => {
-      ;(useFolders as any).mockReturnValue({
-        folders: mockFolders,
-        selectedFolder: 'folder-2',
-        expandedFolders: new Set(['folder-1']),
-        isLoading: false,
-        error: null,
-      })
-
-      render(<FolderTreeView />)
-      
-      const selectedFolder = screen.getByText('Subfolder 1').closest('div')
-      expect(selectedFolder).toHaveClass('bg-accent')
-    })
-  })
-
-  describe('Context Menu', () => {
-    it('opens context menu on right click', async () => {
-      const user = userEvent.setup()
-      render(<FolderTreeView />)
-      
-      const folder = screen.getByText('Subfolder 1')
-      await user.pointer({ keys: '[MouseRight]', target: folder })
-      
-      expect(screen.getByText('Create Subfolder')).toBeInTheDocument()
-      expect(screen.getByText('Rename')).toBeInTheDocument()
-      expect(screen.getByText('Delete')).toBeInTheDocument()
-      expect(screen.getByText('Duplicate')).toBeInTheDocument()
-    })
-
-    it('handles create subfolder action', async () => {
-      const user = userEvent.setup()
-      render(<FolderTreeView />)
-      
-      const folder = screen.getByText('Subfolder 1')
-      await user.pointer({ keys: '[MouseRight]', target: folder })
-      
-      const createAction = screen.getByText('Create Subfolder')
-      await user.click(createAction)
-      
-      expect(mockActions.createFolder).toHaveBeenCalledWith({
-        name: 'New Folder',
-        parentId: 'folder-2',
-      })
-    })
-
-    it('handles delete folder action', async () => {
-      const user = userEvent.setup()
-      render(<FolderTreeView />)
-      
-      const folder = screen.getByText('Subfolder 1')
-      await user.pointer({ keys: '[MouseRight]', target: folder })
-      
-      const deleteAction = screen.getByText('Delete')
-      await user.click(deleteAction)
-      
-      expect(mockActions.deleteFolder).toHaveBeenCalledWith('folder-2')
-    })
-
-    it('handles duplicate folder action', async () => {
-      const user = userEvent.setup()
-      render(<FolderTreeView />)
-      
-      const folder = screen.getByText('Subfolder 1')
-      await user.pointer({ keys: '[MouseRight]', target: folder })
-      
-      const duplicateAction = screen.getByText('Duplicate')
-      await user.click(duplicateAction)
-      
-      expect(mockActions.duplicateFolder).toHaveBeenCalledWith('folder-2')
-    })
-  })
-
-  describe('Inline Editing', () => {
-    it('enters edit mode on double click', async () => {
-      const user = userEvent.setup()
-      render(<FolderTreeView />)
-      
-      const folder = screen.getByText('Subfolder 1')
-      await user.dblClick(folder)
-      
-      expect(screen.getByDisplayValue('Subfolder 1')).toBeInTheDocument()
-    })
-
-    it('saves changes on Enter key', async () => {
-      const user = userEvent.setup()
-      render(<FolderTreeView />)
-      
-      const folder = screen.getByText('Subfolder 1')
-      await user.dblClick(folder)
-      
-      const input = screen.getByDisplayValue('Subfolder 1')
-      await user.clear(input)
-      await user.type(input, 'Renamed Folder')
-      await user.keyboard('{Enter}')
-      
-      expect(mockActions.updateFolder).toHaveBeenCalledWith('folder-2', {
-        name: 'Renamed Folder',
-      })
-    })
-
-    it('cancels edit on Escape key', async () => {
-      const user = userEvent.setup()
-      render(<FolderTreeView />)
-      
-      const folder = screen.getByText('Subfolder 1')
-      await user.dblClick(folder)
-      
-      const input = screen.getByDisplayValue('Subfolder 1')
-      await user.clear(input)
-      await user.type(input, 'Changed Name')
-      await user.keyboard('{Escape}')
-      
-      expect(mockActions.updateFolder).not.toHaveBeenCalled()
-      expect(screen.getByText('Subfolder 1')).toBeInTheDocument()
-    })
-  })
-
-  describe('Drag and Drop', () => {
-    const DragDropWrapper = ({ children }: { children: React.ReactNode }) => (
-      <DragDropContext onDragEnd={() => {}}>
-        {children}
-      </DragDropContext>
-    )
-
-    it('renders draggable folder items', () => {
-      render(
-        <DragDropWrapper>
-          <FolderTreeView />
-        </DragDropWrapper>
-      )
-      
-      const draggableItems = screen.getAllByRole('button')
-      expect(draggableItems.length).toBeGreaterThan(0)
-    })
-
-    it('handles drag start', async () => {
-      const user = userEvent.setup()
-      render(
-        <DragDropWrapper>
-          <FolderTreeView />
-        </DragDropWrapper>
-      )
-      
-      const folder = screen.getByText('Subfolder 1')
-      
-      // Simulate drag start
-      fireEvent.dragStart(folder, {
-        dataTransfer: { setData: vi.fn(), effectAllowed: 'move' },
-      })
-      
-      expect(folder.closest('[data-rbd-draggable-id]')).toHaveAttribute('data-rbd-draggable-id')
-    })
-
-    it('provides visual feedback during drag', async () => {
-      render(
-        <DragDropWrapper>
-          <FolderTreeView />
-        </DragDropWrapper>
-      )
-      
-      const folder = screen.getByText('Subfolder 1')
-      
-      // Simulate drag over
-      fireEvent.dragOver(folder, {
-        dataTransfer: { dropEffect: 'move' },
-      })
-      
-      // Check for visual feedback classes
-      const draggableContainer = folder.closest('div')
-      expect(draggableContainer).toHaveClass('transition-all')
-    })
-  })
-
-  describe('Virtual Scrolling', () => {
-    it('renders virtual tree component', () => {
-      render(<FolderTreeView />)
-      
-      expect(screen.getByTestId('virtual-tree')).toBeInTheDocument()
-    })
-
-    it('calculates correct item height', () => {
-      render(<FolderTreeView />)
-      
-      const virtualTree = screen.getByTestId('virtual-tree')
-      
-      // Check that items have consistent height
-      const items = virtualTree.querySelectorAll('div[style*="height"]')
-      expect(items.length).toBeGreaterThan(0)
-    })
-
-    it('handles large folder trees efficiently', () => {
-      const largeFolderSet = Array.from({ length: 1000 }, (_, i) => ({
-        id: `folder-${i}`,
-        name: `Folder ${i}`,
-        parentId: i > 0 ? `folder-${Math.floor(i / 10)}` : null,
-        children: [],
-        conversationCount: Math.floor(Math.random() * 10),
-        totalSize: Math.floor(Math.random() * 1024 * 1024),
-        createdAt: '2025-07-01T10:00:00Z',
-        updatedAt: '2025-07-01T10:00:00Z',
-      }))
-
-      ;(useFolders as any).mockReturnValue({
-        folders: largeFolderSet,
-        selectedFolder: null,
-        expandedFolders: new Set(),
-        isLoading: false,
-        error: null,
-      })
-
-      const startTime = performance.now()
-      render(<FolderTreeView />)
-      const endTime = performance.now()
-      
-      // Should render quickly even with many folders
-      expect(endTime - startTime).toBeLessThan(100)
-      expect(screen.getByTestId('virtual-tree')).toBeInTheDocument()
-    })
-  })
-
-  describe('Keyboard Navigation', () => {
-    it('handles arrow key navigation', async () => {
-      const user = userEvent.setup()
-      render(<FolderTreeView />)
-      
-      const firstFolder = screen.getByText('Root Folder')
-      await user.click(firstFolder)
-      
-      // Navigate down
-      await user.keyboard('{ArrowDown}')
-      expect(mockActions.setSelectedFolder).toHaveBeenCalledWith('folder-2')
-      
-      // Navigate up
-      await user.keyboard('{ArrowUp}')
-      expect(mockActions.setSelectedFolder).toHaveBeenCalledWith('folder-1')
-    })
-
-    it('handles Enter key for expansion', async () => {
-      const user = userEvent.setup()
-      render(<FolderTreeView />)
-      
-      const folder = screen.getByText('Subfolder 2')
-      await user.click(folder)
-      await user.keyboard('{Enter}')
-      
-      expect(mockActions.setExpandedFolders).toHaveBeenCalled()
-    })
-
-    it('handles Delete key for deletion', async () => {
-      const user = userEvent.setup()
-      render(<FolderTreeView />)
-      
-      const folder = screen.getByText('Subfolder 1')
-      await user.click(folder)
-      await user.keyboard('{Delete}')
-      
-      expect(mockActions.deleteFolder).toHaveBeenCalledWith('folder-2')
-    })
-
-    it('handles F2 key for rename', async () => {
-      const user = userEvent.setup()
-      render(<FolderTreeView />)
-      
-      const folder = screen.getByText('Subfolder 1')
-      await user.click(folder)
-      await user.keyboard('{F2}')
-      
-      expect(screen.getByDisplayValue('Subfolder 1')).toBeInTheDocument()
-    })
-  })
-
-  describe('Performance', () => {
-    it('debounces search input', async () => {
-      const user = userEvent.setup()
-      render(<FolderTreeView enableSearch />)
-      
-      const searchInput = screen.getByPlaceholderText('Search folders...')
-      
-      // Type quickly
-      await user.type(searchInput, 'test', { delay: 10 })
-      
-      // Should debounce the search
-      await waitFor(() => {
-        expect(searchInput).toHaveValue('test')
-      }, { timeout: 600 })
-    })
-
-    it('memoizes folder tree structure', () => {
-      const { rerender } = render(<FolderTreeView />)
-      
-      // Re-render with same props
-      rerender(<FolderTreeView />)
-      
-      // Should not re-compute tree structure
-      expect(screen.getByTestId('virtual-tree')).toBeInTheDocument()
-    })
-  })
-
-  describe('Accessibility', () => {
-    it('has proper ARIA labels', () => {
-      render(<FolderTreeView />)
-      
-      expect(screen.getByRole('tree')).toBeInTheDocument()
-      expect(screen.getAllByRole('treeitem')).toHaveLength(mockFolders.length)
-    })
-
-    it('supports keyboard navigation', async () => {
-      const user = userEvent.setup()
-      render(<FolderTreeView />)
-      
-      const tree = screen.getByRole('tree')
-      tree.focus()
-      
-      await user.keyboard('{ArrowDown}')
-      expect(mockActions.setSelectedFolder).toHaveBeenCalled()
-    })
-
-    it('has proper focus management', async () => {
-      const user = userEvent.setup()
-      render(<FolderTreeView />)
-      
-      const firstFolder = screen.getByText('Root Folder')
-      await user.click(firstFolder)
-      
-      expect(firstFolder).toHaveFocus()
-    })
-
-    it('announces folder operations to screen readers', async () => {
-      const user = userEvent.setup()
-      render(<FolderTreeView />)
-      
-      const folder = screen.getByText('Subfolder 1')
-      await user.click(folder)
-      
-      // Check for aria-live region updates
-      expect(screen.getByText('Subfolder 1 selected')).toBeInTheDocument()
-    })
-  })
-
-  describe('Error Handling', () => {
-    it('handles network errors gracefully', async () => {
-      mockActions.createFolder.mockRejectedValue(new Error('Network error'))
-      
-      const user = userEvent.setup()
-      render(<FolderTreeView />)
-      
-      const folder = screen.getByText('Root Folder')
-      await user.pointer({ keys: '[MouseRight]', target: folder })
-      
-      const createAction = screen.getByText('Create Subfolder')
-      await user.click(createAction)
-      
-      await waitFor(() => {
-        expect(screen.getByText('Failed to create folder')).toBeInTheDocument()
-      })
-    })
-
-    it('handles invalid folder names', async () => {
-      const user = userEvent.setup()
-      render(<FolderTreeView />)
-      
-      const folder = screen.getByText('Subfolder 1')
-      await user.dblClick(folder)
-      
-      const input = screen.getByDisplayValue('Subfolder 1')
-      await user.clear(input)
-      await user.type(input, '') // Empty name
-      await user.keyboard('{Enter}')
-      
-      expect(screen.getByText('Folder name cannot be empty')).toBeInTheDocument()
-      expect(mockActions.updateFolder).not.toHaveBeenCalled()
-    })
-
-    it('prevents circular references in drag and drop', () => {
-      render(
-        <DragDropContext onDragEnd={() => {}}>
-          <FolderTreeView />
-        </DragDropContext>
-      )
-      
-      const parentFolder = screen.getByText('Root Folder')
-      const childFolder = screen.getByText('Subfolder 1')
-      
-      // Attempt to drag parent into child (should be prevented)
-      fireEvent.dragStart(parentFolder)
-      fireEvent.dragOver(childFolder)
-      fireEvent.drop(childFolder)
-      
-      expect(mockActions.moveFolder).not.toHaveBeenCalled()
-    })
-  })
-})
\ No newline at end of file
diff --git a/frontend/components/feedme/__tests__/QAPairExtractor.test.tsx b/frontend/components/feedme/__tests__/QAPairExtractor.test.tsx
deleted file mode 100644
index 90d9e9b..0000000
--- a/frontend/components/feedme/__tests__/QAPairExtractor.test.tsx
+++ /dev/null
@@ -1,797 +0,0 @@
-/**
- * QAPairExtractor Component Tests
- * 
- * Comprehensive test suite for the QAPairExtractor component with 95%+ coverage.
- * Tests AI-powered Q&A extraction, confidence scoring, quality indicators, and improvement suggestions.
- */
-
-import React from 'react'
-import { render, screen, fireEvent, waitFor, act } from '@testing-library/react'
-import userEvent from '@testing-library/user-event'
-import { vi, describe, it, expect, beforeEach, afterEach } from 'vitest'
-import { QAPairExtractor } from '../QAPairExtractor'
-import { useQAExtraction, useActions } from '@/lib/stores/feedme-store'
-
-// Mock the store
-vi.mock('@/lib/stores/feedme-store', () => ({
-  useQAExtraction: vi.fn(),
-  useActions: vi.fn(),
-}))
-
-// Mock react-window for virtual scrolling
-vi.mock('react-window', () => ({
-  FixedSizeList: ({ children, itemCount, height, itemSize }: any) => (
-    <div data-testid="virtual-list" style={{ height }}>
-      {Array.from({ length: itemCount }, (_, index) => (
-        <div key={index} style={{ height: itemSize }}>
-          {children({ index, style: {} })}
-        </div>
-      ))}
-    </div>
-  ),
-}))
-
-// Mock lucide-react icons
-vi.mock('lucide-react', () => ({
-  MessageSquare: () => <div data-testid="message-square-icon" />,
-  Brain: () => <div data-testid="brain-icon" />,
-  Zap: () => <div data-testid="zap-icon" />,
-  Target: () => <div data-testid="target-icon" />,
-  TrendingUp: () => <div data-testid="trending-up-icon" />,
-  TrendingDown: () => <div data-testid="trending-down-icon" />,
-  CheckCircle2: () => <div data-testid="check-circle-icon" />,
-  AlertCircle: () => <div data-testid="alert-circle-icon" />,
-  XCircle: () => <div data-testid="x-circle-icon" />,
-  Edit: () => <div data-testid="edit-icon" />,
-  Trash2: () => <div data-testid="trash-icon" />,
-  Copy: () => <div data-testid="copy-icon" />,
-  Save: () => <div data-testid="save-icon" />,
-  RotateCcw: () => <div data-testid="rotate-ccw-icon" />,
-  Loader: () => <div data-testid="loader-icon" />,
-  Star: () => <div data-testid="star-icon" />,
-  ArrowUp: () => <div data-testid="arrow-up-icon" />,
-  ArrowDown: () => <div data-testid="arrow-down-icon" />,
-  Filter: () => <div data-testid="filter-icon" />,
-  Download: () => <div data-testid="download-icon" />,
-  Upload: () => <div data-testid="upload-icon" />,
-  RefreshCw: () => <div data-testid="refresh-icon" />,
-  Settings: () => <div data-testid="settings-icon" />,
-  Info: () => <div data-testid="info-icon" />,
-}))
-
-// Mock data
-const mockQAPairs = [
-  {
-    id: 'qa-1',
-    conversationId: 'conv-1',
-    question: {
-      text: "I'm having trouble with email sync",
-      timestamp: '10:00',
-      sender: 'Customer',
-      messageId: 'msg-1',
-    },
-    answer: {
-      text: 'Go to Settings > Accounts > Gmail and click Reconnect to fix the sync issue.',
-      timestamp: '10:05',
-      sender: 'Agent',
-      messageId: 'msg-5',
-    },
-    context: {
-      beforeMessages: 1,
-      afterMessages: 2,
-      conversationFlow: ['problem_statement', 'clarification', 'solution', 'confirmation'],
-    },
-    confidence: {
-      overall: 0.92,
-      questionClarity: 0.88,
-      answerRelevance: 0.95,
-      contextCompleteness: 0.91,
-    },
-    quality: {
-      score: 0.89,
-      factors: {
-        specificity: 0.85,
-        actionability: 0.93,
-        completeness: 0.87,
-        clarity: 0.92,
-      },
-      issues: [],
-      suggestions: ['Add more context about when this error typically occurs'],
-    },
-    tags: ['email', 'sync', 'gmail', 'settings'],
-    issueType: 'technical_issue',
-    resolution: 'settings_change',
-    difficulty: 'easy',
-    estimatedTime: '2 minutes',
-    successRate: 0.94,
-    createdAt: '2025-07-01T10:00:00Z',
-    updatedAt: '2025-07-01T10:05:00Z',
-  },
-  {
-    id: 'qa-2',
-    conversationId: 'conv-1',
-    question: {
-      text: 'How do I set up my Outlook account?',
-      timestamp: '11:00',
-      sender: 'Customer',
-      messageId: 'msg-10',
-    },
-    answer: {
-      text: 'To add your Outlook account, go to Settings > Add Account > Select Microsoft Outlook > Enter your credentials.',
-      timestamp: '11:02',
-      sender: 'Agent',
-      messageId: 'msg-12',
-    },
-    context: {
-      beforeMessages: 0,
-      afterMessages: 1,
-      conversationFlow: ['question', 'direct_answer', 'confirmation'],
-    },
-    confidence: {
-      overall: 0.76,
-      questionClarity: 0.82,
-      answerRelevance: 0.78,
-      contextCompleteness: 0.68,
-    },
-    quality: {
-      score: 0.73,
-      factors: {
-        specificity: 0.79,
-        actionability: 0.81,
-        completeness: 0.65,
-        clarity: 0.78,
-      },
-      issues: ['Answer could be more detailed', 'Missing troubleshooting steps'],
-      suggestions: [
-        'Add screenshots for each step',
-        'Include common error scenarios',
-        'Mention different Outlook versions',
-      ],
-    },
-    tags: ['outlook', 'setup', 'account', 'configuration'],
-    issueType: 'setup_assistance',
-    resolution: 'guided_setup',
-    difficulty: 'medium',
-    estimatedTime: '5 minutes',
-    successRate: 0.82,
-    createdAt: '2025-07-01T11:00:00Z',
-    updatedAt: '2025-07-01T11:02:00Z',
-  },
-]
-
-const mockExtractionStats = {
-  totalPairs: 2,
-  averageConfidence: 0.84,
-  averageQuality: 0.81,
-  highQualityPairs: 1,
-  needsReviewPairs: 1,
-  issueTypes: {
-    technical_issue: 1,
-    setup_assistance: 1,
-  },
-  qualityDistribution: {
-    excellent: 1,
-    good: 0,
-    fair: 1,
-    poor: 0,
-  },
-}
-
-const mockActions = {
-  extractQAPairs: vi.fn(),
-  updateQAPair: vi.fn(),
-  deleteQAPair: vi.fn(),
-  approveQAPair: vi.fn(),
-  bulkApproveQAPairs: vi.fn(),
-  rejectQAPair: vi.fn(),
-  reextractQAPairs: vi.fn(),
-  exportQAPairs: vi.fn(),
-  importQAPairs: vi.fn(),
-  optimizeQAPair: vi.fn(),
-}
-
-describe('QAPairExtractor', () => {
-  beforeEach(() => {
-    vi.clearAllMocks()
-    
-    // Setup store mocks
-    ;(useQAExtraction as any).mockReturnValue({
-      qaPairs: mockQAPairs,
-      extractionStats: mockExtractionStats,
-      isExtracting: false,
-      error: null,
-      selectedPairs: new Set(),
-      filterSettings: {
-        minConfidence: 0.7,
-        issueTypes: [],
-        qualityThreshold: 0.6,
-        showOnlyNeedsReview: false,
-      },
-      sortSettings: {
-        field: 'confidence',
-        direction: 'desc',
-      },
-    })
-    
-    ;(useActions as any).mockReturnValue(mockActions)
-    
-    // Mock URL.createObjectURL for export functionality
-    global.URL.createObjectURL = vi.fn(() => 'blob:test')
-    global.URL.revokeObjectURL = vi.fn()
-  })
-
-  afterEach(() => {
-    vi.clearAllMocks()
-    vi.restoreAllMocks()
-  })
-
-  describe('Rendering', () => {
-    it('renders QA pair extractor with header', () => {
-      render(<QAPairExtractor conversationId="conv-1" />)
-      
-      expect(screen.getByText('Q&A Extraction')).toBeInTheDocument()
-      expect(screen.getByTestId('brain-icon')).toBeInTheDocument()
-    })
-
-    it('displays extraction statistics', () => {
-      render(<QAPairExtractor conversationId="conv-1" />)
-      
-      expect(screen.getByText('2 Q&A pairs')).toBeInTheDocument()
-      expect(screen.getByText('84% avg confidence')).toBeInTheDocument()
-      expect(screen.getByText('81% avg quality')).toBeInTheDocument()
-      expect(screen.getByText('1 needs review')).toBeInTheDocument()
-    })
-
-    it('shows quality distribution chart', () => {
-      render(<QAPairExtractor conversationId="conv-1" />)
-      
-      expect(screen.getByText('Quality Distribution')).toBeInTheDocument()
-      expect(screen.getByText('Excellent: 1')).toBeInTheDocument()
-      expect(screen.getByText('Fair: 1')).toBeInTheDocument()
-    })
-
-    it('displays issue type breakdown', () => {
-      render(<QAPairExtractor conversationId="conv-1" />)
-      
-      expect(screen.getByText('Issue Types')).toBeInTheDocument()
-      expect(screen.getByText('Technical Issue: 1')).toBeInTheDocument()
-      expect(screen.getByText('Setup Assistance: 1')).toBeInTheDocument()
-    })
-  })
-
-  describe('Q&A Pair Display', () => {
-    it('renders Q&A pairs list', () => {
-      render(<QAPairExtractor conversationId="conv-1" />)
-      
-      expect(screen.getByTestId('virtual-list')).toBeInTheDocument()
-      expect(screen.getByText("I'm having trouble with email sync")).toBeInTheDocument()
-      expect(screen.getByText('How do I set up my Outlook account?')).toBeInTheDocument()
-    })
-
-    it('displays Q&A pair details', () => {
-      render(<QAPairExtractor conversationId="conv-1" />)
-      
-      // First Q&A pair
-      expect(screen.getByText("I'm having trouble with email sync")).toBeInTheDocument()
-      expect(screen.getByText('Go to Settings > Accounts > Gmail and click Reconnect')).toBeInTheDocument()
-      expect(screen.getByText('92%')).toBeInTheDocument() // Confidence
-      expect(screen.getByText('89%')).toBeInTheDocument() // Quality
-    })
-
-    it('shows confidence indicators', () => {
-      render(<QAPairExtractor conversationId="conv-1" />)
-      
-      expect(screen.getByText('Question Clarity: 88%')).toBeInTheDocument()
-      expect(screen.getByText('Answer Relevance: 95%')).toBeInTheDocument()
-      expect(screen.getByText('Context Completeness: 91%')).toBeInTheDocument()
-    })
-
-    it('displays quality factors', () => {
-      render(<QAPairExtractor conversationId="conv-1" />)
-      
-      expect(screen.getByText('Specificity: 85%')).toBeInTheDocument()
-      expect(screen.getByText('Actionability: 93%')).toBeInTheDocument()
-      expect(screen.getByText('Completeness: 87%')).toBeInTheDocument()
-      expect(screen.getByText('Clarity: 92%')).toBeInTheDocument()
-    })
-
-    it('shows quality issues and suggestions', () => {
-      render(<QAPairExtractor conversationId="conv-1" />)
-      
-      expect(screen.getByText('Answer could be more detailed')).toBeInTheDocument()
-      expect(screen.getByText('Add screenshots for each step')).toBeInTheDocument()
-      expect(screen.getByText('Include common error scenarios')).toBeInTheDocument()
-    })
-
-    it('displays metadata information', () => {
-      render(<QAPairExtractor conversationId="conv-1" />)
-      
-      expect(screen.getByText('email')).toBeInTheDocument()
-      expect(screen.getByText('sync')).toBeInTheDocument()
-      expect(screen.getByText('Easy')).toBeInTheDocument()
-      expect(screen.getByText('2 minutes')).toBeInTheDocument()
-      expect(screen.getByText('94% success')).toBeInTheDocument()
-    })
-  })
-
-  describe('Filtering and Sorting', () => {
-    it('filters by confidence threshold', async () => {
-      const user = userEvent.setup()
-      render(<QAPairExtractor conversationId="conv-1" />)
-      
-      const confidenceSlider = screen.getByRole('slider', { name: /confidence/i })
-      await user.click(confidenceSlider)
-      
-      // Should filter out low confidence pairs
-      expect(screen.queryByText('How do I set up my Outlook account?')).not.toBeInTheDocument()
-      expect(screen.getByText("I'm having trouble with email sync")).toBeInTheDocument()
-    })
-
-    it('filters by issue type', async () => {
-      const user = userEvent.setup()
-      render(<QAPairExtractor conversationId="conv-1" />)
-      
-      const issueTypeFilter = screen.getByText('All Issue Types')
-      await user.click(issueTypeFilter)
-      
-      const technicalIssueOption = screen.getByText('Technical Issue')
-      await user.click(technicalIssueOption)
-      
-      expect(screen.getByText("I'm having trouble with email sync")).toBeInTheDocument()
-      expect(screen.queryByText('How do I set up my Outlook account?')).not.toBeInTheDocument()
-    })
-
-    it('filters by quality threshold', async () => {
-      const user = userEvent.setup()
-      render(<QAPairExtractor conversationId="conv-1" />)
-      
-      const qualitySlider = screen.getByRole('slider', { name: /quality/i })
-      await user.click(qualitySlider)
-      
-      // Adjust quality threshold
-      fireEvent.change(qualitySlider, { target: { value: '0.8' } })
-      
-      expect(screen.getByText("I'm having trouble with email sync")).toBeInTheDocument()
-      expect(screen.queryByText('How do I set up my Outlook account?')).not.toBeInTheDocument()
-    })
-
-    it('shows only pairs needing review', async () => {
-      const user = userEvent.setup()
-      render(<QAPairExtractor conversationId="conv-1" />)
-      
-      const reviewOnlyToggle = screen.getByText('Show only needs review')
-      await user.click(reviewOnlyToggle)
-      
-      expect(screen.queryByText("I'm having trouble with email sync")).not.toBeInTheDocument()
-      expect(screen.getByText('How do I set up my Outlook account?')).toBeInTheDocument()
-    })
-
-    it('sorts by different criteria', async () => {
-      const user = userEvent.setup()
-      render(<QAPairExtractor conversationId="conv-1" />)
-      
-      const sortSelect = screen.getByText('Sort by Confidence')
-      await user.click(sortSelect)
-      
-      expect(screen.getByText('Quality')).toBeInTheDocument()
-      expect(screen.getByText('Date')).toBeInTheDocument()
-      expect(screen.getByText('Issue Type')).toBeInTheDocument()
-      
-      const qualityOption = screen.getByText('Quality')
-      await user.click(qualityOption)
-      
-      // Should re-order the list
-      expect(screen.getByText('Sort by Quality')).toBeInTheDocument()
-    })
-
-    it('toggles sort direction', async () => {
-      const user = userEvent.setup()
-      render(<QAPairExtractor conversationId="conv-1" />)
-      
-      const sortDirectionButton = screen.getByTestId('arrow-down-icon').closest('button')
-      await user.click(sortDirectionButton!)
-      
-      expect(screen.getByTestId('arrow-up-icon')).toBeInTheDocument()
-    })
-  })
-
-  describe('Q&A Pair Actions', () => {
-    it('handles inline editing', async () => {
-      const user = userEvent.setup()
-      render(<QAPairExtractor conversationId="conv-1" />)
-      
-      const questionText = screen.getByText("I'm having trouble with email sync")
-      await user.click(questionText)
-      
-      expect(screen.getByDisplayValue("I'm having trouble with email sync")).toBeInTheDocument()
-      
-      const input = screen.getByDisplayValue("I'm having trouble with email sync")
-      await user.clear(input)
-      await user.type(input, 'I need help with email synchronization')
-      await user.keyboard('{Enter}')
-      
-      expect(mockActions.updateQAPair).toHaveBeenCalledWith('qa-1', {
-        question: {
-          ...mockQAPairs[0].question,
-          text: 'I need help with email synchronization',
-        },
-      })
-    })
-
-    it('handles pair approval', async () => {
-      const user = userEvent.setup()
-      render(<QAPairExtractor conversationId="conv-1" />)
-      
-      const approveButton = screen.getByText('Approve')
-      await user.click(approveButton)
-      
-      expect(mockActions.approveQAPair).toHaveBeenCalledWith('qa-1')
-    })
-
-    it('handles pair rejection', async () => {
-      const user = userEvent.setup()
-      render(<QAPairExtractor conversationId="conv-1" />)
-      
-      const rejectButton = screen.getByText('Reject')
-      await user.click(rejectButton)
-      
-      expect(mockActions.rejectQAPair).toHaveBeenCalledWith('qa-1')
-    })
-
-    it('handles pair deletion', async () => {
-      const user = userEvent.setup()
-      render(<QAPairExtractor conversationId="conv-1" />)
-      
-      const deleteButton = screen.getByTestId('trash-icon').closest('button')
-      await user.click(deleteButton!)
-      
-      expect(screen.getByText('Delete Q&A Pair')).toBeInTheDocument()
-      
-      const confirmButton = screen.getByText('Delete')
-      await user.click(confirmButton)
-      
-      expect(mockActions.deleteQAPair).toHaveBeenCalledWith('qa-1')
-    })
-
-    it('handles pair optimization', async () => {
-      const user = userEvent.setup()
-      render(<QAPairExtractor conversationId="conv-1" />)
-      
-      const optimizeButton = screen.getByText('Optimize')
-      await user.click(optimizeButton)
-      
-      expect(mockActions.optimizeQAPair).toHaveBeenCalledWith('qa-1')
-    })
-
-    it('shows optimization suggestions', () => {
-      render(<QAPairExtractor conversationId="conv-1" />)
-      
-      expect(screen.getByText('Improvement Suggestions')).toBeInTheDocument()
-      expect(screen.getByText('Add more context about when this error typically occurs')).toBeInTheDocument()
-    })
-  })
-
-  describe('Bulk Operations', () => {
-    it('handles bulk selection', async () => {
-      const user = userEvent.setup()
-      render(<QAPairExtractor conversationId="conv-1" />)
-      
-      const selectAllCheckbox = screen.getByRole('checkbox', { name: /select all/i })
-      await user.click(selectAllCheckbox)
-      
-      expect(screen.getByText('2 pairs selected')).toBeInTheDocument()
-    })
-
-    it('shows bulk operations panel', async () => {
-      ;(useQAExtraction as any).mockReturnValue({
-        ...mockQAExtraction,
-        selectedPairs: new Set(['qa-1', 'qa-2']),
-      })
-
-      render(<QAPairExtractor conversationId="conv-1" />)
-      
-      expect(screen.getByText('Bulk Operations')).toBeInTheDocument()
-      expect(screen.getByText('Approve Selected')).toBeInTheDocument()
-      expect(screen.getByText('Delete Selected')).toBeInTheDocument()
-      expect(screen.getByText('Export Selected')).toBeInTheDocument()
-    })
-
-    it('handles bulk approval', async () => {
-      ;(useQAExtraction as any).mockReturnValue({
-        ...mockQAExtraction,
-        selectedPairs: new Set(['qa-1', 'qa-2']),
-      })
-
-      const user = userEvent.setup()
-      render(<QAPairExtractor conversationId="conv-1" />)
-      
-      const bulkApproveButton = screen.getByText('Approve Selected')
-      await user.click(bulkApproveButton)
-      
-      expect(mockActions.bulkApproveQAPairs).toHaveBeenCalledWith(['qa-1', 'qa-2'])
-    })
-
-    it('handles bulk export', async () => {
-      ;(useQAExtraction as any).mockReturnValue({
-        ...mockQAExtraction,
-        selectedPairs: new Set(['qa-1']),
-      })
-
-      const user = userEvent.setup()
-      render(<QAPairExtractor conversationId="conv-1" />)
-      
-      const exportButton = screen.getByText('Export Selected')
-      await user.click(exportButton)
-      
-      expect(mockActions.exportQAPairs).toHaveBeenCalledWith(['qa-1'])
-      expect(global.URL.createObjectURL).toHaveBeenCalled()
-    })
-  })
-
-  describe('AI Extraction', () => {
-    it('handles extraction process', async () => {
-      const user = userEvent.setup()
-      render(<QAPairExtractor conversationId="conv-1" />)
-      
-      const extractButton = screen.getByText('Extract Q&A Pairs')
-      await user.click(extractButton)
-      
-      expect(mockActions.extractQAPairs).toHaveBeenCalledWith('conv-1')
-    })
-
-    it('shows extraction progress', () => {
-      ;(useQAExtraction as any).mockReturnValue({
-        ...mockQAExtraction,
-        isExtracting: true,
-      })
-
-      render(<QAPairExtractor conversationId="conv-1" />)
-      
-      expect(screen.getByText('Extracting Q&A pairs...')).toBeInTheDocument()
-      expect(screen.getByTestId('loader-icon')).toBeInTheDocument()
-    })
-
-    it('handles re-extraction', async () => {
-      const user = userEvent.setup()
-      render(<QAPairExtractor conversationId="conv-1" />)
-      
-      const reextractButton = screen.getByText('Re-extract')
-      await user.click(reextractButton)
-      
-      expect(screen.getByText('Re-extract Q&A pairs?')).toBeInTheDocument()
-      
-      const confirmButton = screen.getByText('Re-extract')
-      await user.click(confirmButton)
-      
-      expect(mockActions.reextractQAPairs).toHaveBeenCalledWith('conv-1')
-    })
-
-    it('shows extraction settings', async () => {
-      const user = userEvent.setup()
-      render(<QAPairExtractor conversationId="conv-1" />)
-      
-      const settingsButton = screen.getByTestId('settings-icon').closest('button')
-      await user.click(settingsButton!)
-      
-      expect(screen.getByText('Extraction Settings')).toBeInTheDocument()
-      expect(screen.getByText('Minimum confidence threshold')).toBeInTheDocument()
-      expect(screen.getByText('Context window size')).toBeInTheDocument()
-    })
-  })
-
-  describe('Performance Metrics', () => {
-    it('displays performance statistics', () => {
-      render(<QAPairExtractor conversationId="conv-1" />)
-      
-      expect(screen.getByText('Performance Metrics')).toBeInTheDocument()
-      expect(screen.getByText('High Quality: 50%')).toBeInTheDocument()
-      expect(screen.getByText('Needs Review: 50%')).toBeInTheDocument()
-    })
-
-    it('shows confidence distribution', () => {
-      render(<QAPairExtractor conversationId="conv-1" />)
-      
-      expect(screen.getByText('Confidence Distribution')).toBeInTheDocument()
-      expect(screen.getByText('Average: 84%')).toBeInTheDocument()
-    })
-
-    it('displays success rate metrics', () => {
-      render(<QAPairExtractor conversationId="conv-1" />)
-      
-      expect(screen.getByText('Success Rates')).toBeInTheDocument()
-      expect(screen.getByText('94% success')).toBeInTheDocument()
-      expect(screen.getByText('82% success')).toBeInTheDocument()
-    })
-  })
-
-  describe('Virtual Scrolling', () => {
-    it('renders virtual list for performance', () => {
-      render(<QAPairExtractor conversationId="conv-1" />)
-      
-      expect(screen.getByTestId('virtual-list')).toBeInTheDocument()
-    })
-
-    it('handles large datasets efficiently', () => {
-      const largeQASet = Array.from({ length: 10000 }, (_, i) => ({
-        ...mockQAPairs[0],
-        id: `qa-${i}`,
-        question: { ...mockQAPairs[0].question, text: `Question ${i}` },
-      }))
-
-      ;(useQAExtraction as any).mockReturnValue({
-        ...mockQAExtraction,
-        qaPairs: largeQASet,
-        extractionStats: {
-          ...mockExtractionStats,
-          totalPairs: 10000,
-        },
-      })
-
-      const startTime = performance.now()
-      render(<QAPairExtractor conversationId="conv-1" />)
-      const endTime = performance.now()
-      
-      expect(endTime - startTime).toBeLessThan(100)
-      expect(screen.getByText('10,000 Q&A pairs')).toBeInTheDocument()
-    })
-  })
-
-  describe('Error Handling', () => {
-    it('handles extraction errors', () => {
-      ;(useQAExtraction as any).mockReturnValue({
-        ...mockQAExtraction,
-        error: 'Failed to extract Q&A pairs',
-        isExtracting: false,
-      })
-
-      render(<QAPairExtractor conversationId="conv-1" />)
-      
-      expect(screen.getByText('Error: Failed to extract Q&A pairs')).toBeInTheDocument()
-      expect(screen.getByText('Retry')).toBeInTheDocument()
-    })
-
-    it('handles network errors gracefully', async () => {
-      mockActions.extractQAPairs.mockRejectedValue(new Error('Network error'))
-      
-      const user = userEvent.setup()
-      render(<QAPairExtractor conversationId="conv-1" />)
-      
-      const extractButton = screen.getByText('Extract Q&A Pairs')
-      await user.click(extractButton)
-      
-      await waitFor(() => {
-        expect(screen.getByText('Failed to extract Q&A pairs')).toBeInTheDocument()
-      })
-    })
-
-    it('handles invalid Q&A pair data', () => {
-      ;(useQAExtraction as any).mockReturnValue({
-        ...mockQAExtraction,
-        qaPairs: [
-          {
-            ...mockQAPairs[0],
-            confidence: null, // Invalid data
-            quality: undefined,
-          },
-        ],
-      })
-
-      render(<QAPairExtractor conversationId="conv-1" />)
-      
-      expect(screen.getByText('N/A')).toBeInTheDocument() // Fallback for missing confidence
-    })
-  })
-
-  describe('Loading States', () => {
-    it('shows loading state during extraction', () => {
-      ;(useQAExtraction as any).mockReturnValue({
-        ...mockQAExtraction,
-        isExtracting: true,
-        qaPairs: [],
-      })
-
-      render(<QAPairExtractor conversationId="conv-1" />)
-      
-      expect(screen.getByText('Extracting Q&A pairs...')).toBeInTheDocument()
-      expect(screen.getByTestId('loader-icon')).toBeInTheDocument()
-    })
-
-    it('shows empty state when no pairs exist', () => {
-      ;(useQAExtraction as any).mockReturnValue({
-        ...mockQAExtraction,
-        qaPairs: [],
-        extractionStats: {
-          ...mockExtractionStats,
-          totalPairs: 0,
-        },
-      })
-
-      render(<QAPairExtractor conversationId="conv-1" />)
-      
-      expect(screen.getByText('No Q&A pairs found')).toBeInTheDocument()
-      expect(screen.getByText('Start extraction to analyze the conversation')).toBeInTheDocument()
-    })
-  })
-
-  describe('Accessibility', () => {
-    it('has proper ARIA labels', () => {
-      render(<QAPairExtractor conversationId="conv-1" />)
-      
-      expect(screen.getByRole('main')).toBeInTheDocument()
-      expect(screen.getByRole('list')).toBeInTheDocument()
-      expect(screen.getAllByRole('listitem')).toHaveLength(2)
-    })
-
-    it('supports keyboard navigation', async () => {
-      const user = userEvent.setup()
-      render(<QAPairExtractor conversationId="conv-1" />)
-      
-      await user.keyboard('{Tab}')
-      expect(screen.getByText('Extract Q&A Pairs')).toHaveFocus()
-    })
-
-    it('provides screen reader announcements', async () => {
-      const user = userEvent.setup()
-      render(<QAPairExtractor conversationId="conv-1" />)
-      
-      const approveButton = screen.getByText('Approve')
-      await user.click(approveButton)
-      
-      expect(screen.getByText('Q&A pair approved')).toHaveAttribute('aria-live', 'polite')
-    })
-
-    it('has proper color contrast for quality indicators', () => {
-      render(<QAPairExtractor conversationId="conv-1" />)
-      
-      const highQualityIndicator = screen.getByText('89%')
-      expect(highQualityIndicator).toHaveClass('text-green-600')
-      
-      const lowQualityIndicator = screen.getByText('73%')
-      expect(lowQualityIndicator).toHaveClass('text-yellow-600')
-    })
-  })
-
-  describe('Import/Export', () => {
-    it('handles Q&A pair export', async () => {
-      const user = userEvent.setup()
-      render(<QAPairExtractor conversationId="conv-1" />)
-      
-      const exportButton = screen.getByText('Export All')
-      await user.click(exportButton)
-      
-      expect(mockActions.exportQAPairs).toHaveBeenCalledWith(['qa-1', 'qa-2'])
-    })
-
-    it('handles Q&A pair import', async () => {
-      const user = userEvent.setup()
-      render(<QAPairExtractor conversationId="conv-1" />)
-      
-      const importButton = screen.getByTestId('upload-icon').closest('button')
-      await user.click(importButton!)
-      
-      expect(screen.getByText('Import Q&A Pairs')).toBeInTheDocument()
-      
-      const fileInput = screen.getByRole('button', { name: /choose file/i })
-      const file = new File(['test content'], 'qa-pairs.json', { type: 'application/json' })
-      
-      await user.upload(fileInput, file)
-      
-      expect(mockActions.importQAPairs).toHaveBeenCalledWith('conv-1', expect.any(File))
-    })
-
-    it('validates import file format', async () => {
-      const user = userEvent.setup()
-      render(<QAPairExtractor conversationId="conv-1" />)
-      
-      const importButton = screen.getByTestId('upload-icon').closest('button')
-      await user.click(importButton!)
-      
-      const fileInput = screen.getByRole('button', { name: /choose file/i })
-      const invalidFile = new File(['test'], 'test.txt', { type: 'text/plain' })
-      
-      await user.upload(fileInput, invalidFile)
-      
-      expect(screen.getByText('Please select a JSON file')).toBeInTheDocument()
-    })
-  })
-})
\ No newline at end of file
diff --git a/keep_components.json b/keep_components.json
index f8ca3fc..10ab10a 100644
--- a/keep_components.json
+++ b/keep_components.json
@@ -1,81 +1,81 @@
 {
   "active_components": [
     {
-      "path": "frontend/components/feedme/EnhancedFeedMeModal.tsx",
+      "path": "components/feedme/EnhancedFeedMeModal.tsx",
       "reason": "Main upload interface - imported by FeedMeButton, 955 lines, WebSocket progress",
-      "imported_by": ["frontend/components/ui/FeedMeButton.tsx"],
+      "imported_by": ["components/ui/FeedMeButton.tsx"],
       "usage": "production_active"
     },
     {
-      "path": "frontend/components/feedme/FeedMePageManager.tsx", 
+      "path": "components/feedme/FeedMePageManager.tsx", 
       "reason": "Main page orchestrator - used by /feedme page, 253 lines",
-      "imported_by": ["frontend/app/feedme/page.tsx"],
+      "imported_by": ["app/feedme/page.tsx"],
       "usage": "production_active"
     },
     {
-      "path": "frontend/components/feedme/FeedMeConversationManager.tsx",
+      "path": "components/feedme/FeedMeConversationManager.tsx",
       "reason": "Modal conversation management - imported by FeedMeButton, 654 lines",
-      "imported_by": ["frontend/components/ui/FeedMeButton.tsx"],
+      "imported_by": ["components/ui/FeedMeButton.tsx"],
       "usage": "production_active"
     },
     {
-      "path": "frontend/components/feedme/ErrorBoundary.tsx",
+      "path": "components/feedme/ErrorBoundary.tsx",
       "reason": "React error boundary - imported by FeedMeButton and FeedMePageManager, 137 lines",
-      "imported_by": ["frontend/components/ui/FeedMeButton.tsx", "frontend/components/feedme/FeedMePageManager.tsx"],
+      "imported_by": ["components/ui/FeedMeButton.tsx", "components/feedme/FeedMePageManager.tsx"],
       "usage": "production_active"
     },
     {
-      "path": "frontend/components/feedme/AnalyticsDashboardSimple.tsx",
+      "path": "components/feedme/AnalyticsDashboardSimple.tsx",
       "reason": "Basic analytics display - imported by FeedMePageManager as AnalyticsDashboard, 179 lines",
-      "imported_by": ["frontend/components/feedme/FeedMePageManager.tsx"],
+      "imported_by": ["components/feedme/FeedMePageManager.tsx"],
       "usage": "production_active"
     },
     {
-      "path": "frontend/components/feedme/ConversationEditorSimple.tsx",
+      "path": "components/feedme/ConversationEditorSimple.tsx",
       "reason": "Basic conversation viewer - imported by FeedMePageManager as ConversationEditor, 118 lines",
-      "imported_by": ["frontend/components/feedme/FeedMePageManager.tsx"],
+      "imported_by": ["components/feedme/FeedMePageManager.tsx"],
       "usage": "production_active"
     },
     {
-      "path": "frontend/components/feedme/FileGridViewSimple.tsx",
+      "path": "components/feedme/FileGridViewSimple.tsx",
       "reason": "Basic conversation grid - imported by FeedMePageManager as FileGridView, 117 lines",
-      "imported_by": ["frontend/components/feedme/FeedMePageManager.tsx"],
+      "imported_by": ["components/feedme/FeedMePageManager.tsx"],
       "usage": "production_active"
     },
     {
-      "path": "frontend/components/feedme/FolderTreeViewSimple.tsx",
+      "path": "components/feedme/FolderTreeViewSimple.tsx",
       "reason": "Basic folder tree - imported by FeedMePageManager as FolderTreeView, 173 lines",
-      "imported_by": ["frontend/components/feedme/FeedMePageManager.tsx"],
+      "imported_by": ["components/feedme/FeedMePageManager.tsx"],
       "usage": "production_active"
     },
     {
-      "path": "frontend/components/feedme/UnifiedSearchBarSimple.tsx",
+      "path": "components/feedme/UnifiedSearchBarSimple.tsx",
       "reason": "Basic search input - imported by FeedMePageManager as UnifiedSearchBar, 62 lines",
-      "imported_by": ["frontend/components/feedme/FeedMePageManager.tsx"],
+      "imported_by": ["components/feedme/FeedMePageManager.tsx"],
       "usage": "production_active"
     },
     {
-      "path": "frontend/lib/stores/feedme-store.ts",
+      "path": "lib/stores/feedme-store.ts",
       "reason": "State management - imported by all FeedMe components, 650 lines optimized",
       "imported_by": ["multiple_feedme_components"],
       "usage": "production_active"
     },
     {
-      "path": "frontend/lib/feedme-api.ts",
+      "path": "lib/feedme-api.ts",
       "reason": "API client - imported by store and components, 350 lines optimized",
-      "imported_by": ["frontend/lib/stores/feedme-store.ts", "multiple_components"],
+      "imported_by": ["lib/stores/feedme-store.ts", "multiple_components"],
       "usage": "production_active"
     },
     {
-      "path": "frontend/components/ui/FeedMeButton.tsx",
+      "path": "components/ui/FeedMeButton.tsx",
       "reason": "Header integration button - imported by Header.tsx",
-      "imported_by": ["frontend/components/layout/Header.tsx"],
+      "imported_by": ["components/layout/Header.tsx"],
       "usage": "production_active"
     }
   ],
   "supporting_files": [
     {
-      "path": "frontend/app/feedme/page.tsx",
+      "path": "app/feedme/page.tsx",
       "reason": "Main FeedMe page route",
       "usage": "production_active"
     }
diff --git a/remove_components.json b/remove_components.json
index 929dc99..c6b916f 100644
--- a/remove_components.json
+++ b/remove_components.json
@@ -1,55 +1,55 @@
 {
   "enterprise_components_never_integrated": [
     {
-      "path": "frontend/components/feedme/AnalyticsDashboard.tsx",
+      "path": "components/feedme/AnalyticsDashboard.tsx",
       "lines": 921,
       "reason": "Enterprise analytics with charts - never integrated, Simple version used instead",
       "superseded_by": "AnalyticsDashboardSimple.tsx"
     },
     {
-      "path": "frontend/components/feedme/ConversationEditor.tsx", 
+      "path": "components/feedme/ConversationEditor.tsx", 
       "lines": 882,
       "reason": "Split-pane editor with AI assistance - never integrated, Simple version used instead",
       "superseded_by": "ConversationEditorSimple.tsx"
     },
     {
-      "path": "frontend/components/feedme/FileGridView.tsx",
+      "path": "components/feedme/FileGridView.tsx",
       "lines": 688,
       "reason": "Advanced grid with virtualization - never integrated, Simple version used instead", 
       "superseded_by": "FileGridViewSimple.tsx"
     },
     {
-      "path": "frontend/components/feedme/FolderTreeView.tsx",
+      "path": "components/feedme/FolderTreeView.tsx",
       "lines": 518,
       "reason": "Advanced tree with drag-drop - never integrated, Simple version used instead",
       "superseded_by": "FolderTreeViewSimple.tsx"
     },
     {
-      "path": "frontend/components/feedme/UnifiedSearchBar.tsx",
+      "path": "components/feedme/UnifiedSearchBar.tsx",
       "lines": 953,
       "reason": "Advanced search with autocomplete - never integrated, Simple version used instead",
       "superseded_by": "UnifiedSearchBarSimple.tsx"
     },
     {
-      "path": "frontend/components/feedme/QAPairExtractor.tsx",
+      "path": "components/feedme/QAPairExtractor.tsx",
       "lines": 1127,
       "reason": "Q&A extraction UI - never connected to any workflow",
       "superseded_by": "none - functionality moved to backend"
     },
     {
-      "path": "frontend/components/feedme/SearchResultsGrid.tsx",
+      "path": "components/feedme/SearchResultsGrid.tsx",
       "lines": 881,
       "reason": "Advanced search results - never integrated",
       "superseded_by": "none - basic search in UnifiedSearchBarSimple"
     },
     {
-      "path": "frontend/components/feedme/DragDropManager.tsx",
+      "path": "components/feedme/DragDropManager.tsx",
       "lines": 821,
       "reason": "Drag-drop functionality - never connected to any component",
       "superseded_by": "none"
     },
     {
-      "path": "frontend/components/feedme/ValidationPanel.tsx",
+      "path": "components/feedme/ValidationPanel.tsx",
       "lines": 997,
       "reason": "Content validation UI - never integrated",
       "superseded_by": "none - validation moved to backend"
@@ -57,37 +57,37 @@
   ],
   "unused_duplicate_components": [
     {
-      "path": "frontend/components/feedme/FeedMeModal.tsx",
+      "path": "components/feedme/FeedMeModal.tsx",
       "lines": 521,
       "reason": "Superseded by EnhancedFeedMeModal",
       "superseded_by": "EnhancedFeedMeModal.tsx"
     },
     {
-      "path": "frontend/components/feedme/EditConversationModal.tsx",
+      "path": "components/feedme/EditConversationModal.tsx",
       "lines": 871,
       "reason": "Edit modal never integrated into any workflow",
       "superseded_by": "none - editing not implemented in UI"
     },
     {
-      "path": "frontend/components/feedme/FolderManager.tsx",
+      "path": "components/feedme/FolderManager.tsx",
       "lines": 445,
       "reason": "Advanced folder management never integrated",
       "superseded_by": "basic folder functionality in FolderTreeViewSimple"
     },
     {
-      "path": "frontend/components/feedme/RichTextEditor.tsx",
+      "path": "components/feedme/RichTextEditor.tsx",
       "lines": 623,
       "reason": "Rich text editing never integrated",
       "superseded_by": "none"
     },
     {
-      "path": "frontend/components/feedme/VersionHistoryPanel.tsx",
+      "path": "components/feedme/VersionHistoryPanel.tsx",
       "lines": 398,
       "reason": "Version history UI never integrated",
       "superseded_by": "none - versioning backend-only"
     },
     {
-      "path": "frontend/components/feedme/DiffViewer.tsx",
+      "path": "components/feedme/DiffViewer.tsx",
       "lines": 234,
       "reason": "Diff viewing never integrated",
       "superseded_by": "none"
@@ -95,31 +95,31 @@
   ],
   "test_files_for_removed_components": [
     {
-      "path": "frontend/components/feedme/__tests__/AnalyticsDashboard.test.tsx",
+      "path": "components/feedme/__tests__/AnalyticsDashboard.test.tsx",
       "reason": "Tests for removed AnalyticsDashboard.tsx"
     },
     {
-      "path": "frontend/components/feedme/__tests__/ConversationEditor.test.tsx",
+      "path": "components/feedme/__tests__/ConversationEditor.test.tsx",
       "reason": "Tests for removed ConversationEditor.tsx"
     },
     {
-      "path": "frontend/components/feedme/__tests__/DragDropManager.test.tsx",
+      "path": "components/feedme/__tests__/DragDropManager.test.tsx",
       "reason": "Tests for removed DragDropManager.tsx"
     },
     {
-      "path": "frontend/components/feedme/__tests__/EditConversationModal.test.tsx",
+      "path": "components/feedme/__tests__/EditConversationModal.test.tsx",
       "reason": "Tests for removed EditConversationModal.tsx"
     },
     {
-      "path": "frontend/components/feedme/__tests__/FileGridView.test.tsx",
+      "path": "components/feedme/__tests__/FileGridView.test.tsx",
       "reason": "Tests for removed FileGridView.tsx"
     },
     {
-      "path": "frontend/components/feedme/__tests__/FolderTreeView.test.tsx",
+      "path": "components/feedme/__tests__/FolderTreeView.test.tsx",
       "reason": "Tests for removed FolderTreeView.tsx"
     },
     {
-      "path": "frontend/components/feedme/__tests__/QAPairExtractor.test.tsx",
+      "path": "components/feedme/__tests__/QAPairExtractor.test.tsx",
       "reason": "Tests for removed QAPairExtractor.tsx"
     }
   ],
