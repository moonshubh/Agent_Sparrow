# FeedMe v2.0 Phase 2: Docker Compose for Async Processing Pipeline
# Run with: docker-compose -f docker-compose.feedme.yml up -d

version: '3.8'

services:
  # Redis for Celery broker and result backend
  redis:
    image: redis:7-alpine
    container_name: feedme-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery worker for transcript processing
  celery-worker:
    build: .
    container_name: feedme-celery-worker
    depends_on:
      - redis
    environment:
      - REDIS_URL=redis://redis:6379/0
      - FEEDME_CELERY_BROKER=redis://redis:6379/1
      - FEEDME_RESULT_BACKEND=redis://redis:6379/2
      - FEEDME_ASYNC_PROCESSING=true
      - DATABASE_URL=${DATABASE_URL}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
    volumes:
      - .:/app
    working_dir: /app
    command: python -m app.feedme.celery_app worker --loglevel=info --concurrency=2 --queues=feedme_default,feedme_processing,feedme_embeddings,feedme_parsing,feedme_health
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "from app.feedme.celery_app import check_celery_health; print(check_celery_health())"]
      interval: 60s
      timeout: 30s
      retries: 3

  # Flower for Celery monitoring (optional)
  flower:
    build: .
    container_name: feedme-flower
    depends_on:
      - redis
      - celery-worker
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
    ports:
      - "5555:5555"
    volumes:
      - .:/app
    working_dir: /app
    command: python -m celery --app=app.feedme.celery_app flower --port=5555
    restart: unless-stopped

volumes:
  redis_data:
    driver: local

networks:
  default:
    name: feedme-network