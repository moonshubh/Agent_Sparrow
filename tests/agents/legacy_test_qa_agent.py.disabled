import pytest
import re
from pathlib import Path
from app.agents.qa_agent import QualityAssuranceAgent
from app.schemas.qa_schemas import LogEntry, QAReport, IdentifiedError
from app.tools.log_analysis_tools import parse_log_string_to_log_entry, LOG_PATTERN_SIMPLE

# Sample log lines for testing
VALID_LOG_LINE_INFO = "2025-06-01T10:00:00.1234|INFO|SourceA|12|34|This is an info message|"
VALID_LOG_LINE_ERROR = "2025-06-01T10:01:00.5678|ERROR|SourceB|56|78|This is an error message|"
CUSTOM_ERROR_LOG_LINE = "2025-06-01T10:02:00.0000|WARN|SourceC|1|2|Connection lost due to timeout|"
UNPARSEABLE_LOG_LINE = "This is not a valid log line format"

@pytest.fixture
def qa_agent_no_custom_patterns():
    """Returns a QA agent with no custom patterns."""
    return QualityAssuranceAgent(custom_error_patterns={})

@pytest.fixture
def qa_agent_with_custom_patterns():
    """Returns a QA agent with a sample custom pattern."""
    custom_patterns = {
        "ConnectionIssue": re.compile(r"Connection lost", re.IGNORECASE)
    }
    return QualityAssuranceAgent(custom_error_patterns=custom_patterns)

# Tests for log parsing (delegated to log_analysis_tools, but good to have integration touchpoints)

def test_parse_valid_info_log_line():
    log_entry = parse_log_string_to_log_entry(VALID_LOG_LINE_INFO)
    assert log_entry is not None
    assert log_entry.level == "INFO"
    assert log_entry.source == "SourceA"
    assert log_entry.message == "This is an info message"
    assert log_entry.timestamp.startswith("2025-06-01T10:00:00")

def test_parse_valid_error_log_line():
    log_entry = parse_log_string_to_log_entry(VALID_LOG_LINE_ERROR)
    assert log_entry is not None
    assert log_entry.level == "ERROR"
    assert log_entry.source == "SourceB"
    assert log_entry.message == "This is an error message"

def test_parse_unparseable_log_line():
    log_entry = parse_log_string_to_log_entry(UNPARSEABLE_LOG_LINE)
    assert log_entry is not None
    assert log_entry.level == "UNPARSEABLE"
    assert log_entry.message == UNPARSEABLE_LOG_LINE

# Tests for QualityAssuranceAgent functionality

@pytest.mark.asyncio
async def test_analyze_single_info_log(qa_agent_no_custom_patterns):
    report = await qa_agent_no_custom_patterns.analyze_logs([VALID_LOG_LINE_INFO])
    assert report.total_logs_analyzed == 1
    assert len(report.errors_found) == 0

@pytest.mark.asyncio
async def test_analyze_single_generic_error_log(qa_agent_no_custom_patterns):
    report = await qa_agent_no_custom_patterns.analyze_logs([VALID_LOG_LINE_ERROR])
    assert report.total_logs_analyzed == 1
    assert len(report.errors_found) == 1
    assert report.errors_found[0].error_type == "GenericErrorFound"
    assert report.errors_found[0].description == "Log entry with level ERROR: This is an error message"

@pytest.mark.asyncio
async def test_analyze_single_custom_error_log(qa_agent_with_custom_patterns):
    report = await qa_agent_with_custom_patterns.analyze_logs([CUSTOM_ERROR_LOG_LINE])
    assert report.total_logs_analyzed == 1
    assert len(report.errors_found) == 1
    assert report.errors_found[0].error_type == "ConnectionIssue"
    assert "Custom pattern 'Connection lost' matched" in report.errors_found[0].description

@pytest.mark.asyncio
async def test_analyze_unparseable_log(qa_agent_no_custom_patterns):
    report = await qa_agent_no_custom_patterns.analyze_logs([UNPARSEABLE_LOG_LINE])
    assert report.total_logs_analyzed == 1
    assert len(report.errors_found) == 1 # Unparseable lines are also reported as errors
    assert report.errors_found[0].error_type == "UnparseableLogEntry"
    assert report.errors_found[0].offending_logs[0].message == UNPARSEABLE_LOG_LINE

@pytest.mark.asyncio
async def test_analyze_mixed_logs(qa_agent_with_custom_patterns):
    log_lines = [
        VALID_LOG_LINE_INFO,
        VALID_LOG_LINE_ERROR, # Generic Error
        CUSTOM_ERROR_LOG_LINE, # Custom Error
        UNPARSEABLE_LOG_LINE # Unparseable Error
    ]
    report = await qa_agent_with_custom_patterns.analyze_logs(log_lines)
    assert report.total_logs_analyzed == 4
    assert len(report.errors_found) == 3
    error_types = [err.error_type for err in report.errors_found]
    assert "GenericErrorFound" in error_types
    assert "ConnectionIssue" in error_types
    assert "UnparseableLogEntry" in error_types

@pytest.mark.asyncio
async def test_analyze_no_logs(qa_agent_no_custom_patterns):
    report = await qa_agent_no_custom_patterns.analyze_logs([])
    assert report.total_logs_analyzed == 0
    assert len(report.errors_found) == 0

# It would also be good to add tests that use the actual log files
# For example, loading Log (1).log and checking for specific errors.
# This would require a way to easily access those files from the test environment.
# For now, these unit-style tests cover basic functionality.
